{
    "abs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/abs\">abs</a></h1><p class=\"summary\">Returns the absolute value of the argument.</p><div class=\"usage\"> <code>abs(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">abs (-2.6)=2.6</code></div></body>",
    "abspath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/abspath\">abspath</a></h1><p class=\"summary\">Returns the full path of a file.</p><p>Returns the supplied path converted to an absolute path. Relative paths\nare treated as relative to Houdini\u2019s current working directory. If the\nsupplied path is already absolute, the path is returned unchanged. The\nfile does not need to exist.</p><div class=\"usage\"> <code>abspath(<code class=\"var\">relpath</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/relpath\">relpath</a></div></body>",
    "acos": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/acos\">acos</a></h1><p class=\"summary\">Returns the arc-cosine of the argument.</p><div class=\"usage\"> <code>acos(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">acos (0)=90</code></div></body>",
    "angvel": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/angvel\">angvel</a></h1><p class=\"summary\">Returns the angular velocity required to\nrotate an object from one orientation to another in a certain period of\ntime.</p><div class=\"usage\"> <code>angvel(<code class=\"var\">rot1</code>, <code class=\"var\">rot2</code>, <code class=\"var\">time</code>)</code></div><p>The original rotation is specified in rot1, and the destination\nrotation in rot2. These values can be either a vector3 containing euler\nrotation angles in degrees, or a vector4 containing a quaternion. The\nreturned angular velocity value is expressed in degrees per second, and\nrepresents the shortest path between the two orientations.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">angvel(vector3(0, 0, 0), vector3(90, 0, 0), 1)[0]=90</code></div></body>",
    "arclen": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/arclen\">arclen</a></h1><p class=\"summary\">Returns the arc length of a curve between two U positions.</p><div class=\"usage\"> <code>arclen(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">ustart</code>, <code class=\"var\">ustop</code>)</code></div><p><code class=\"var\">ustart</code> and <code class=\"var\">ustop</code> are unit values, defined in the\n<code>[0, 1]</code> interval.</p><h2>Note</h2><p>the primitive must be either a NURBS, Bezier, or Polygon curve.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">arclen(\"/obj/geo1/model1\", 12, 0, 1)</code></div><p>Computes the length of the entire curve whose index is 12.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/arclenD\">arclenD</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/surflen\">surflen</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "arclenD": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/arclenD\">arclenD</a></h1><p class=\"summary\">Returns the arc length of a curve between two U positions and number of divisions.</p><div class=\"usage\"> <code>arclen(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">ustart</code>, <code class=\"var\">ustop</code>, <code class=\"var\">divs</code>)</code></div><p><code class=\"var\">ustart</code> and <code class=\"var\">ustop</code> are unit values, defined in the\n<code>[0, 1]</code> interval.</p><p><code class=\"var\">divs</code> is the number of divisions to use when evaluating curves.</p><h2>Note</h2><p>the primitive must be either a NURBS, Bezier, or Polygon curve.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">arclenD(\"/obj/geo1/model1\", 12, 0, 1, 20)</code></div><p>Computes the length of the entire curve whose index is 12.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/arclen\">arclen</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/surflen\">surflen</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "arg": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/arg\">arg</a></h1><p class=\"summary\">Returns an argument from a list of HScript-style arguments.</p><div class=\"usage\"> <code>arg(<code class=\"var\">line</code>, <code class=\"var\">argNum</code>)</code></div><p>This function extracts an argument from a line. The example below will\nextract the time out of the date string returned by the system function.\narg is useful for extracting tokens from space delimited strings.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">arg(\"This returns foobar from this sentence\", 2)</code></div><p>Returns the third word from the sentence: foobar.</p><div class=\"codeblock\"><code class=\"codeline\">arg (system(\"date\"), 3)</code></div><p>Returns the the fourth word from the date command. This is usually\n    the system time, ie: 15:26:31.</p><div class=\"codeblock\"><code class=\"codeline\">arg(\"Quoting 'makes this one arg'\", 1)</code></div><p>Returns \"makes this one arg\" as the quoting has transformed that\n    into a single token. Note the quotes are not present in the output.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/argc\">argc</a></div></body>",
    "argc": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/argc\">argc</a></h1><p class=\"summary\">Returns the number of arguments in an HScript-style list of arguments.</p><div class=\"usage\"> <code>argc(<code class=\"var\">line</code>)</code></div><p>Standard parsing is done, no variable expansion\nis done on the line.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">argc(\"This has four arguments\")</code></div><p>Returns 4, as that is the number of space delimited words.</p><div class=\"codeblock\"><code class=\"codeline\">argc(\"Quoting 'makes this one arg'\")</code></div><p>Returns two as the quotes cause the last four words to count as a\n    single word.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/arg\">arg</a></div></body>",
    "asin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/asin\">asin</a></h1><p class=\"summary\">Returns the arc-sine of the argument.</p><div class=\"usage\"> <code>asin(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">asin (.866025)=60</code></div></body>",
    "atan": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/atan\">atan</a></h1><p class=\"summary\">Returns the arc-tangent of the argument.</p><div class=\"usage\"> <code>atan(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">atan (1.73205)=60</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/atan2\">atan2</a></div></body>",
    "atan2": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/atan2\">atan2</a></h1><p class=\"summary\">Returns the arc-tangent of <code class=\"var\">y</code>/<code class=\"var\">x</code>.</p><div class=\"usage\"> <code>atan2(<code class=\"var\">y</code>, <code class=\"var\">x</code>)</code></div><p>This is more stable than <a href=\"https://www.sidefx.com/docs/houdini/expressions/atan\">atan</a> since it\ncan use the signs of y and x to determine the quadrant the angle is in.\nIt also handles the case where x is zero correctly, returning 90 or -90.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">atan2(1, 0) = 90</code></div><div class=\"codeblock\"><code class=\"codeline\">atan2(0, 1) = 0</code></div><div class=\"codeblock\"><code class=\"codeline\">atan2(0, -1) = 180</code></div></body>",
    "atof": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/atof\">atof</a></h1><p class=\"summary\">Converts a string to a float.</p><div class=\"usage\"> <code>atof(<code class=\"var\">source</code>)</code></div></body>",
    "attriblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/attriblist\">attriblist</a></h1><p class=\"summary\">Returns a space-separated list of attribute names.</p><div class=\"usage\"> <code>attriblist(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>,<code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code>\nfor the corresponding attribute class.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattriblist\">pointattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattriblist\">vertexattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattriblist\">primattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattriblist\">detailattriblist</a></div></body>",
    "bbox": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bbox\">bbox</a></h1><p class=\"summary\">Returns bounding box information for a surface node.</p><div class=\"usage\"> <code>bbox(<code class=\"var\">surface_node</code>, <code class=\"var\">type</code>)</code></div><p>The <code class=\"var\">type</code>\ncan be one of D_XMIN, D_YMIN, D_ZMIN, D_XMAX, D_YMAX, D_ZMAX, D_XSIZE,\nD_YSIZE, or D_ZSIZE for the corresponding values of the bounding box.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/centroid\">centroid</a></div></body>",
    "bezier": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bezier\">bezier</a></h1><p class=\"summary\">Channel segment function: Bezier interpoloation spline</p><div class=\"usage\"> <code>bezier()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/spline\">spline</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cubic\">cubic</a></div></body>",
    "bitand": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bitand\">bitand</a></h1><p class=\"summary\">Combines two numbers with bitwise-and.</p><div class=\"usage\"> <code>bitand(<code class=\"var\">abits</code>, <code class=\"var\">bbits</code>)</code></div><p>Returns the abits and bbits combined with bitwise-and.</p><p>All operands are rounded to the nearest integer before processing.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">bitand (0, 6) = 0</code></div><div class=\"codeblock\"><code class=\"codeline\">bitand (15, 6) = 6</code></div></body>",
    "bitor": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bitor\">bitor</a></h1><p class=\"summary\">Combines two numbers with bitwise-or.</p><div class=\"usage\"> <code>bitor(<code class=\"var\">abits</code>, <code class=\"var\">bbits</code>)</code></div><p>Returns the abits and bbits combined with bitwise-or.</p><p>All operands are rounded to the nearest integer before processing.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">bitor (0, 6) = 6</code></div><div class=\"codeblock\"><code class=\"codeline\">bitor (15, 6) = 15</code></div></body>",
    "bitset": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bitset\">bitset</a></h1><p class=\"summary\">Sets or clears a bit in a number.</p><div class=\"usage\"> <code>bitset(<code class=\"var\">number</code>, <code class=\"var\">bit_index</code>, <code class=\"var\">value</code>)</code></div><p>Returns the provided number with the bit corresponding to bit_index being either set if value is not zero, or clear if value is zero.</p><p>All operands are rounded to the nearest integer before processing.</p><p>Bit 0 corresponds to the rightmost bit.  Negative bit indices, or bit indices over 63, will return the number unchanged.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">bitset (0, 3, 1) = 8</code></div><div class=\"codeblock\"><code class=\"codeline\">bitset (15, 3, 0) = 7</code></div></body>",
    "bittest": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bittest\">bittest</a></h1><p class=\"summary\">Returns if a given bit is set.</p><div class=\"usage\"> <code>bittest(<code class=\"var\">number</code>, <code class=\"var\">bit_index</code>)</code></div><p>Returns 1 if the given bit is set in the provided number.</p><p>The number is rounded to the nearest integer before testing.  Bit 0 corresponds to the rightmost bit.  Negative bit indices, or bit indices over 63, will always return 0.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">bittest (8, 3) = 1</code></div><div class=\"codeblock\"><code class=\"codeline\">bittest (8, 1) = 0</code></div></body>",
    "bitxor": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/bitxor\">bitxor</a></h1><p class=\"summary\">Combines two numbers with bitwise-xor.</p><div class=\"usage\"> <code>bitxor(<code class=\"var\">abits</code>, <code class=\"var\">bbits</code>)</code></div><p>Returns the abits and bbits combined with bitwise-or.</p><p>All operands are rounded to the nearest integer before processing.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">bitxor (0, 6) = 6</code></div><div class=\"codeblock\"><code class=\"codeline\">bitxor (15, 6) = 9</code></div></body>",
    "boneangle": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/boneangle\">boneangle</a></h1><p class=\"summary\">Returns the angle at the joint between two bone objects.</p><div class=\"usage\"> <code>boneangle(<code class=\"var\">bone1</code>, <code class=\"var\">bone2</code>)</code></div></body>",
    "ceil": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ceil\">ceil</a></h1><p class=\"summary\">Returns the smallest integer not less than the value passed in.</p><div class=\"usage\"> <code>ceil()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/floor\">floor</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/int\">int</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/trunc\">trunc</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/frac\">frac</a></div></body>",
    "centroid": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/centroid\">centroid</a></h1><p class=\"summary\">Returns centroid information for a surface node.</p><div class=\"usage\"> <code>centroid(<code class=\"var\">surface_node</code>, <code class=\"var\">type</code>)</code></div><p>The <code class=\"var\">type</code> should\nbe one of <code>D_X</code>, <code>D_Y</code>, or <code>D_Z</code> for the corresponding components of the\ncentroid.</p><div class=\"codeblock\"><code class=\"codeline\">centroid(\"../sphere1\", D_X)</code><code class=\"codeline\">centroid(\"../sphere1\", D_Y)</code><code class=\"codeline\">centroid(\"../sphere1\", D_Z)</code></div><h2>Note</h2><p>The centroid is the center of the bounding box of the points, not the average position of the points.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/bbox\">bbox</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/prim\">prim</a></div></body>",
    "ch": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></h1><p class=\"summary\">Returns the value of a parameter.</p><h2>Overview</h2><p>The <code>ch</code> family of functions gets the value of a parameter. This lets you make the values of certain parameters automatically identical to or relative to the value of other parameters.</p><p>For example, if you have two <a href=\"https://www.sidefx.com/docs/houdini/nodes/obj/geo\">Geometry object nodes</a> named <code>geo1</code> and <code>geo2</code>, you can make <code>geo2</code> always be 2 units higher than <code>geo</code> by setting <code>geo2</code>'s <strong>Translate Y</strong> parameter to:</p><div class=\"codeblock\"><code class=\"codeline\">ch(\"../geo1/ty\") + 2</code></div><p>Now when you move <code>geo1</code>, <code>geo2</code>'s Y position will always be 2 units higher.</p><p>Channel references let you create custom <a href=\"https://www.sidefx.com/docs/houdini/network/spare\">spare parameters</a> and <a href=\"https://www.sidefx.com/docs/houdini/assets/\">digital asset interfaces</a> and have them control other nodes, by using channel references to have the nodes inside the subnetwork/asset reference the \"interface\" parameters at the higher level.</p><h2>Path argument</h2><p>The first argument to the channel functions is a string <em>path</em> to the parameter whose value you want to get.</p><p>For parameters on the same node, you can just use the parameter\u2019s <em>internal name</em>. For example, in an object, you could make the object\u2019s X position always match the Y position by setting the <strong>Translate Y</strong> to the expression:</p><div class=\"codeblock\"><code class=\"codeline\">ch(\"ty\")</code></div><h2>Tip</h2><p>You can find the internal name of a parameter in the tooltip when you hover the mouse over the parameter in the parameter editor.</p><p>To get a parameter on a different node, you need to make a <em>path</em> to the parameter, similar to UNIX directory paths.</p><p>For example, to reference the <code>ty</code> parameter of a node named <code>geo2</code> in the same network:</p><div class=\"codeblock\"><code class=\"codeline\">ch(\"../geo2/ty\")</code></div><p>To reference the <code>tx</code> parameter of the parent network node:</p><div class=\"codeblock\"><code class=\"codeline\">ch(\"../tx\")</code></div><h2>Getting numbers</h2><div class=\"usage\"> <code>ch(\"path\")</code></div><p>Returns the <em>floating point</em> value of the given parameter.</p><p>For example, to get the <strong>Origin X</strong> of the <code>font1</code> node:</p><div class=\"codeblock\"><code class=\"codeline\">ch(\"../font1/tx\")</code></div><div class=\"usage\"> <code>chf(\"path\", frame_num)</code></div><p>Returns the floating point value of the given parameter, as computed at the given frame number.</p><p>Getting a value from a future time requires <a href=\"https://www.sidefx.com/docs/houdini/basics/cooking\">cooking</a> some or all of the scene up to that time, so this function is potentially expensive.</p><p>For example, to get the <strong>Origin X</strong> of the <code>font1</code> node from ten frames previous:</p><div class=\"codeblock\"><code class=\"codeline\">chf(\"../font1/text\", $F - 10)</code></div><div class=\"usage\"> <code>cht(\"path\", seconds)</code></div><p>Returns the floating point value of the given parameter, as computed at the given time (in seconds).</p><p>Getting a value from a future time requires <a href=\"https://www.sidefx.com/docs/houdini/basics/cooking\">cooking</a> some or all of the scene up to that time, so this function is potentially expensive.</p><p>For example, to get the <strong>Origin X</strong> of the <code>font1</code> node from 2 seconds previous:</p><div class=\"codeblock\"><code class=\"codeline\">chf(\"../font1/text\", $T - 2)</code></div><h2>Getting strings</h2><div class=\"usage\"> <code>chs(\"path\")</code></div><p>Returns the <em>string</em> value of the given parameter.</p><p>For example, to get the <strong>Text</strong> of the <code>font1</code> node:</p><div class=\"codeblock\"><code class=\"codeline\">chs(\"../font1/text\")</code></div><div class=\"usage\"> <code>chsraw(\"path\")</code></div><p>Returns the \"raw\" string value of the given parameter, without expanding quotes or variable names. For example, if the parameter contains an expression <code>$F - 10</code>, you will get the string <code>\"$F - 10\"</code> (instead of the computed value of the current frame minus ten).</p><h2>Getting a node path</h2><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a>.</p><h2>Getting ramp values</h2><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/chramp\">chramp</a>, <a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampf\">chrampf</a>, and <a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampt\">chrampt</a>.</p><h2>Tips</h2><div class=\"related\">You can automatically create channel-references using the \"Copy\" and \"Paste reference\" commands on the parameter  right-click menu.</div><div class=\"related\">See <a href=\"https://www.sidefx.com/docs/houdini/network/parms#link\">linking parameter values</a> for more information.</div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chramp\">chramp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexist\">chexist</a></div><p></p></body>",
    "chexist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexist\">chexist</a></h1><p class=\"summary\">Returns 1 if the specified channel exists, 0 if it doesn\u2019t.</p><div class=\"usage\"> <code>chexist(<code class=\"var\">channel_name</code>)</code></div><p>The <code>chexist()</code> function determines whether an <em>animation channel</em> exists on the given parameter. This means it checks if the parameter is <em>animated</em>, not whether the parameter itself exists.</p><p>To check if a parameter exists, you can use <a href=\"https://www.sidefx.com/docs/houdini/hom/\">python scripting</a>:</p><div class=\"codeblock\"><code class=\"codeline\">def parm_exist(parmpath):</code><code class=\"codeline\">    nodepath, parmname = os.path.split(parmpath)</code><code class=\"codeline\">    node = hou.node(nodepath)</code><code class=\"codeline\">    return node.parmTuple(parmname) != None</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `chexist(\"/obj/geo1/tx\")`</code></div></body>",
    "chexpr": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexpr\">chexpr</a></h1><p class=\"summary\">Evaluates a channel with a new segment expression.</p><div class=\"usage\"> <code>chexpr(<code class=\"var\">channel</code>, <code class=\"var\">new_expr_function</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chexpr(\"/obj/null1/tx\", \"linear()\")</code><code class=\"codeline\">    chexpr(\"/obj/null1/tx\", \"$IT\")</code><code class=\"codeline\">    chexpr(\"/obj/null1/tx\", \"$OT\")</code><code class=\"codeline\">    chexpr(\"/obj/null1/tx\", \"$IV\")</code><code class=\"codeline\">    chexpr(\"/obj/null1/tx\", \"$OV\")</code></div><h2>Note</h2><p>This can be used to extract in and out segment values, slopes and acceleration using channel expression local variables.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexprf\">chexprf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexprt\">chexprt</a></div></body>",
    "chexprf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexprf\">chexprf</a></h1><p class=\"summary\">Evaluates a channel with a new segment expression at a given frame.</p><div class=\"usage\"> <code>chexprf(<code class=\"var\">channel</code>, <code class=\"var\">new_expr_function</code>, <code class=\"var\">frame</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chexprf(\"/obj/null1/tx\", \"linear()\", 10)</code><code class=\"codeline\">    chexprf(\"/obj/null1/tx\", \"$IT\", 10)</code><code class=\"codeline\">    chexprf(\"/obj/null1/tx\", \"$OT\", 10)</code><code class=\"codeline\">    chexprf(\"/obj/null1/tx\", \"$IV\", 10)</code><code class=\"codeline\">    chexprf(\"/obj/null1/tx\", \"$OV\", 10)</code></div><h2>Note</h2><p>This can be used to extract in and out segment values, slopes and acceleration using channel expression local variables.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexpr\">chexpr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexprt\">chexprt</a></div></body>",
    "chexprt": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexprt\">chexprt</a></h1><p class=\"summary\">Evaluates a channel with a new segment expression at a given time.</p><div class=\"usage\"> <code>chexprt(<code class=\"var\">channel</code>, <code class=\"var\">new_expr_function</code>, <code class=\"var\">time</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chexprt(\"/obj/null1/tx\", \"linear()\", 1.0)</code><code class=\"codeline\">    chexprt(\"/obj/null1/tx\", \"$IT\", 1.0)</code><code class=\"codeline\">    chexprt(\"/obj/null1/tx\", \"$OT\", 1.0)</code><code class=\"codeline\">    chexprt(\"/obj/null1/tx\", \"$IV\", 1.0)</code><code class=\"codeline\">    chexprt(\"/obj/null1/tx\", \"$OV\", 1.0)</code></div><h2>Note</h2><p>This can be used to extract in and out segment values, slopes and acceleration using channel expression local variables.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexpr\">chexpr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chexprf\">chexprf</a></div></body>",
    "chf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></h1><p class=\"summary\">Evaluates a parameter at a given frame.</p><div class=\"usage\"> <code>chf(<code class=\"var\">channel</code>, <code class=\"var\">frame</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></div></body>",
    "chgroup": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chgroup\">chgroup</a></h1><p class=\"summary\">return a string containing all of the channels contained in\na group.</p><div class=\"usage\"> <code>chgroup(<code class=\"var\">group_name</code>)</code></div><h2>Examples</h2><p>This is useful in the command language for traversing\n    all channels in a group:</p><div class=\"codeblock\"><code class=\"codeline\">% foreach channel ( `chgroup(\"group_name\")` ) % echo $channel is in group_name % end</code></div></body>",
    "chop": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chop\">chop</a></h1><p class=\"summary\">Evaluates a channel within a CHOP at the current time.</p><div class=\"usage\"> <code>chop(<code class=\"var\">channel</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chop(\"/ch/ch1/wave1/chan1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopi\">chopi</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopf\">chopf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopstr\">chopstr</a></div></body>",
    "chopcf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopcf\">chopcf</a></h1><p class=\"summary\">Evaluates a channel within a CHOP at a given time.</p><div class=\"usage\"> <code>chopcf(<code class=\"var\">CHOP</code>, <code class=\"var\">channel_index</code>, <code class=\"var\">frame</code>)</code></div><p>Evaluates the channel at index <code class=\"var\">channel_index</code> within the specified\n<code class=\"var\">CHOP</code> at the specified <code class=\"var\">frame</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopcf(\"/ch/ch1/wave1\", 0, 11)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopf\">chopf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopct\">chopct</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopci\">chopci</a></div></body>",
    "chopci": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopci\">chopci</a></h1><p class=\"summary\">Evaluates a channel within a CHOP at a specified sample point.</p><div class=\"usage\"> <code>chopci(<code class=\"var\">CHOP</code>, <code class=\"var\">channel_index</code>, <code class=\"var\">index</code>)</code></div><p>Evaluates the channel at index <code class=\"var\">channel_index</code> within the specified\n<code class=\"var\">CHOP</code> at the specified sample <code class=\"var\">index</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopci(\"/ch/ch1/wave1\", 0, 10)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopi\">chopi</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopct\">chopct</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopcf\">chopcf</a></div></body>",
    "chopct": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopct\">chopct</a></h1><p class=\"summary\">Evaluates a channel within a CHOP at a specified time.</p><div class=\"usage\"> <code>chopct(<code class=\"var\">CHOP</code>, <code class=\"var\">channel_index</code>, <code class=\"var\">time</code>)</code></div><p>Evaluates the channel at index <code class=\"var\">channel_index</code> within the specified\n<code class=\"var\">CHOP</code> at the specified <code class=\"var\">time</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopct(\"/ch/ch1/wave1\", 0, 0.5)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopcf\">chopcf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopci\">chopci</a></div></body>",
    "chope": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chope\">chope</a></h1><p class=\"summary\">Returns the end index of the channels in a CHOP.</p><div class=\"usage\"> <code>chope(<code class=\"var\">CHOP</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chope(\"/ch/ch1/wave1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopl\">chopl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopn\">chopn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopr\">chopr</a></div></body>",
    "chopf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopf\">chopf</a></h1><p class=\"summary\">Evaluates a channel within a CHOP with at a given frame.</p><div class=\"usage\"> <code>chopf(<code class=\"var\">channel</code>, <code class=\"var\">frame</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopf(\"/ch/ch1/wave1/chan1\", 1)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopi\">chopi</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chop\">chop</a></div></body>",
    "chopi": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopi\">chopi</a></h1><p class=\"summary\">Evaluates a channel within a CHOP at a given sample point.</p><div class=\"usage\"> <code>chopi(<code class=\"var\">channel</code>, <code class=\"var\">index</code>)</code></div><p>Evaluates the <code class=\"var\">channel</code> (within a CHOP) at the specified sample <code class=\"var\">index</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopi(\"/ch/ch1/wave1/chan1\", 10)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopf\">chopf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chop\">chop</a></div></body>",
    "chopl": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopl\">chopl</a></h1><p class=\"summary\">Returns the length of the channels in a CHOP, in samples.</p><div class=\"usage\"> <code>chopl(<code class=\"var\">CHOP</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopl(\"/ch/ch1/wave1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chope\">chope</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopn\">chopn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopr\">chopr</a></div></body>",
    "chopn": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopn\">chopn</a></h1><p class=\"summary\">Returns the number of data channels within a CHOP.</p><div class=\"usage\"> <code>chopn(<code class=\"var\">CHOP</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopn(\"/ch/ch1/wave1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chope\">chope</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopl\">chopl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopr\">chopr</a></div></body>",
    "chopnames": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopnames\">chopnames</a></h1><p class=\"summary\">Returns the names of all the data channels within a CHOP.</p><div class=\"usage\"> <code>chopnames(<code class=\"var\">CHOP</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopnames(\"/ch/ch1/wave1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chope\">chope</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopl\">chopl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopr\">chopr</a></div></body>",
    "chopr": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopr\">chopr</a></h1><p class=\"summary\">Returns the sample rate of a CHOP.</p><div class=\"usage\"> <code>chopr(<code class=\"var\">CHOP</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopr(\"/ch/ch1/wave1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chope\">chope</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopl\">chopl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopn\">chopn</a></div></body>",
    "chops": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></h1><p class=\"summary\">Returns the start index of a CHOP.</p><div class=\"usage\"> <code>chops(<code class=\"var\">CHOP</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chops(\"/ch/ch1/wave1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chops\">chops</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chope\">chope</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopl\">chopl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopn\">chopn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopr\">chopr</a></div></body>",
    "chopstr": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopstr\">chopstr</a></h1><p class=\"summary\">Returns the string value of a channel within a CHOP at the current time.</p><div class=\"usage\"> <code>chopstr(<code class=\"var\">channel</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopstr(\"/ch/ch1/wave1/chan1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chop\">chop</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopf\">chopf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopi\">chopi</a></div></body>",
    "chopt": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></h1><p class=\"summary\">Returns the value of a channel within a CHOP at a specified time.</p><div class=\"usage\"> <code>chopt(<code class=\"var\">channel</code>, <code class=\"var\">time</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">chopt(\"/ch/ch1/wave1/chan1\", 0.5)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopct\">chopct</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopi\">chopi</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopf\">chopf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chopt\">chopt</a></div></body>",
    "chramp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chramp\">chramp</a></h1><p class=\"summary\">Returns the value of a ramp parameter at a specific position.</p><div class=\"usage\"> <code>chramp(<code class=\"var\">ramp_path</code>, <code class=\"var\">position</code>, <code class=\"var\">component_index</code>)</code></div><p>When <code class=\"var\">position</code> is outside of the interval [0, 1), it will be first wrapped\naround into such an interval before being used.</p><p><code class=\"var\">component_index</code> is the component of the evaluated value to return. For\ncolor ramps, it must be either 0, 1, or 2. For single-valued ramps,\n<code class=\"var\">component_index</code> must be 0.</p><h2>Examples</h2><p>Return the second component of the evaluated ramp value at a position of 0.33:</p><div class=\"codeblock\"><code class=\"codeline\">chramp(\"/obj/geo1/popnet1/color1/rampcolor\", 0.33, 1)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampf\">chrampf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampt\">chrampt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div></body>",
    "chrampf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampf\">chrampf</a></h1><p class=\"summary\">Returns the value of a ramp parameter at a specific position and frame.</p><div class=\"usage\"> <code>chrampf(<code class=\"var\">ramp_path</code>, <code class=\"var\">position</code>, <code class=\"var\">component_index</code>, <code class=\"var\">frame</code>)</code></div><p>When <code class=\"var\">position</code> is outside of the interval [0, 1), it will be first wrapped\naround into such an interval before being used.</p><p><code class=\"var\">component_index</code> is the component of the evaluated value to return. For\ncolor ramps, it must be either 0, 1, or 2. For single-valued ramps,\n<code class=\"var\">component_index</code> must be 0.</p><h2>Examples</h2><p>Return second component of the evaluated ramp value at a position of 0.33 at frame 289:</p><div class=\"codeblock\"><code class=\"codeline\">chrampf(\"/obj/geo1/popnet1/color1/rampcolor\", 0.33, 1, 289)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chramp\">chramp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampt\">chrampt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div></body>",
    "chrampt": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampt\">chrampt</a></h1><p class=\"summary\">Returns the value of a ramp parameter at a specific position and time.</p><div class=\"usage\"> <code>chrampf(<code class=\"var\">ramp_path</code>, <code class=\"var\">position</code>, <code class=\"var\">component_index</code>, <code class=\"var\">time</code>)</code></div><p>When <code class=\"var\">position</code> is outside of the interval [0, 1), it will be first wrapped\naround into such an interval before being used.</p><p><code class=\"var\">component_index</code> is the component of the evaluated value to return. For\ncolor ramps, it must be either 0, 1, or 2. For single-valued ramps,\n<code class=\"var\">component_index</code> must be 0.</p><h2>Examples</h2><p>Return second component of the evaluated ramp value at a position of 0.33 at 12 seconds into the scene:</p><div class=\"codeblock\"><code class=\"codeline\">chrampf(\"/obj/geo1/popnet1/color1/rampcolor\", 0.33, 1, 12)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chramp\">chramp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chrampf\">chrampf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div></body>",
    "chs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></h1><p class=\"summary\">Evaluates the string value of a parameter at the current time.</p><div class=\"usage\"> <code>chs(<code class=\"var\">channel</code>)</code></div><p>This is useful for evaluating\nfilenames in parameters. The string will be expanded automatically.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></div></body>",
    "chsop": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a></h1><p class=\"summary\">Evaluates the parameter at the current time as a node path string.</p><div class=\"usage\"> <code>chsop(\"path\")</code></div><p>Assumes the given parameter contains a node path, and automatically takes care of things like bundles and relative paths, returning a string containing an absolute path or a space-separated list of absolute paths.</p><p>For example, to get the <strong>Object</strong> node path used by the <code>object_merge1</code> node:</p><div class=\"codeblock\"><code class=\"codeline\">chsop(\"../object_merge1/object1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsoplist\">chsoplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></div></body>",
    "chsoplist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsoplist\">chsoplist</a></h1><p class=\"summary\">Evaluates the parameter at the current time as a node path list string.</p><div class=\"usage\"> <code>chsoplist(\"path\")</code></div><p>Assumes the given parameter contains a list of node paths, and automatically takes care of things like bundles and relative paths, returning a string containing an absolute path or a space-separated list of absolute paths. It can also expand adhoc bundle strings like <code>/obj/null*</code>.</p><p>For example, to get the <strong>Object</strong> node path used by the <code>object_merge1</code> node:</p><div class=\"codeblock\"><code class=\"codeline\">chsoplist(\"../object_merge1/object1\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oplistsort\">oplistsort</a></div></body>",
    "chsraw": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></h1><p class=\"summary\">Returns the raw (unexpanded) expression value of a parameter as a string.</p><div class=\"usage\"> <code>chsraw(<code class=\"var\">channel</code>)</code></div><p>Variables will NOT be expanded. If the given path\nis a channel, then it returns the expression of the channel that is\nevaluated at the current time.</p><p>If you do:</p><div class=\"codeblock\"><code class=\"codeline\">echo `chsraw(\"channel_path\")`</code></div><p>\u2026this will appear to lose your formatting because hscript expands\ndouble quotes before passing the result of the backtick expression\nto the echo command. Multiple levels of escaping is necessary in\norder to maintain them.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsoplist\">chsoplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></div></body>",
    "cht": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></h1><p class=\"summary\">Returns the value of a parameter at a specified time.</p><div class=\"usage\"> <code>cht(<code class=\"var\">channel</code>, <code class=\"var\">time</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></div></body>",
    "clamp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/clamp\">clamp</a></h1><p class=\"summary\">Returns a value clamped between a minimum and maximum.</p><div class=\"usage\"> <code>clamp(<code class=\"var\">value</code>, <code class=\"var\">minimum</code>, <code class=\"var\">maximum</code>)</code></div><p>This is useful to prevent the value from\ngoing outside the specified range.</p><p>If the value is less than the minimum number, the minimum number\nwill be returned. If the value is greater than the maximum number, the\nmaximum number will be returned.</p></body>",
    "clamptosphere": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/clamptosphere\">clamptosphere</a></h1><p class=\"summary\">Clamps a vector to always end between a minimum and maximum sphere.</p><div class=\"usage\"> `clamptosphere(<code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>, <code class=\"var\">min_radius</code>, <code class=\"var\">max_radius</code>,</div><p><code class=\"var\">constant_type</code>)`</p><p>This function computes a vector R that is parallel to the given (x,y,z)\nvector. R is adjusted so that its magnitude is always between the min\nand max radii (i.e min_radius  \u2264 |R|  \u2264 max_radius)</p><p>This function returns one of the components of the vector R according\nto the value of <code class=\"var\">constant_type</code>: \"X\", \"Y\" or \"Z\".</p></body>",
    "constant": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/constant\">constant</a></h1><p class=\"summary\">Channel segment function: constant value.</p><div class=\"usage\"> <code>constant()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/linear\">linear</a></div></body>",
    "contextoption": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoption\">contextoption</a></h1><p class=\"summary\">Returns the value of context option as a floating point value.</p><div class=\"usage\"> <code>contextoption(<code class=\"var\">name</code>)</code></div><p>Retrieves the current value of a context option. This may have been set\nby a node requesting data from another node, or from the global default\ncontext option values stored in the HIP file.</p><p><strong>This function only returns floating-point number values</strong>.\nFor string values, you must use <a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoptions\">contextoptions</a>.</p><h2>Tip</h2><p>You can get also get the value of a context option in an expression\n    using <code>@<code class=\"var\">name</code></code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoptions\">contextoptions</a></div></body>",
    "contextoptions": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoptions\">contextoptions</a></h1><p class=\"summary\">Returns a cook context option as a string value.</p><div class=\"usage\"> <code>contextoptions(<code class=\"var\">name</code>)</code></div><p>Retrieves the current value of a context option. This may have been set\nby a node requesting data from another node, or from the global default\ncontext option values stored in the HIP file.</p><p><strong>This function only returns string values</strong>.\nFor floating-point values, you must use <a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoption\">contextoption</a>.</p><h2>Tip</h2><p>You can get also get the value of a context option in an expression\n    using <code>@<code class=\"var\">name</code></code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoption\">contextoption</a></div></body>",
    "cophasmeta": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cophasmeta\">cophasmeta</a></h1><p class=\"summary\">Tests if metadata exists on a compositing node.</p><div class=\"usage\"> <code>cophasmeta(<code class=\"var\">compositing_node</code>, <code class=\"var\">metadata_name</code>)</code></div><p>Metadata can be added to sequences with a <a href=\"https://www.sidefx.com/docs/houdini/nodes/cop2/metadata\">Metadata COP</a>.\nThis expression function queries if the metadata with <code>metadata_name</code> exists on the COP node <code>composting_node</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/copmeta\">copmeta</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/copmetas\">copmetas</a></div></body>",
    "copmeta": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/copmeta\">copmeta</a></h1><p class=\"summary\">Returns numeric metadata from a compositing node.</p><div class=\"usage\"> <code>copmeta(<code class=\"var\">compositing_node</code>, <code class=\"var\">metadata_name</code>, <code class=\"var\">index</code>)</code></div><p>Metadata can be added to sequences with a <a href=\"https://www.sidefx.com/docs/houdini/nodes/cop2/metadata\">Metadata COP</a>.\nThis expression function will return the value of numeric metadata, such as\nfloating point values, vectors, and matrices. The <strong>index</strong> is used to access\nthe element to return for types with multiple values, such as vector and matrix\ntypes.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/copmetas\">copmetas</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cophasmeta\">cophasmeta</a></div></body>",
    "copmetas": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/copmeta\">copmeta</a></h1><p class=\"summary\">Returns string metadata from a compositing node.</p><div class=\"usage\"> <code>copmetas(<code class=\"var\">compositing_node</code>, <code class=\"var\">metadata_name</code>)</code></div><p>Metadata can be added to sequences with a <a href=\"https://www.sidefx.com/docs/houdini/nodes/cop2/metadata\">Metadata COP</a>.\nThis expression function will return the value of string (text) metadata</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/copmeta\">copmeta</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cophasmeta\">cophasmeta</a></div></body>",
    "cos": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cos\">cos</a></h1><p class=\"summary\">Returns the cosine of the argument.</p><div class=\"usage\"> <code>cos(<code class=\"var\">degrees</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">cos (60)=0.5</code></div></body>",
    "cosh": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cosh\">cosh</a></h1><p class=\"summary\">Returns the hyperbolic cosine of the argument.</p><div class=\"usage\"> <code>cosh(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">cosh (2) = 3.7622</code></div></body>",
    "cross": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cross\">cross</a></h1><p class=\"summary\">Computes the cross-product of two vectors.</p><div class=\"usage\"> <code>cross(<code class=\"var\">v1</code>, <code class=\"var\">v2</code>)</code></div></body>",
    "cubic": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cubic\">cubic</a></h1><p class=\"summary\">Channel segment function: cubic spline.</p><div class=\"usage\"> <code>cubic()</code></div><p>This function uses the slopes at either end to\nsolve the differential equation to give a smooth curve between the end\npoints.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/spline\">spline</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/bezier\">bezier</a></div></body>",
    "cucwc": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cucwc\">cucwc</a></h1><p class=\"summary\">Deprecated: current working container for custom panels.</p><p>Custom panels are deprecated functionality.</p><div class=\"usage\"> <code>cucwc()</code></div></body>",
    "cudatatype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cudatatype\">cudatatype</a></h1><p class=\"summary\">Deprecated: data type of a gadget, for custom panels.</p><div class=\"usage\"> <code>cudatatype(<code class=\"var\">gadget_path</code>)</code></div><p>Possible values are float, int, and string.</p><p>Custom panels are deprecated functionality.</p></body>",
    "cumenuadd": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cumenuadd\">cumenuadd</a></h1><p class=\"summary\">Deprecated: adds a menu entry on a custom panel.</p><div class=\"usage\"> <code>cumenuadd(<code class=\"var\">gadget_path</code>, <code class=\"var\">menu_entry</code>)</code></div><p>Adds the specified menu entry to the given gadget if it is a menu.\nReturns the entry if added.</p><p>Custom panels are deprecated functionality.</p></body>",
    "cuquery": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cuquery\">cuquery</a></h1><p class=\"summary\">Deprecated: returns a value from a custom panel.</p><div class=\"usage\"> <code>cuquery(<code class=\"var\">panel_path</code>, <code class=\"var\">value_name</code>)</code></div><p>Custom panels are deprecated functionality.</p></body>",
    "curvature": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></h1><p class=\"summary\">Returns the curvature of the surface at the given UV coordinates.</p><div class=\"usage\"> <code>curvature(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">u</code>, <code class=\"var\">v</code>)</code></div><p><code class=\"var\">u</code> and <code class=\"var\">v</code> are unit values, defined in the <code>[0, 1]</code> interval.</p><h2>Note</h2><p>if the primitive is a mesh, u and v are defined in terms of its\n    number of rows and columns.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primuv\">primuv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primduv\">primduv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></div></body>",
    "cutype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cutype\">cutype</a></h1><p class=\"summary\">Deprecated: Returns the type of a gadget on a custom panel.</p><div class=\"usage\"> <code>cutype(<code class=\"var\">gadget_path</code>)</code></div><p>Custom panels are deprecated functionality.</p></body>",
    "cycle": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a></h1><p class=\"summary\">Channel segment function: repeats animation from previous frames.</p><div class=\"usage\"> <code>cycle(<code class=\"var\">f1</code>, <code class=\"var\">f2</code>)</code></div><p>Repeats the animation from frames <code class=\"var\">f1</code> to <code class=\"var\">f2</code>.</p><p>If you wish to repeat the animation cumulatively,\nuse the <a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffset\">cycleoffset</a> function instead.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffset\">cycleoffset</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffsett\">cycleoffsett</a></div></body>",
    "cycleoffset": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffset\">cycleoffset</a></h1><p class=\"summary\">Channel segment function: repeats the animation between frames <code class=\"var\">f1</code> and <code class=\"var\">f2</code>, accumulating the value.</p><div class=\"usage\"> <code>cycleoffset(<code class=\"var\">f1</code>, <code class=\"var\">f2</code>)</code></div><p>Each repeated portion will have its first value set\nto the last value of the previous cycle. The rest of the values are set\nsuch that their relative increments with respect to the first value\nmatch the relative increments in the channel interval between <code class=\"var\">f1</code> and\n<code class=\"var\">f2</code>. If you wish to repeat motion exactly, use the cycle function\ninstead.</p><p>If <code class=\"var\">f1</code> is less than <code class=\"var\">f2</code>, then it will cycle forwards from <code class=\"var\">f1</code>\nto <code class=\"var\">f2</code>. If <code class=\"var\">f2</code> is less than <code class=\"var\">f1</code>, then it will cycle backwards\nfrom <code class=\"var\">f2</code> to <code class=\"var\">f1</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffsett\">cycleoffsett</a></div></body>",
    "cycleoffsett": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffsett\">cycleoffsett</a></h1><p class=\"summary\">Channel segment function: repeats the animation between times <code class=\"var\">t1</code> and <code class=\"var\">t2</code>, accumulating the value.</p><div class=\"usage\"> <code>cycleoffsett(<code class=\"var\">t1</code>, <code class=\"var\">t2</code>)</code></div><p>Each repeated portion will have its first value set\nto the last value of the previous cycle. If you wish to repeat motion\nexactly, use the cyclet function instead.</p><p>If <code class=\"var\">t1</code> is less than <code class=\"var\">t2</code>, then it will cycle forwards from <code class=\"var\">t1</code>\nto <code class=\"var\">t2</code>. If <code class=\"var\">t2</code> is less than <code class=\"var\">t1</code>, then it will cycle backwards\nfrom <code class=\"var\">t2</code> to <code class=\"var\">t1</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffset\">cycleoffset</a></div></body>",
    "cyclet": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a></h1><p class=\"summary\">Channel segment function: repeats animation from previous frames.</p><div class=\"usage\"> <code>cyclet(<code class=\"var\">t1</code>, <code class=\"var\">t2</code>)</code></div><p>Repeats the animation from <code class=\"var\">t1</code> seconds to <code class=\"var\">t2</code> seconds.</p><p>If you wish to repeat the animation cumulatively, use\nthe <a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffsett\">cycleoffsett</a> function instead.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffset\">cycleoffset</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycleoffsett\">cycleoffsett</a></div></body>",
    "decode": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/decode\">decode</a></h1><p class=\"summary\">Decodes a variable name that was previously encoded.</p><div class=\"usage\"> <code>decode(<code class=\"var\">s</code>)</code></div><p>Houdini VEX variable names are only allowed to contain letters, numbers, and\nunderscores, and must not begin with a number. Arbitrary strings can be passed\nthrough the <code>encode</code> method to generate a string that obeys these restriction.\nThis method takes one of these encoded strings, and returns the original\nstring. A string that has not been encoded will be returned unmodified.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/encode\">encode</a></div></body>",
    "decodeattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/decodeattrib\">decodeattrib</a></h1><p class=\"summary\">Decodes a geometry attribute name that was previously encoded.</p><div class=\"usage\"> <code>decodeattrib(<code class=\"var\">s</code>)</code></div><p>Houdini geometry attributes and group names are only allowed to contain\nletters, numbers, and underscores, and must not begin with a number. Arbitrary\nstrings can be passed through the <code>encodeattrib</code> method to generate a string\nthat obeys these restriction. This method takes one of these encoded strings,\nand returns the original string. A string that has not been encoded will be\nreturned unmodified.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/encodeattrib\">encodeattrib</a></div></body>",
    "decodeparm": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/decodeparm\">decodeparm</a></h1><p class=\"summary\">Decodes a node parameter name that was previously encoded.</p><div class=\"usage\"> <code>decodeparm(<code class=\"var\">s</code>)</code></div><p>Houdini parameter names are only allowed to contain letters, numbers, hash\ncharacters (for multiparms), and underscores, and must not begin with a\nnumber. Arbitrary strings can be passed through the <code>encodeparm</code> method to\ngenerate a string that obeys these restriction. This method takes one of these\nencoded strings, and returns the original string. A string that has not been\nencoded will be returned unmodified.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/encodeparm\">encodeparm</a></div></body>",
    "deg": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/deg\">deg</a></h1><p class=\"summary\">Converts from radians to degrees.</p><div class=\"usage\"> <code>deg(<code class=\"var\">radians</code>)</code></div></body>",
    "degree": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/degree\">degree</a></h1><p class=\"summary\">Returns the degree a specified face or hull.</p><div class=\"usage\"> <code>degree(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, D_U|D_V)</code></div><p>Polygons and meshes are expressed as\nlinear functions, so their degree is 1. Spline types \u2013 NURBS and Bezier\ncurves and surfaces \u2013 have degrees ranging from 1 to 10.</p><h2>Note</h2><p>If the primitive is a polygon or a curve, D_U and D_V are\n    irrelevant.</p></body>",
    "detail": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/detail\">detail</a></h1><p class=\"summary\">Returns the value of a detail attribute.</p><div class=\"usage\"> <code>detail(<code class=\"var\">surface_node</code>, <code class=\"var\">attrib_name</code>, <code class=\"var\">attrib_index</code>)</code></div><h2>Tip</h2><p>This expression may not work if <code class=\"var\">surface_node</code> is the <em>currently cooking</em> node.\n    Try specifying an upstream node.</p><p>This can also be used to read the value of a detail intrinsic by specifying\n<code>\"intrinsic:name_of_intrinsic\"</code> instead of an attribute name.</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for\nexample <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\nattribute <code>param</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">detail(\"/obj/geo1/attribpromote1\", \"area\", 0)</code></div><p>Returns the total area of the geometry, if the geometry had first\nbeen measured and then AttribPromote had promoted the area primitive\nattribute to a detail attribute with Sum as the promotion method.</p></body>",
    "detailattriblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattriblist\">detailattriblist</a></h1><p class=\"summary\">Returns a space-separated list of detail attribute names.</p><div class=\"usage\"> <code>detailattriblist(<code class=\"var\">surface_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattriblist\">pointattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattriblist\">vertexattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattriblist\">primattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/attriblist\">attriblist</a></div></body>",
    "detailattribsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribsize\">detailattribsize</a></h1><p class=\"summary\">Returns the number of components in a detail attribute.</p><div class=\"usage\"> <code>detailattribsize(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute is not found, returns 0.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">detailattribsize( \"/obj/model/capture\", \"pCaptData\" )</code></div><p>Returns the number of elements in a \"pCaptData\" attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detail\">detail</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribsize\">pointattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribsize\">vertexattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribsize\">primattribsize</a></div></body>",
    "detailattribtype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribtype\">detailattribtype</a></h1><p class=\"summary\">Returns the type of a detail attribute.</p><div class=\"usage\"> <code>detailattribtype(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute are not found, returns -1.</p><div class=\"argument\"><code>Types are</code></div><div class=\"related\">-1 - Unknown/Invalid</div><div class=\"related\">0 - Integer</div><div class=\"related\">1 - Float</div><div class=\"related\">2 - String</div><div class=\"related\">3 - Array of integers</div><div class=\"related\">4 - Array of floats</div><div class=\"related\">5 - Array of strings</div><div class=\"related\">6 - Dictionary</div><div class=\"related\">7 - Array of dictionaries</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">detailattribsize( \"/obj/model/box\", \"Cd\" )</code></div><p>Returns 1 to denote a float attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detail\">detail</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribtype\">pointattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribtype\">vertexattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribtype\">primattribtype</a></div></body>",
    "details": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/details\">details</a></h1><p class=\"summary\">Returns the string value of a detail attribute.</p><div class=\"usage\"> <code>details(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>This can also be used to read the value of a detail intrinsic by specifying\n<code>\"intrinsic:name_of_intrinsic\"</code> instead of an attribute name.</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for\nexample <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\nattribute <code>param</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">details(\"/obj/geo1/attribcreate1\", \"varmap\")</code></div><p>Returns the currently bound index attribute\u2019s value.</p></body>",
    "detailsmap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailsmap\">detailsmap</a></h1><p class=\"summary\">Returns a string from a list of strings in a detail attribute.</p><div class=\"usage\"> <code>detailsmap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>This function will return the <code class=\"var\">index</code>th unique string bound to the given\ndetail attribute. Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/detailsnummap\">detailsnummap</a> to find the total number of unique\nstrings. Note that the exact order of the strings should not be\nrelied upon. The indexes start with 0 and go to detailsnummap()-1.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">detailsmap(\"/obj/geo1/attribcreate1\", \"varmap\", 0)</code></div><p>Returns the first variable mappings on the given surface node.</p></body>",
    "detailsnummap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailsnummap\">detailsnummap</a></h1><p class=\"summary\">Returns the number of unique strings bound to a detail attribute.</p><div class=\"usage\"> <code>detailsnummap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/detailsmap\">detailsmap</a> to extract the strings.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">detailsnummap(\"/obj/geo1/attribcreate1\", \"varmap\")</code></div><p>Returns number of variable mappings on the given surface node.</p></body>",
    "determinant": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/determinant\">determinant</a></h1><p class=\"summary\">Returns the determinant of a matrix.</p><div class=\"usage\"> <code>determinant(<code class=\"var\">mat</code>)</code></div><p>This is only valid for a 4\u00d74 or 3\u00d73 matrix.\nIf the matrix is larger than 4\u00d74, the\n4\u00d74 determinant will be returned. If the matrix is smaller than 3\u00d73, the\nmatrix will be converted to a 3\u00d73 before the determinant is computed.\nThe results of the upward conversion are not guaranteed.</p></body>",
    "dihedral": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dihedral\">dihedral</a></h1><p class=\"summary\">Computes the dihedral matrix between vectors <code class=\"var\">v0</code> and <code class=\"var\">v1</code>.</p><div class=\"usage\"> <code>dihedral(<code class=\"var\">v0</code>, <code class=\"var\">v1</code>)</code></div><p>This returns a rotation matrix which will rotate vector v0 to vector v1.</p></body>",
    "distance": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/distance\">distance</a></h1><p class=\"summary\">Returns the distance between two 3D points.</p><div class=\"usage\"> <code>distance(<code class=\"var\">x1</code>, <code class=\"var\">y1</code>, <code class=\"var\">z1</code>, <code class=\"var\">x2</code>, <code class=\"var\">y2</code>, <code class=\"var\">z2</code>)</code></div><p>A.K.A. <code>sqrt((x2-x1)^2 + (y2-y1)^2 + (z2-z1)^2)</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/uvdist\">uvdist</a></div></body>",
    "dopallfields": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopallfields\">dopallfields</a></h1><p class=\"summary\">Returns a space separated list of all the field names that can be\npassed to the dopfield function.</p><div class=\"usage\"> `dopallfields(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordType</code>)`</p><p>This list is not the same as the values\nreturned from the <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfieldname\">dopfieldname</a> function because it includes all the\nsubvalues that can be accessed. For example if there is a vector field\nnamed \"t\", the dopfieldname function would simply return \"t\". This\nfunction would return \"tx ty tz\" (along with all the other field names).\nNote that \"t\" is not even in this list because dopfield returns a single\nfloat value and so cannot access a vector like \"t\" directly.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopallfields(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\")</code></div><p>Returns all the field name values that can be passed to the dopfield\n    function. This list would begin \"angvelx angvely angvelz \u2026\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfield\">dopfield</a></div></body>",
    "dopcontextgeo": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopcontextgeo\">dopcontextgeo</a></h1><p class=\"summary\">Returns the full path of the node connected to a dopnetwork.</p><div class=\"usage\"> <code>dopcontextgeo(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">index</code> is the 0-based number of the input. For example,\nto get the path of the node connected to the first input,\nuse <code>dopcontextgeo(\".\", 0)</code>, and for the second input, use\n<code>dopcontextgeo(\".\", 1)</code>.</p><p>This differs from <code>opinputpath</code> as the given name should be the name of a\nnode inside a dopnet (or the dopnet itself).  This simplifies the process of\nfinding what is wired up to a dopnet node at the SOP level. Passing \".\" as the\npath will cause your containing dopnet to be used.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">point(dopcontextgeo(\".\", 0), $PT, \"P\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinputpath\">opinputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutputpath\">opoutputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></div></body>",
    "dopcountslices": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopcountslices\">dopcountslices</a></h1><p class=\"summary\">Returns the number of records of a given type in a piece of\ndynamics data.</p><div class=\"usage\"> <code>dopcountslices(<code class=\"var\">dop</code>, <code class=\"var\">objectFilter</code>, <code class=\"var\">subDataName</code>)</code></div><p>Returns the number of slices an object should be broken into given\n    the set of slices stored in the given data name.  Each slice\n    divides space into two, but the hierarchy of slices can make\n    computation of the total more tricky, hence this function.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnumrecords(\"/obj/dopnet1\", \"object1\", \"Slice\")</code></div><p>Returns the number of logical slices object1 should be broken into\n    given the slice data stored as subdata to Slice.</p></body>",
    "dopfield": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfield\">dopfield</a></h1><p class=\"summary\">Returns the value of a field as a float.</p><div class=\"usage\"> `dopfield(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>, <code class=\"var\">recordType</code>,</div><p><code class=\"var\">recordNum</code>, <code class=\"var\">fieldName</code>)`</p><p>This function always returns a float value. To get a string value\n(which you can possibly then convert to a different type, using for\nexample <a href=\"https://www.sidefx.com/docs/houdini/expressions/vector\">vector</a>), see <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfields\">dopfields</a>.</p><p>If a field is multivalued, you can access individual parameters\nby adding a suffix.</p><p>For example, <code>\"ty\"</code> will access the y component of the <code>\"t\"</code> field. If the\nfield is a quaternion, you can use <code>\"rx\"</code>, <code>\"ry\"</code>, and <code>\"rz\"</code> as extensions to\nget the euler rotations for the quaternion. In the special case of a\nquaternion named <code>\"orient\"</code>, simply using the name <code>\"rx\"</code> will return the\nequivalent of <code>\"orientrx\"</code>.</p><p>When accessing <em>subdata</em>, the name of the data field is based\non the name of the node that creates it. The complete\npath to the subdata must be provided. See the example below.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopfield(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 0, \"ty\")</code></div><p>Returns the y position of object obj0</p><div class=\"codeblock\"><code class=\"codeline\">dopfield(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 0, \"ry\")</code></div><p>Returns the ry component of the orientation of object obj0. This\n    will be in degrees.</p><div class=\"codeblock\"><code class=\"codeline\">dopfield(\"/obj/geo1/dopnet1\", \"Relationships/Spring_spring_constraint1\", \"\", \"Basic\", 0, \"memusage\")</code></div><p>Returns the memory usage of a dynamics relationship</p><div class=\"codeblock\"><code class=\"codeline\">dopfield(\"/obj/dopnet1\", \"obj0\", \"Forces/Gravity_gravity1\", \"Options\", 0, \"forcey\")</code></div><p>Returns the y component of the gravity force created by the Gravity\n    Force node named gravity1. Note that the full path must be given,\n    including the relevant node name, and that this path corresponds to\n    the folder names in the tree view of the DOP network.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfields\">dopfields</a></div></body>",
    "dopfieldname": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfieldname\">dopfieldname</a></h1><p class=\"summary\">Returns the name of a DOP field.</p><div class=\"usage\"> `dopfieldname(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordType</code>, <code class=\"var\">fieldNum</code>)`</p><p>Returns the name of the <code class=\"var\">fieldNum</code>th field of the given record type.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopfieldname(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 3)</code></div><p>Returns the name of the fourth field of the Options record of the\n    Position subdata owned by obj0.</p></body>",
    "dopfields": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfields\">dopfields</a></h1><p class=\"summary\">Returns the value of a DOP field as a string.</p><div class=\"usage\"> <code>dopfields(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>, <code class=\"var\">recordType</code>, <code class=\"var\">recordNum</code>, <code class=\"var\">fieldName</code>)</code></div><p>Since this function returns values as a string, it allows you to convert\ncomplex types such as vectors to the native type using the\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/vector\">vector</a> expression function.</p><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfield\">dopfield</a> for more information.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vector(dopfields(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 0, \"position\"))</code></div><p>Gets the position of the object as a string and converts it into a\nvector.</p><div class=\"codeblock\"><code class=\"codeline\">dopfields(\"/obj/geo1/dopnet1\", \"Relationships/Spring_spring_constraint1\", \"\", \"ObjInGroup\", 0, \"objname\")</code></div><p>Returns the name of the first object involved in a spring constraint relationship\n(e.g. <code>\"sphere2\"</code>).</p><div class=\"codeblock\"><code class=\"codeline\">dopfields(\"/obj/geo1/dopnet1\",\"sphere2\",\"\", \"RelInGroup\", 0, \"relname\")</code></div><p>Returns the name of the first relationship on an object\n(e.g. <code>\"Spring_spring_constraint1\"</code>).</p></body>",
    "dopfieldtype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfieldtype\">dopfieldtype</a></h1><p class=\"summary\">Returns the type of a DOP field.</p><div class=\"usage\"> `dopfieldtype(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordType</code>, <code class=\"var\">fieldNum</code>)`</p><p>Returns the type of the <code class=\"var\">fieldNum</code>th field of the given record.</p><p>Possible types are: \"string\", \"float\", \"vector2\", and \"vector3\".</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopfieldtype(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 2)</code></div><p>Returns the type of the third field of the Options record of the\n    Position data attached to object obj0.</p></body>",
    "dopframe": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframe\">dopframe</a></h1><p class=\"summary\">Returns the current frame of the simulation.</p><div class=\"usage\"> <code>dopframe(<code class=\"var\">dop</code>)</code></div><p>This will often be equal to the global frame $F, unless the Time Scale\nor Offset Time parameters of the DOP Network have been changed from\ntheir default values.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/doptime\">doptime</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsttoframe\">dopsttoframe</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframetost\">dopframetost</a></div></body>",
    "dopframetost": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframetost\">dopframetost</a></h1><p class=\"summary\">Returns the simulation time equivalent of a simulation frame.</p><div class=\"usage\"> <code>dopframetost(<code class=\"var\">dop</code>, <code class=\"var\">simulationframe</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsttoframe\">dopsttoframe</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframe\">dopframe</a></div></body>",
    "dopgrouphasobject": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopgrouphasobject\">dopgrouphasobject</a></h1><p class=\"summary\">Returns 1 if a specified DOP group contains a specified object.</p><div class=\"usage\"> <code>dopgrouphasobject(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">group</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopgrouphasobject(\"/obj/dopnet1\", \"rbdobject\", \"group1\")</code></div><p>Returns 1 if group1 contains an object named rbdobject.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopgrouplist\">dopgrouplist</a></div></body>",
    "dopgroupismutual": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopgroupismutual\">dopgroupismutual</a></h1><p class=\"summary\">Returns 1 if a specified DOP group is mutually affecting.</p><div class=\"usage\"> <code>dopgroupismutual(<code class=\"var\">dop</code>, <code class=\"var\">group</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopgroupismutual(\"/obj/dopnet1\", \"group1\")</code></div><p>Returns 1 if group1 is a mutual affector objects.</p></body>",
    "dopgrouplist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopgrouplist\">dopgrouplist</a></h1><p class=\"summary\">returns a string containing a list of all object groups\nfor the current time in a specified DOP Network.</p><div class=\"usage\"> <code>dopgrouplist(<code class=\"var\">dop</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopgrouplist(\"/obj/dopnet1\")</code></div><p>Returns a string such as \"group1 group2 <strong>rbdsolver1</strong>\".</p></body>",
    "dophasfield": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dophasfield\">dophasfield</a></h1><p class=\"summary\">Returns 1 if a specified DOP field exists.</p><div class=\"usage\"> `dophasfield(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordType</code>, <code class=\"var\">recordNum</code>, <code class=\"var\">fieldName</code>)`</p><p>This expression can be used before the <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfield\">dopfield</a> or <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfields\">dopfields</a>\nexpressions to ensure that any returned empty strings or zero values are\nin fact true values as opposed to default values being returned for an\ninvalid field name.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dophasfield(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 0, \"ty\")</code></div><p>Returns 1, because Position data has an option with the name ty.</p><div class=\"codeblock\"><code class=\"codeline\">dopfield(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\", 0, \"notafield\")</code></div><p>Returns 0 because notafield is not a field name in the Position data\n    options.</p></body>",
    "dophassubdata": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dophassubdata\">dophassubdata</a></h1><p class=\"summary\">Returns 1 if a dynamics object has the specified subdata.</p><div class=\"usage\"> <code>dophassubdata(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dophassubdata(\"/obj/dopnet1\", \"obj0\", \"Geometry/Volume\")</code></div><p>Returns true if obj0's Geometry data has the Volume subdata attached\n    to it.</p></body>",
    "dopnodeobjs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnodeobjs\">dopnodeobjs</a></h1><p class=\"summary\">Returns the list of objects processed by a DOP in the latest timestep.</p><div class=\"usage\"> <code>dopnodeobjs(<code class=\"var\">dop</code>)</code></div><p>Returns a string containing a space-separated list of object identifies.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnodeobjs(\"/obj/dopnet1\")</code></div><p>Returns a list of identifiers for all objects in the /obj/dopnet1\n    DOP Network. Since no specific DOP node is specified, the node with\n    the display flag is used.</p></body>",
    "dopnumfields": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnumfields\">dopnumfields</a></h1><p class=\"summary\">Returns the number of fields in a DOP record type.</p><div class=\"usage\"> `dopnumfields(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordType</code>)`</p><p>The \"Options\" record type, for example, usually has one field for every\nparameter in the DOP Node that creates that data type.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnumfields(\"/obj/dopnet1\", \"obj0\", \"Position\", \"Options\")</code></div><p>Returns the number of different fields that the \"Options\" record has\n    in the \"Position\" data owned by \"obj0\".</p></body>",
    "dopnumobjects": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnumobjects\">dopnumobjects</a></h1><p class=\"summary\">returns the number of objects in a simulation.</p><div class=\"usage\"> <code>dopnumobjects(<code class=\"var\">dop</code>, <code class=\"var\">objectFilter</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnumobjects(\"/obj/dopnet1\", \"foo*\")</code></div><p>Returns the number of objects in the dopnet with names prefixed by\n    foo.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopobjectlist\">dopobjectlist</a></div></body>",
    "dopnumrecords": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnumrecords\">dopnumrecords</a></h1><p class=\"summary\">Returns the number of records of a given type in a piece of\ndynamics data.</p><div class=\"usage\"> `dopnumrecords(<code class=\"var\">dop</code>, <code class=\"var\">objectFilter</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordType</code>)`</p><p>Note that this is different than the number of fields. The\nPosition/Options data type usually has one record that has several\nfields, such as \"position\" and \"orientation\".</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnumrecords(\"/obj/dopnet1\", \"object1\", \"Impacts\", \"Impacts\")</code></div><p>Returns the number of records in the record type called \"Impacts\"\n    found in the data called \"Impacts\", which is owned by the object\n    \"object1\"</p></body>",
    "dopnumrecordtypes": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnumrecordtypes\">dopnumrecordtypes</a></h1><p class=\"summary\">Returns the number of types of record in a piece of dynamics data.</p><div class=\"usage\"> <code>dopnumrecordtypes(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>)</code></div><p>Most subdata contains at least the records \"Basic\" and \"Options\"</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnumrecordtypes(\"/obj/dopnet1\", \"object1\", \"Position\")</code></div><p>Returns the number of record types that the Position data attached\n    to object1 has.</p></body>",
    "dopnumsubdata": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnumsubdata\">dopnumsubdata</a></h1><p class=\"summary\">Returns the number of subdata items attached to an object or data.</p><div class=\"usage\"> <code>dopnumsubdata(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopnumsubdata(\"/obj/dopnet1\", \"obj0\", \"\")</code></div><p>Returns the number of data items attached to obj0.</p><div class=\"codeblock\"><code class=\"codeline\">dopnumsubdata(\"/obj/dopnet1\", \"obj0\", \"Geometry\")</code></div><p>Returns the number of data items attached to obj0/Geometry.</p></body>",
    "dopobjectlist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopobjectlist\">dopobjectlist</a></h1><p class=\"summary\">Returns all objects matching the an object specification.</p><div class=\"usage\"> <code>dopobjectlist(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">listNames</code>)</code></div><p>Returns a string containing a space-separated list. If the <code class=\"var\">listNames</code>\nargument is zero, then the string is a list of object identifiers.\nOtherwise it is a list of object names.</p><p>Object names are easier to read, but may not uniquely identify each object.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopobjectlist(\"/obj/dopnet1\", \"obj? object*\", 1)</code></div><p>Returns a string such as \"obj1 obj2 object1 objectfoo\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopnumobjects\">dopnumobjects</a></div></body>",
    "dopobjectsareaffectors": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopobjectsareaffectors\">dopobjectsareaffectors</a></h1><p class=\"summary\">Tests whether a set of objects has an affector relationship with\nanother object.</p><div class=\"usage\"> <code>dopobjectsareaffectors(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">affectors</code>)</code></div><p>Returns 1 if all the objects specified by\nthe affectors argument are affectors of the single object specified with\nthe objectSpec argument.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopobjectsareaffectors(\"/obj/dopnet1\", \"obj1\", \"obj2 obj3\")</code></div><p>Returns one if obj2 and obj3 are affectors of obj1.</p></body>",
    "dopobjscreatedby": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopobjscreatedby\">dopobjscreatedby</a></h1><p class=\"summary\">Returns the list of objects created by a particular DOP node.</p><div class=\"usage\"> <code>dopobjscreatedby(<code class=\"var\">dop</code>)</code></div><p>Returns a string containing a space-separated list of object identifies.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopobjscreatedby(\"/obj/dopnet1/rbdglueobject1\")</code></div><p>Returns a list of identifiers for all objects created by the\n    rbdglueobject1 DOP node.</p></body>",
    "dopoption": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopoption\">dopoption</a></h1><p class=\"summary\">Returns the value of a DOP field as a float.</p><div class=\"usage\"> `dopoption(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">fieldName</code>)`</p><p>If a field is multivalued, you can access individual parameters by\nadding a suffix.</p><p>For example, \"positiony\" will access the y component of the \"position\"\nfield. If the field is a quaternion, one can use \"rx\", \"ry\", and \"rz\" as\nextensions to get the euler rotations for the quaternion.</p><p>This function is exactly the same as the <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopfield\">dopfield</a> function except the\nfourth and fifth arguments are always \"Options\" and \"0\" respectively.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopoption(\"/obj/dopnet1\", \"obj0\", \"Position\", \"ty\")</code></div><p>Returns the y position of object obj0</p><div class=\"codeblock\"><code class=\"codeline\">dopoption(\"/obj/dopnet1\", \"obj0\", \"Position\", \"ry\")</code></div><p>Returns the ry component of the orientation of object obj0. This\n    will be in degrees.</p></body>",
    "dopoptions": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopoptions\">dopoptions</a></h1><p class=\"summary\">Returns the value of a DOP field as a string.</p><div class=\"usage\"> `dopoptions(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">fieldName</code>)`</p><p>This allows complex types such as vectors to be converted to the\nnative type using the <a href=\"https://www.sidefx.com/docs/houdini/expressions/vector\">vector</a> expression.</p><p>This function is exactly the same as the dopfields function except the\nfourth and fifth arguments are always \"Options\" and \"0\" respectively.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vector(dopoptions(\"/obj/dopnet1\", \"obj0\", \"Position\", \"position\"))</code></div><p>Gets the position of the object as a string and converts it into a\n    vector.</p></body>",
    "doprecordtypename": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/doprecordtypename\">doprecordtypename</a></h1><p class=\"summary\">Returns the name of a record in DOPs data given its index.</p><div class=\"usage\"> `doprecordtypename(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">recordTypeNum</code>)`</p><p>Returns the name of the <code class=\"var\">recordTypeNum</code>th record that is owned by the\ngiven subData.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">doprecordtypename(\"/obj/dopnet1\", \"obj0\", \"Geometry/Volume\", 0)</code></div><p>Returns the name of the first record type of the Volume data which\n    is attached to the Geometry data of obj0.</p></body>",
    "dopsolvedopnet": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvedopnet\">dopsolvedopnet</a></h1><p class=\"summary\">Script solver support function.</p><div class=\"usage\"> <code>dopsolvedopnet()</code></div><p>This function returns the full path of the DOP Network that contains\nthe script solver that is currently running.</p><p>This is one of a set of expression functions for use by the <a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">Script\nSolver DOP</a>. Calling this function will return an\nempty string if it is called when a script solver is not currently\nsolving for objects.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolveobject\">dopsolveobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvetimestep\">dopsolvetimestep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveadddata\">dopsolveadddata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveremovedata\">dopsolveremovedata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolvesetoption\">dopsolvesetoption</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">dop/scriptsolver</a></div></body>",
    "dopsolvenewobject": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></h1><p class=\"summary\">Script solver support function.</p><div class=\"usage\"> <code>dopsolvenewobject(<code class=\"var\">object_index</code>)</code></div><p>This function is similar to dopsolveobject, except it returns the newly created\nobjects that need to be initialized from a script solver.  The object index\nmust be greater than or equal to zero, and less than the return value of\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">set lastobject=`dopsolvenumnewobjects() - 1`</code><code class=\"codeline\">    for i = 0 to $lastobject</code><code class=\"codeline\">        echo `dopsolvenewobject($i)`</code><code class=\"codeline\">    end</code></div><p>Outputs the unique object ids of all the objects being initialized by the\n    current script solver.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvedopnet\">dopsolvedopnet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvetimestep\">dopsolvetimestep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveadddata\">dopsolveadddata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveremovedata\">dopsolveremovedata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolvesetoption\">dopsolvesetoption</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">dop/scriptsolver</a></div></body>",
    "dopsolvenumnewobjects": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></h1><p class=\"summary\">Script solver support function.</p><div class=\"usage\"> <code>dopsolvenumnewobjects()</code></div><p>Returns the number of objects being initialized by the script\nsolver that is currently running.</p><p>This is one of a set of expression functions for use by the <a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">Script\nSolver DOP</a>.  See <a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolveobject\">dopsolveobject</a> and\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a> for more information.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolveobject\">dopsolveobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvedopnet\">dopsolvedopnet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvetimestep\">dopsolvetimestep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveadddata\">dopsolveadddata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveremovedata\">dopsolveremovedata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolvesetoption\">dopsolvesetoption</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">dop/scriptsolver</a></div></body>",
    "dopsolvenumobjects": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a></h1><p class=\"summary\">Script solver support function.</p><div class=\"usage\"> <code>dopsolvenumobjects()</code></div><p>Returns the number of objects being solved by the script\nsolver that is currently running. Returns zero if it is called\nwhen a script solver is not currently solving for objects.</p><p>This is one of a set of expression functions for use by the <a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">Script\nSolver DOP</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolveobject\">dopsolveobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvedopnet\">dopsolvedopnet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvetimestep\">dopsolvetimestep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveadddata\">dopsolveadddata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveremovedata\">dopsolveremovedata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolvesetoption\">dopsolvesetoption</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">dop/scriptsolver</a></div></body>",
    "dopsolveobject": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolveobject\">dopsolveobject</a></h1><p class=\"summary\">Script solver support function.</p><div class=\"usage\"> <code>dopsolveobject(<code class=\"var\">object_index</code>)</code></div><p>This function returns the unique object identifier for the specified\nobject. The object is specified as a number greater than or equal to\nzero, and less than the return value of\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a>. This function is required\nto get an object id to use in other DOP expression function for getting\ndata about the objects being solved by the script solver.</p><p>This is one of a set of expression functions for use by the <a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">Script\nSolver DOP</a>. Calling this function will return -1\nif it is called when a script solver is not currently solving for\nobjects.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">set lastobject=`dopsolvenumobjects() - 1`</code><code class=\"codeline\">    for i = 0 to $lastobject</code><code class=\"codeline\">        echo `dopsolveobject($i)`</code><code class=\"codeline\">    end</code></div><p>Outputs the unique object ids of all the objects being solved by the\n    current script solver.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvedopnet\">dopsolvedopnet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvetimestep\">dopsolvetimestep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveadddata\">dopsolveadddata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveremovedata\">dopsolveremovedata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolvesetoption\">dopsolvesetoption</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">dop/scriptsolver</a></div></body>",
    "dopsolvetimestep": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvetimestep\">dopsolvetimestep</a></h1><p class=\"summary\">Script solver support function.</p><div class=\"usage\"> <code>dopsolvetimestep()</code></div><p>Returns the timestep size for the script solver that is\ncurrently running.</p><p>This is one of a set of expression functions for use by the <a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">Script\nSolver DOP</a>. Calling this function will return\nzero if it is called when a script solver is not currently solving for\nobjects.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumobjects\">dopsolvenumobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolveobject\">dopsolveobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenumnewobjects\">dopsolvenumnewobjects</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvenewobject\">dopsolvenewobject</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsolvedopnet\">dopsolvedopnet</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveadddata\">dopsolveadddata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolveremovedata\">dopsolveremovedata</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/dopsolvesetoption\">dopsolvesetoption</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/nodes/dop/scriptsolver\">dop/scriptsolver</a></div></body>",
    "dopsttoframe": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsttoframe\">dopsttoframe</a></h1><p class=\"summary\">returns the simulation frame of a given simulation time.</p><div class=\"usage\"> <code>dopsttoframe(<code class=\"var\">dop</code>, <code class=\"var\">simulationtime</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframe\">dopframe</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframetost\">dopframetost</a></div></body>",
    "dopsttot": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsttot\">dopsttot</a></h1><p class=\"summary\">Returns the global time of a given simulation time.</p><div class=\"usage\"> <code>dopsttot(<code class=\"var\">dop</code>, <code class=\"var\">simulationtime</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/doptime\">doptime</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopttost\">dopttost</a></div></body>",
    "dopsubdataname": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsubdataname\">dopsubdataname</a></h1><p class=\"summary\">Returns the name of a subdata of a given DOP object.</p><div class=\"usage\"> `dopsubdataname(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>,</div><p><code class=\"var\">subDataNum</code>)`</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopsubdataname(\"/obj/dopnet1\", \"foobar\", \"\", 0)</code></div><p>Returns the name of the first data attached to the object foobar.</p><div class=\"codeblock\"><code class=\"codeline\">dopsubdataname(\"/obj/dopnet1\", \"foobar\", \"Geometry\", 3)</code></div><p>Returns the name of the 4th subdata attached to the object foobar\u2019s\n    data \"Geometry\".</p></body>",
    "doptime": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/doptime\">doptime</a></h1><p class=\"summary\">Returns the current time of a simulation.</p><div class=\"usage\"> <code>doptime(<code class=\"var\">dop</code>)</code></div><p>This will often be equal to the global time $T,\nunless the Time Scale or Offset Time\nparameters of the DOP Network have been changed from their default\nvalues.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopframe\">dopframe</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsttot\">dopsttot</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopttost\">dopttost</a></div></body>",
    "doptransform": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/doptransform\">doptransform</a></h1><p class=\"summary\">Returns a transformation matrix associated with a piece of data.</p><div class=\"usage\"> <code>doptransform(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">subDataName</code>)</code></div><p>The data must be either Position data or Geometry data.\nFor Geometry data, if the data name is \"Geometry\", then the transform\nfor any Position data attached to the object is also applied. Thus this\nfunction can be used to transform a point position from the space of the\nraw geometry to simulation space.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">doptransform(\"/obj/dopnet1\", \"obj0\", \"Geometry\")</code></div><p>Returns a matrix which is the product of the transform in the\n    Geometry data multiplied by the transform of any Position data on\n    the object.</p></body>",
    "dopttost": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopttost\">dopttost</a></h1><p class=\"summary\">Returns the simulation time equivalent to a given global time.</p><div class=\"usage\"> <code>dopttost(<code class=\"var\">dop</code>, <code class=\"var\">globaltime</code>)</code></div><p>This is similar to the <a href=\"https://www.sidefx.com/docs/houdini/expressions/doptime\">doptime</a> expression except\nfor the ability to specify a global time other than the current time.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopsttot\">dopsttot</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/doptime\">doptime</a></div></body>",
    "dopvelatpos": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dopvelatpos\">dopvelatpos</a></h1><p class=\"summary\">Returns the velocity that a point at a location in simulation space\nwould have if it were attached to a DOP object.</p><div class=\"usage\"> `dopvelatpos(<code class=\"var\">dop</code>, <code class=\"var\">objectSpec</code>, <code class=\"var\">posx</code>, <code class=\"var\">posy</code>, <code class=\"var\">posz</code>,</div><p><code class=\"var\">usevolumevelocity</code>, <code class=\"var\">usepointvelocity</code>)`</p><p>This velocity calculation takes into account the velocity and angular\nvelocity of the simulation object as stored in its Position data.</p><p>Setting the usevolumevelocity argument to a non-zero value causes the\nreturned velocity to be affected by a geometry space velocity calculated\nfrom changes in the volumetric representation of the geometry.</p><p>Setting the usepointvelocity argument to a non-zero value causes the\nreturned velocity to be affected by the velocity attribute on the\ngeometry for the object. The geometry velocity attribute is added to the\nresult as a geometry space velocity which is added to the velocity from\nthe Position data. If both usedsdfvelocity and usepointvelocity are\nnon-zero, then the sdf velocity is used, not the point velocity.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">dopvelatpos(\"/obj/dopnet1\", \"obj0\", point(\"/obj/dopnet1:obj0/Geometry\", 0, \"P\", 0), point(\"/obj/dopnet1:obj0/Geometry\", 0, \"P\", 1), point(\"/obj/dopnet1:obj0/Geometry\", 0, \"P\", 2), 1, 0)</code></div><p>Returns the simulation space velocity of point 0 of the geometry\n    attached to obj0, taking into account any velocity attribute on the\n    geometry.</p></body>",
    "dot": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/dot\">dot</a></h1><p class=\"summary\">Computes the dot product of two vectors.</p><div class=\"usage\"> <code>dot(<code class=\"var\">v0</code>, <code class=\"var\">v1</code>)</code></div></body>",
    "ease": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ease\">ease</a></h1><p class=\"summary\">Channel segment function: ease-in and -out.</p><div class=\"usage\"> <code>ease()</code></div><p>Starts at rest and slowly increases the amount\nof change, and then, near the end of the function, gradually reduces the\nrate of change until it is at rest.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easep\">easep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easein\">easein</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeout\">easeout</a></div></body>",
    "easein": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/easein\">easein</a></h1><p class=\"summary\">Channel segment function: ease-in.</p><div class=\"usage\"> <code>easein()</code></div><p>Will slowly ease in to any\nchange.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeinp\">easeinp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ease\">ease</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeout\">easeout</a></div></body>",
    "easeinp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeinp\">easeinp</a></h1><p class=\"summary\">Channel segment function: ease-in with configurable acceleration.</p><div class=\"usage\"> <code>easeinp(<code class=\"var\">number</code>)</code></div><p>Slowly increases the motion of the model to its maximum value.\nThis is similar to the motion\nof an object accelerating due to gravity. The <code class=\"var\">number</code> controls how\nfast to ease into the motion: a large value defines a high speed at the\nend of the segment.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">easeinp( 10 )</code></div><p>Eases in with a fairly big final velocity.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easein\">easein</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easep\">easep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeoutp\">easeoutp</a></div></body>",
    "easeout": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeout\">easeout</a></h1><p class=\"summary\">Channel segment function: ease-out</p><div class=\"usage\"> <code>easeout()</code></div><p>Slowly eases out of any change and comes to rest.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeoutp\">easeoutp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ease\">ease</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easein\">easein</a></div></body>",
    "easeoutp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeoutp\">easeoutp</a></h1><p class=\"summary\">Channel segment function: ease-out with configurable acceleration.</p><div class=\"usage\"> <code>easeoutp(<code class=\"var\">number</code>)</code></div><p>Similar to the <a href=\"https://www.sidefx.com/docs/houdini/expressions/easeinp\">easeinp</a>\nexpression only reversed. The change starts rapidly and begins to slow\nuntil it comes to rest. The <code class=\"var\">number</code> determines the speed (i.e., the\nrate of channel change) at the beginning of the segment. A large value\ndefines a high speed.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">easeoutp( 3 )</code></div><p>Eases out of a fairly high initial speed.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeout\">easeout</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easep\">easep</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeinp\">easeinp</a></div></body>",
    "easep": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/easep\">easep</a></h1><p class=\"summary\">Channel segment function: ease-in and -out with configurable acceleration.</p><div class=\"usage\"> <code>easep(<code class=\"var\">number</code>)</code></div><p>This is a channel expression function which will gradually ease in to\nthe motion and gradually ease out. The <code class=\"var\">number</code> controls how fast to\nease in or out. Mathematically, this argument determines the inflection\npoint of the curve. Increasing the number will shift the inflection\npoint to the right, while fractional numbers will towards zero will\nshift the inflection point to the right.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">easep( 3 )</code></div><p>Eases in slowly and eases out quickly.</p><div class=\"codeblock\"><code class=\"codeline\">easep( 0.4 )</code></div><p>Eases in quickly and eases out slowly.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ease\">ease</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeinp\">easeinp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/easeoutp\">easeoutp</a></div></body>",
    "edgegrouplist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegrouplist\">edgegrouplist</a></h1><p class=\"summary\">Returns the list of edge groups in a surface node.</p><div class=\"usage\"> <code>edgegrouplist(<code class=\"var\">surface_node</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To get a list of groups whose names match a pattern, use\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegroupmask\">edgegroupmask</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgrouplist\">vertexgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegroupmask\">edgegroupmask</a></div></body>",
    "edgegroupmask": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegroupmask\">edgegroupmask</a></h1><p class=\"summary\">Returns the list of edge groups matching a pattern in a surface node.</p><div class=\"usage\"> <code>edgegroupmask(<code class=\"var\">surface_node</code>, <code class=\"var\">pattern</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To simply get a list of all edge groups (no pattern),\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegrouplist\">edgegrouplist</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">edgegroupmask(\"/obj/model\", \"group*\")</code></div><p>Returns the names of all edge groups in the specified surface node which\n    start with \"group\". So this may be something like \"group1 group2\n    group_smoke\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgroupmask\">primgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgroupmask\">pointgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgroupmask\">vertexgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegrouplist\">edgegrouplist</a></div></body>",
    "encode": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/encode\">encode</a></h1><p class=\"summary\">Encodes any string into a valid variable name.</p><div class=\"usage\"> <code>encode(<code class=\"var\">s</code>)</code></div><p>Houdini VEX variable names are only allowed to contain letters, numbers, and\nunderscores, and must not begin with a number. This method takes any string,\nand encodes it into a string that obeys these restrictions. The original\nstring can be recovered using the <code>decode</code> method.  A string that already\nobeys the rules is returned unmodified.</p><p>One exception to this rule is that a string starting with <code>xn__</code> will be\nencoded even if it is already a valid variable name. This is because <code>xn__</code>\nis the prefix used to identify an encoded string. In this case, an additional\n<code>xn__</code> prefix will be added. This means a string can be encoded any number of\ntimes, then decoded the same number of times to always return to the original\nstring, regardless of its contents.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/decode\">decode</a></div></body>",
    "encodeattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/encodeattrib\">encodeattrib</a></h1><p class=\"summary\">Encodes any string into a valid geometry attribute name.</p><div class=\"usage\"> <code>encodeattrib(<code class=\"var\">s</code>)</code></div><p>Houdini geometry attributes and group names are only allowed to contain\nletters, numbers, and underscores, and must not begin with a number. This\nmethod takes any string, and encodes it into a string that obeys these\nrestrictions. The original string can be recovered using the <code>decodeattrib</code>\nmethod. A string that already obeys the rules is returned unmodified.</p><p>One exception to this rule is that a string starting with <code>xn__</code> will be\nencoded even if it is already a valid attribute name. This is because <code>xn__</code>\nis the prefix used to identify an encoded string. In this case, an additional\n<code>xn__</code> prefix will be added. This means a string can be encoded any number of\ntimes, then decoded the same number of times to always return to the original\nstring, regardless of its contents.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/decodeattrib\">decodeattrib</a></div></body>",
    "encodeparm": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/encodeparm\">encodeparm</a></h1><p class=\"summary\">Encodes any string into a valid node parameter name.</p><div class=\"usage\"> <code>encodeparm(<code class=\"var\">s</code>)</code></div><p>Houdini parameter names are only allowed to contain letters, numbers, hash\ncharacters (for multiparms), and underscores, and must not begin with a\nnumber. This method takes any string, and encodes it into a string that obeys\nthese restrictions. The original string can be recovered using the\n<code>decodeparm</code> method.  A string that already obeys the rules is returned\nunmodified.</p><p>One exception to this rule is that a string starting with <code>xn__</code> will be\nencoded even if it is already a valid parameter name. This is because <code>xn__</code>\nis the prefix used to identify an encoded string. In this case, an additional\n<code>xn__</code> prefix will be added. This means a string can be encoded any number of\ntimes, then decoded the same number of times to always return to the original\nstring, regardless of its contents.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/decodeparm\">decodeparm</a></div></body>",
    "eval": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/eval\">eval</a></h1><p class=\"summary\">Evaulates a string as an expression returning a float.</p><div class=\"usage\"> <code>eval(<code class=\"var\">expression</code>)</code></div><p>Useful for evaluating variables which contain more complex\nexpressions. Returns a floating point value.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">set foo = 1+2 echo `eval($foo)`</code></div></body>",
    "evals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/evals\">evals</a></h1><p class=\"summary\">Evaulates a string as an expression returning a string.</p><div class=\"usage\"> <code>evals(<code class=\"var\">expression</code>)</code></div><p>Useful for evaluating variables which contain more complex\nexpressions. This function returns a string value.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">set foo = system(\"ls\") echo `evals($foo)`</code></div></body>",
    "execute": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/execute\">execute</a></h1><p class=\"summary\">Runs a string as an HScript command and returns the command\u2019s output.</p><div class=\"usage\"> <code>execute(<code class=\"var\">command</code>)</code></div><p>Returns a string containing the regular output of the command,\nbut not the error output.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/executee\">executee</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/executeb\">executeb</a></div></body>",
    "executeb": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/executeb\">executeb</a></h1><p class=\"summary\">Runs a string as an HScript command and returns the\ncommand and error output.</p><div class=\"usage\"> <code>executeb(<code class=\"var\">command</code>)</code></div><p>Returns a string containing\nboth the regular and error output of the command, separated by <code>~~~~</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/execute\">execute</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/executee\">executee</a></div></body>",
    "executee": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/executee\">executee</a></h1><p class=\"summary\">Runs a string as an HScript command and returns any error output.</p><div class=\"usage\"> <code>executee(<code class=\"var\">command</code>)</code></div><p>Returns a string containing\nthe error output of the command, but not the regular output.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/execute\">execute</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/executeb\">executeb</a></div></body>",
    "exp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/exp\">exp</a></h1><p class=\"summary\">Returns the logarithmic exponentiation of the argument.</p><div class=\"usage\"> <code>exp(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">exp (x)= $E^x</code></div><div class=\"codeblock\"><code class=\"codeline\">exp (2)= 7.3338906</code></div></body>",
    "explodematrix": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrix\">explodematrix</a></h1><p class=\"summary\">Explodes a 3\u00d73 or 4\u00d74 matrix into the euler rotations required to\nrebuild it.</p><div class=\"usage\"> <code>explodematrix(<code class=\"var\">mat</code>, <code class=\"var\">trs</code>, <code class=\"var\">xyz</code>, <code class=\"var\">component</code>)</code></div><p>The returned components can be stuffed directly into Houdini\nrotation, scale, and translate channels.</p><p>If you know the pivot point for the transformation, you may want to use the\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrixp\">explodematrixp</a> or <a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrixpr\">explodematrixpr</a> functions instead.</p><p><code class=\"var\">mat</code> is the matrix to transform. <code class=\"var\">trs</code> and <code class=\"var\">xyz</code> give the order of the\nexpansion. In trs, a \"t\" represents translation, \"r\" rotation, and \"s\"\nscale. The xyz refers to the order of the rotations. The component is a\nstring describing which channel to extract. It is <code>[trs][xyz]</code>\n(e.g. <code>\"tx\"</code> or <code>\"ry\"</code>), where the <code>t</code>, <code>r</code>, or <code>s</code> chooses the channel\n(translate, rotate, or scale), and the <code>x</code>, <code>y</code>, or <code>z</code> chooses the axis.\nShears can be extracted by specifying a component of \"sh1\", \"sh2\", or \"sh3\".</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">explodematrix(mlookat(vector(\"[1,0,0]\"),vector(\"[0,1,0]\")), \"RST\", \"XYZ\", \"RZ\")</code></div><div class=\"codeblock\"><code class=\"codeline\">explodematrix(identity(3)*2, \"RST\", \"XYZ\", \"SZ\")</code></div></body>",
    "explodematrixp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrixp\">explodematrixp</a></h1><p class=\"summary\">Explodes a 3\u00d73 or 4\u00d74 matrix into the euler rotations required to\nrebuild it.</p><div class=\"usage\"> <code>explodematrixp(<code class=\"var\">mat</code>, <code class=\"var\">p</code>, <code class=\"var\">trs</code>, <code class=\"var\">xyz</code>, <code class=\"var\">component</code>)</code></div><p>The returned components can be stuffed directly into Houdini\nrotation, scale, and translate channels.</p><p>This expression is exactly like\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrix\">explodematrix</a>, except it requires you to specify a pivot position\nvector. This is useful if you know the pivot position of the matrix\nbeing processed.  Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrixpr\">explodematrixpr</a> if you know the pivot rotation\nof the matrix being processed.</p><p><code class=\"var\">mat</code> is the matrix to transform. <code class=\"var\">trs</code> and <code class=\"var\">xyz</code> give the order of the\nexpansion. In trs, a \"t\" represents translation, \"r\" rotation, and \"s\"\nscale. The xyz refers to the order of the rotations. The component is a\nstring describing which channel to extract. It is <code>[trs][xyz]</code>\n(e.g. <code>\"tx\"</code> or <code>\"ry\"</code>), where the <code>t</code>, <code>r</code>, or <code>s</code> chooses the channel\n(translate, rotate, or scale), and the <code>x</code>, <code>y</code>, or <code>z</code> chooses the axis.\nShears can be extracted by specifying a component of \"sh1\", \"sh2\", or \"sh3\".</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">explodematrixp(optransform(\"/obj/geo1\"), vector3(ch(\"/obj/geo1/px\"), ch(\"/obj/geo1/py\"), ch(\"/obj/geo1/pz\")), \"RST\", \"XYZ\", \"RZ\")</code></div></body>",
    "explodematrixpr": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrixpr\">explodematrixpr</a></h1><p class=\"summary\">Explodes a 3\u00d73 or 4\u00d74 matrix into the euler rotations required to\nrebuild it.</p><div class=\"usage\"> <code>explodematrixp(<code class=\"var\">mat</code>, <code class=\"var\">p</code>, <code class=\"var\">trs</code>, <code class=\"var\">xyz</code>, <code class=\"var\">component</code>)</code></div><p>The returned components can be stuffed directly into Houdini\nrotation, scale, and translate channels.</p><p>This expression is exactly like\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/explodematrixp\">explodematrixp</a>, except it allows you to specify a pivot rotation. This\nis useful if you know the pivot rotation in addition to the pivot position of\nthe matrix being processed.</p><p><code class=\"var\">mat</code> is the matrix to transform. <code class=\"var\">trs</code> and <code class=\"var\">xyz</code> give the order of the\nexpansion. In <code>trs</code>, a \"t\" represents translation, \"r\" rotation, and \"s\"\nscale. The <code>xyz</code> refers to the order of the rotations. The component is a\nstring describing which channel to extract. It is <code>[trs][xyz]</code>\n(e.g. <code>\"tx\"</code> or <code>\"ry\"</code>), where the <code>t</code>, <code>r</code>, or <code>s</code> chooses the channel\n(translate, rotate, or scale), and the <code>x</code>, <code>y</code>, or <code>z</code> chooses the axis.\nShears can be extracted by specifying a component of \"sh1\", \"sh2\", or \"sh3\".</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">explodematrixpr(optransform(\"/obj/geo1\"), vector3(ch(\"/obj/geo1/px\"), ch(\"/obj/geo1/py\"), ch(\"/obj/geo1/pz\")), vector3(ch(\"/obj/geo1/prx\"), ch(\"/obj/geo1\"/pry), ch(\"/obj/geo1/prz\")), \"RST\", \"XYZ\", \"RZ\")</code></div></body>",
    "findfile": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/findfile\">findfile</a></h1><p class=\"summary\">Searches the Houdini path for a file.</p><div class=\"usage\"> <code>findfile(<code class=\"var\">filename</code>)</code></div><p>The filename specified should be relative to one of the paths specified in the <code>HOUDINI_PATH</code> environment variable.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">findfile(\"scripts/123.cmd\")</code></div><div class=\"codeblock\"><code class=\"codeline\">findfile(\"config/Audio/Error.aiff\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/findfiles\">findfiles</a></div></body>",
    "findfiles": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/findfiles\">findfiles</a></h1><p class=\"summary\">Searches the Houdini path for a file or directory.</p><div class=\"usage\"> <code>findfiles(<code class=\"var\">filename</code>, <code class=\"var\">separator</code>)</code></div><p>Searches the houdini path for the specified file or\ndirectory, returning a list of all the matches separated by the\nspecified separator. It is handy to use a separator of <code>\\\\n</code> when echoing\nthe results. The filename specified should be relative to one of the paths specified in the <code>HOUDINI_PATH</code> environment variable.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">findfiles(\"config\", \" \")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/findfile\">findfile</a></div></body>",
    "fit": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit\">fit</a></h1><p class=\"summary\">Fits a value from one range to another.</p><div class=\"usage\"> <code>fit(<code class=\"var\">num</code>, <code class=\"var\">oldmin</code>, <code class=\"var\">oldmax</code>, <code class=\"var\">newmin</code>, <code class=\"var\">newmax</code>)</code></div><p>Return a number between newmin and newmax that is relative to num in\nthe range between oldmin and oldmax. If the value is outside the old\nrange, it will be clamped to the new range.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">fit(3,1,4,5,20)=15</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit01\">fit01</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit11\">fit11</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit10\">fit10</a></div></body>",
    "fit01": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit01\">fit01</a></h1><p class=\"summary\">Fits a value to the 0-1 range.</p><div class=\"usage\"> <code>fit01(<code class=\"var\">num</code>, <code class=\"var\">newmin</code>, <code class=\"var\">newmax</code>)</code></div><p>Returns a number between newmin and newmax that is relative to num in\nthe range between 0 and 1. If the value is outside the 0 to 1 it will be\nclamped to the new range.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">fit01(.3,5,20)=9.5</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit\">fit</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit11\">fit11</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit10\">fit10</a></div></body>",
    "fit10": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit10\">fit10</a></h1><p class=\"summary\">Fits a number in the 0-1 range.</p><div class=\"usage\"> <code>fit10(<code class=\"var\">num</code>, <code class=\"var\">newmin</code>, <code class=\"var\">newmax</code>)</code></div><p>Return a number between newmin and newmax that is relative to num in\nthe range between 1 and 0. If the value is outside the 1 and 0 it will\nbe clamped to the new range.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">fit(.3,5,20)=15.5</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit\">fit</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit01\">fit01</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit11\">fit11</a></div></body>",
    "fit11": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit11\">fit11</a></h1><p class=\"summary\">Fits a number to the -1 to 1 range.</p><div class=\"usage\"> <code>fit11(<code class=\"var\">num</code>, <code class=\"var\">newmin</code>, <code class=\"var\">newmax</code>)</code></div><p>Return a number between newmin and newmax that is relative to num in\nthe range between -1 and 1. If the value is outside the -1 to 1 it will\nbe clamped to the new range.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">fit(.3,5,20)=14.75</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit\">fit</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit01\">fit01</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/fit10\">fit10</a></div></body>",
    "floor": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/floor\">floor</a></h1><p class=\"summary\">Returns the largest integer not greater than a number.</p><div class=\"usage\"> <code>floor(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">floor(10.2)=10</code></div><div class=\"codeblock\"><code class=\"codeline\">floor(-10.2)=-11</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ceil\">ceil</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/trunc\">trunc</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/int\">int</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/frac\">frac</a></div></body>",
    "frac": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/frac\">frac</a></h1><p class=\"summary\">Returns the fractional part of a floating-point number.</p><div class=\"usage\"> <code>frac(<code class=\"var\">number</code>)</code></div><p>The fractional\ncomponent is computed using the expression <code>(number - floor(number))</code>,\nwhich may result in unexpected values for negative numbers. If negative\nnumbers are an issue, you may want to call <code>frac(abs(number))</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">frac(2.501) = 0.501</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/trunc\">trunc</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/floor\">floor</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ceil\">ceil</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/int\">int</a></div></body>",
    "ftoa": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ftoa\">ftoa</a></h1><p class=\"summary\">Converts a number to a string.</p><div class=\"usage\"> <code>ftoa(<code class=\"var\">number</code>)</code></div><p>Type conversion is usually done automatically.\nHowever, you may wish to use this to force the conversion.</p></body>",
    "ftrim": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ftrim\">ftrim</a></h1><p class=\"summary\">Converts a number to a string.</p><div class=\"usage\"> <code>ftrim(<code class=\"var\">number</code>)</code></div><p>Type conversion is usually done automatically. However, you may wish to use this to force the conversion.</p><p>The <code>ftrim()</code> function will also round the number to 6 decimal digits of precision, avoiding slightly off numbers caused by floating point not being able to exactly represent common decimal numbers.</p></body>",
    "groupbyval": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/groupbyval\">groupbyval</a></h1><p class=\"summary\">Returns a string describing the set of elements with a given value for an integer attribute.</p><div class=\"usage\"> <code>groupbyval(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>, <code class=\"var\">id</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>,<code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">groupbyval(\"/obj/geo1/facet1\", D_PRIMITIVE, \"piece\", 1)</code></div><p>Returns a string describing the set of primitives with a value of 1\n    for the <code>piece</code> attribute in the facet1 surface node in geo1.</p></body>",
    "groupbyvals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/groupbyvals\">groupbyvals</a></h1><p class=\"summary\">Returns a string describing the set of elements with a given value for a string attribute.</p><div class=\"usage\"> <code>groupbyvals(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>, <code class=\"var\">id</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>, <code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">groupbyvals(\"/obj/geo1/facet1\", D_PRIMITIVE, \"name\", \"piece1\")</code></div><p>Returns a string describing the set of primitives with a value of <code>piece1</code>\n    for the <code>name</code> attribute in the facet1 surface node in geo1.</p></body>",
    "hascontextoption": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hascontextoption\">hascontextoption</a></h1><p class=\"summary\">Returns a non-zero value if the specified context option exists.</p><div class=\"usage\"> <code>hascontextoption(<code class=\"var\">token</code>)</code></div><p>Checks if the provided context option exists in the current cook context. This\nvalue may have been set by a node requesting data from another node, or it may\nbe set as a global default context option stored in the hip file.</p><p>This function just tests if the context option exists. To get the value of the\ncontext option use <a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoption\">contextoption</a> or <a href=\"https://www.sidefx.com/docs/houdini/expressions/contextoptions\">contextoptions</a>.</p><div class=\"related\"><code class=\"var\">token</code>: the name of the option to check.</div></body>",
    "hasdetailattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasdetailattrib\">hasdetailattrib</a></h1><p class=\"summary\">Returns 1 if a specified detail attribute exists.</p><div class=\"usage\"> <code>hasdetailattrib(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>This can also be used to determine if a key exists in a detail-level\ndictionary attribute.  <code>\"param.key\"</code> will return 1 if <code>key</code> is in\nthe <code>param</code> dictionary attribute.</p></body>",
    "haspdgattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspdgattrib\">haspdgattrib</a></h1><p class=\"summary\">Returns 1 if the active PDG work item has the specified attribute.</p><div class=\"usage\"> <code>haspdgattrib(<code class=\"var\">attribute</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribs\">pdgattribs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribsize\">pdgattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribtype\">pdgattribtype</a></div></body>",
    "haspoint": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></h1><p class=\"summary\">Returns 1 if a specified point is in a specified group.</p><div class=\"usage\"> <code>haspoint(<code class=\"var\">group_name</code>, <code class=\"var\">surface_node</code>, <code class=\"var\">point_num</code>)</code></div><p>The function will return 0 if the group is a primitive group.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">haspoint(\"ears\", \"/obj/geo1/facet1\", 4)</code></div><p>Returns 1 if the group \"ears\" contains point number 4, otherwise\n    returns 0.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></div></body>",
    "haspointattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspointattrib\">haspointattrib</a></h1><p class=\"summary\">Returns 1 if a specified point attribute exists.</p><div class=\"usage\"> <code>haspointattrib(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div></body>",
    "hasprim": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></h1><p class=\"summary\">Returns 1 if a specified primitive is in a specified group.</p><div class=\"usage\"> <code>hasprim(<code class=\"var\">group_name</code>, <code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>)</code></div><p>The function will return 0 if the group is a point group.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">hasprim(\"ears\", \"/obj/geo1/facet1\", 3)</code></div><p>Returns 1 if the group \"ears\" contains primitive number 3, otherwise\n    returns 0.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></div></body>",
    "hasprimattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprimattrib\">hasprimattrib</a></h1><p class=\"summary\">Returns 1 if a specified primitive attribute exists.</p><div class=\"usage\"> <code>hasprimattrib(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div></body>",
    "hasvertexattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasvertexattrib\">hasvertexattrib</a></h1><p class=\"summary\">Returns 1 if a specified vertex attribute exists.</p><div class=\"usage\"> <code>hasvertexattrib(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div></body>",
    "hextoint": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hextoint\">hextoint</a></h1><p class=\"summary\">Converts a hexadecimal argument string into an integer.</p><div class=\"usage\"> <code>hextoint(<code class=\"var\">value</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">hextoint(\"A1\")</code></div><p>Returns 161.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/inttohex\">inttohex</a></div></body>",
    "hsv": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/hsv\">hsv</a></h1><p class=\"summary\">Converts RGB values to HSV components.</p><div class=\"usage\"> <code>hsv(<code class=\"var\">red</code>, <code class=\"var\">green</code>, <code class=\"var\">blue</code>, <code class=\"var\">component</code>)</code></div><p>The <code class=\"var\">component</code> should be one of <code>\"h\"</code>, <code>\"s\"</code> or <code>\"v\"</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">hsv(.3, .6, .4, \"h\")</code></div></body>",
    "ic": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></h1><p class=\"summary\">Evaluates a CHOP\u2019s input channel at a specific index.</p><div class=\"usage\"> <code>ic(<code class=\"var\">input_index</code>, <code class=\"var\">channel_index</code>, <code class=\"var\">index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">ic(0, 2, 10)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "ice": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></h1><p class=\"summary\">Returns the end index of a CHOP\u2019s input.</p><div class=\"usage\"> <code>ice(<code class=\"var\">input_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">ice(0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "icl": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></h1><p class=\"summary\">Returns the length of a CHOP\u2019s input, in samples.</p><div class=\"usage\"> <code>icl(<code class=\"var\">input_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">icl(0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "icmax": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></h1><p class=\"summary\">Evaluates a CHOP\u2019s input channel\u2019s maximum value.</p><div class=\"usage\"> <code>icmax(<code class=\"var\">input_index</code>, <code class=\"var\">channel_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">icmax(0, 2)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "icmin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></h1><p class=\"summary\">Evaluates a CHOP\u2019s input channel\u2019s minimum value.</p><div class=\"usage\"> <code>icmin(<code class=\"var\">input_index</code>, <code class=\"var\">channel_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">icmin(0, 2)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "icn": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></h1><p class=\"summary\">Returns the number of channels in a CHOP\u2019s input.</p><div class=\"usage\"> <code>icn(<code class=\"var\">input_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">icn(0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "icr": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></h1><p class=\"summary\">Returns the sample rate of a CHOP\u2019s input.</p><div class=\"usage\"> <code>icr(<code class=\"var\">input_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">icr(0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "ics": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></h1><p class=\"summary\">Returns the start index of a CHOP\u2019s input.</p><div class=\"usage\"> <code>ics(<code class=\"var\">input_index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">ics(0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "identity": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/identity\">identity</a></h1><p class=\"summary\">Creates an identity matrix.</p><div class=\"usage\"> <code>identity(<code class=\"var\">size</code>)</code></div><p>The resulting identity matrix will have <code class=\"var\">size</code> rows\nand <code class=\"var\">size</code> columns.</p></body>",
    "if": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/if\">if</a></h1><p class=\"summary\">Returns the value of the second or third argument depending on the\ntruth of the first argument.</p><div class=\"usage\"> <code>if(<code class=\"var\">expression</code>, <code class=\"var\">true_value</code>, <code class=\"var\">false_value</code>)</code></div><h2>Note</h2><p>This is a function, which means all parameters to the function are\n    evaluated. So something like if($F &gt; 1, system('echo 1'),\n    system('echo 2')) will result in both system calls being run\n    regardless of the result of the expression.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">if ($F&lt;12, $F, 75)</code></div><p>When the current frame number (<code>$F</code>) is less than 12,\n    returns the current frame number, otherwise returns <code>75</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ifs\">ifs</a></div></body>",
    "ifs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ifs\">ifs</a></h1><p class=\"summary\">Returns the string value of the second or third argument depending on the\ntruth of the first argument.</p><div class=\"usage\"> <code>ifs(<code class=\"var\">expression</code>, <code class=\"var\">true_value</code>, <code class=\"var\">false_value</code>)</code></div><h2>Note</h2><p>This is a function, which means all parameters to the function are\n    evaluated. So something like ifs($F &gt; 1, system('echo one'),\n    system('echo two')) will result in both system calls being run\n    regardless of the result of the expression.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">ifs ($F&lt;12, padzero(4, $F), \"0075\")</code></div><p>When the current frame number (<code>$F</code>) is less than 12,\n    returns a string containing the current frame number padded\n    to four digits, otherwise returns <code>0075</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/if\">if</a></div></body>",
    "index": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/index\">index</a></h1><p class=\"summary\">Finds the first occurrence of a pattern in a string.</p><div class=\"usage\"> <code>index(<code class=\"var\">source</code>, <code class=\"var\">pattern</code>)</code></div><p>Returns the number of characters before <code class=\"var\">pattern</code> occurs in\n<code class=\"var\">source</code>. Returns -1 if the pattern is not found.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `index(\"Testing index\", \"sting\")`</code></div><p>Prints 2</p><div class=\"codeblock\"><code class=\"codeline\">echo `index(\"Testing index\", \"i\")`</code></div><p>Prints 4</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rindex\">rindex</a></div></body>",
    "index_": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/index\">index</a></h1><p class=\"summary\">Finds the first occurrence of a pattern in a string.</p><div class=\"usage\"> <code>index(<code class=\"var\">source</code>, <code class=\"var\">pattern</code>)</code></div><p>Returns the number of characters before <code class=\"var\">pattern</code> occurs in\n<code class=\"var\">source</code>. Returns -1 if the pattern is not found.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `index(\"Testing index\", \"sting\")`</code></div><p>Prints 2</p><div class=\"codeblock\"><code class=\"codeline\">echo `index(\"Testing index\", \"i\")`</code></div><p>Prints 4</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rindex\">rindex</a></div></body>",
    "instancepoint": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/instancepoint\">instancepoint</a></h1><p class=\"summary\">Returns the point number currently being instanced onto.</p><div class=\"usage\"> <code>instancepoint()</code></div><p>This function takes no arguments. You can use this function in\nparameter expressions on objects being instanced\n(see <a href=\"https://www.sidefx.com/docs/houdini/copy/instancing\">point instancing</a>). It returns the point\nnumber the object is being instanced onto. You can use this to\nvary <em>object-level</em> parameters (such as transforms or material\noverrides) between instances.</p><p>You can <strong>not</strong> use this function at the surface level, because\ninstancing only works at the object level.</p></body>",
    "int": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/int\">int</a></h1><p class=\"summary\">Converts a number to an integer by truncating any fractional part.</p><div class=\"usage\"> <code>int(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">int(2.501)=2</code></div><div class=\"codeblock\"><code class=\"codeline\">int(-2.501)=-2</code></div><div class=\"codeblock\"><code class=\"codeline\">int(0.2)=0</code></div><div class=\"codeblock\"><code class=\"codeline\">int(-.2)=0</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/trunc\">trunc</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/floor\">floor</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ceil\">ceil</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></div></body>",
    "inttohex": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/inttohex\">inttohex</a></h1><p class=\"summary\">Converts a number into a hexadecimal string.</p><div class=\"usage\"> <code>inttohex(<code class=\"var\">value</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">inttohex(123)</code></div><p>Returns \"0000007B\"</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hextoint\">hextoint</a></div></body>",
    "invert": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/invert\">invert</a></h1><p class=\"summary\">Inverts a matrix.</p><div class=\"usage\"> <code>invert(<code class=\"var\">mat</code>)</code></div><p>This is only valid if the matrix is a 4\u00d74 or\n3\u00d73 matrix. If the matrix is larger than 4\u00d74, the matrix will be\nconverted to a 4\u00d74 matrix before it is inverted. If the matrix is\nsmaller than 3\u00d73, the matrix will be enlarged to a 3\u00d73 matrix before it\nis inverted. The results of enlarging the matrix to a 3\u00d73 are not\nguaranteed.</p></body>",
    "iprquery": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/iprquery\">iprquery</a></h1><p class=\"summary\">Queries numeric (floating point) data from an interactive render pane.</p><div class=\"usage\"> <code>iprquery(<code class=\"var\">query</code>, <code class=\"var\">pane</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>)</code></div><p>Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/iprquerys\">iprquerys</a> to query textual (string) information.</p><p>The <code class=\"var\">query</code> string argument specifies what type of information to\nretrieve (see below). The <code class=\"var\">pane</code> argument specifies the name of the\npane you want to retrieve information for.</p><p>The <code class=\"var\">x</code> and <code class=\"var\">y</code> arguments are used by some query types to specify\nadditional query parameters. For queries that do not require extra\nparameters, they are ignored.</p><p>The <code class=\"var\">query</code> string can be one of the following values:</p><div class=\"argument\"><code><code>cropx0</code>, <code>cropx1</code>, <code>cropy0</code>, <code>cropy1</code></code></div><p>Returns the left, right, top, or bottom values of the currently\n    selected crop region.</p><div class=\"argument\"><code><code>exist.<code class=\"var\">plane_name</code></code></code></div><p>Returns the index of the given plane if it exists in the rendered\n    image, or -1 if it does not.</p><div class=\"argument\"><code><code>ipr</code></code></div><p>Returns 1 if the IPR button is on, or 0 if it is off.</p><div class=\"argument\"><code><code>lock</code></code></div><p>Returns 1 if the lock button is on (prevents automatic\n    re-rendering), or 0 if it is off.</p><div class=\"argument\"><code><code>nplanes</code></code></div><p>Returns the number of deep raster planes in the current image.</p><div class=\"argument\"><code><code>object.ptinstance</code></code></div><p>Point number of the instance object (see \"Object queries\" below)\n    that contributed the pixel at <code class=\"var\">x</code>,<code class=\"var\">y</code>. The <code class=\"var\">x</code> and <code class=\"var\">y</code>\n    variables are coordinates in the rendered image.</p><div class=\"argument\"><code><code>object.primitive</code></code></div><p>Primitive number of the geometry object (see \"Object queries\" below)\n    that contributed the pixel at <code class=\"var\">x</code>,<code class=\"var\">y</code>. The <code class=\"var\">x</code> and <code class=\"var\">y</code>\n    variables are coordinates in the rendered image.</p><div class=\"argument\"><code><code>pindex.<code class=\"var\">name</code></code></code></div><p>Returns the index of the deep raster plane named <code class=\"var\">name</code>. If there\n    is no plane by that name, returns -1.</p><div class=\"argument\"><code><code>plane.vsize</code></code></div><p>Returns the vector size of the plane at the index specified by the\n    <code class=\"var\">x</code> argument to this function. For example, to get the vector size\n    of the third deep raster plane:</p><div class=\"codeblock\"><code class=\"codeline\">iprquery(\"plane.vsize\", $PANE, 2, 0)</code></div><p>(The <code class=\"var\">y</code> argument, here set to 0, is ignored.)</p><div class=\"argument\"><code><code>plane.<code class=\"var\">name</code>[.r|g|b|a]</code></code></div><p>Returns the value of the pixel component at <code class=\"var\">x</code>,<code class=\"var\">y</code> of the plane\n    named <code class=\"var\">name</code>. For example:</p><div class=\"codeblock\"><code class=\"codeline\">iprquery(\"plane.C.g\", $PANE, $IX, $IY)</code></div><p>If you don\u2019t specify a component name (<code>.r</code>, <code>.g</code>, <code>.b</code>, or <code>.a</code>),\n    returns the value of the first component.</p><p>You can also use <code>.x</code>, <code>.y</code>, <code>.z</code>, and <code>.w</code> as alternate names for\n    <code>.r</code>, <code>.g</code>, <code>.b</code>, and <code>.a</code>. For example, <code>plane.N.y</code> is equivalent\n    to <code>plane.N.g</code>.</p><div class=\"argument\"><code><code>xres</code>, <code>yres</code></code></div><p>horizontal or vertical resolution of the image in the interactive\n    render viewer.</p><h2>Object queries</h2><p>The queries beginning with <code>object.</code> give you information about the\nHoudini objects that produced the IPR image. These queries use two\ndeep raster planes mantra creates automatically when rendering.\nThese floating-point planes are named <code>Op-Id</code> and <code>Prim-Id</code>. Houdini\nmaintains a table mapping the data <code>Op-Id</code> plane to information\nabout the instance and geometry in the render. <em>The numbers in the\nOp-Id plane are meaningless otherwise</em>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/iprquerys\">iprquerys</a></div></body>",
    "iprquerys": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/iprquerys\">iprquerys</a></h1><p class=\"summary\">Queries textual (string) data from an interactive render pane.</p><div class=\"usage\"> <code>iprquerys(<code class=\"var\">query</code>, <code class=\"var\">pane</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>)</code></div><p>Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/iprquery\">iprquery</a> to query numeric (floating point) information.</p><p>The <code class=\"var\">query</code> string argument specifies what type of information to\nretrieve (see below). The <code class=\"var\">pane</code> argument specifies the name of the\npane you want to retrieve information for.</p><p>The <code class=\"var\">x</code> and <code class=\"var\">y</code> arguments are used by some query types to specify\nadditional query parameters. For queries that do not require extra\nparameters, they are ignored.</p><p>The <code class=\"var\">query</code> string can be one of the following values:</p><div class=\"argument\"><code>object.instance</code></div><p>Full path of the instanced object that contributed the pixel at\n    <code class=\"var\">x</code>, <code class=\"var\">y</code>. If the object was not instanced, this will be the same\n    as <code>object.geometry</code>. See \"Object queries\" below. The <code class=\"var\">x</code> and\n    <code class=\"var\">y</code> arguments are coordinates in the rendered image.</p><div class=\"argument\"><code>object.geometry</code></div><p>Full path of the geometry object that contributed the pixel at\n    <code class=\"var\">x</code>, <code class=\"var\">y</code>. See \"Object queries\" below. The <code class=\"var\">x</code> and <code class=\"var\">y</code>\n    arguments are coordinates in the rendered image.</p><div class=\"argument\"><code>object.surface</code></div><p>Full path of the surface shader that contributed the pixel at <code class=\"var\">x</code>,\n    <code class=\"var\">y</code>. See \"Object queries\" below. The <code class=\"var\">x</code> and <code class=\"var\">y</code> arguments are\n    coordinates in the rendered image.</p><div class=\"argument\"><code>object.displace</code></div><p>Full path of the displacement shader that affected the pixel at\n    <code class=\"var\">x</code>, <code class=\"var\">y</code>. See \"Object queries\" below. The <code class=\"var\">x</code> and <code class=\"var\">y</code>\n    arguments are coordinates in the rendered image.</p><div class=\"argument\"><code>plane.name</code></div><p>Returns the name of the plane at the index specified by the <code class=\"var\">x</code>\n    argument to this function. For example, to get the name of the third\n    deep raster plane:</p><div class=\"codeblock\"><code class=\"codeline\">iprquerys(\"plane.name\", $PANE, 2, 0)</code></div><p>(The <code class=\"var\">y</code> argument, here set to 0, is ignored.)</p><div class=\"argument\"><code>rop</code></div><p>Returns the full path of the output driver node displayed in the\n    interactive render pane.</p><h2>Object queries</h2><p>The queries beginning with <code>object.</code> give you information about the\nHoudini objects that produced the IPR image. These queries use two\ndeep raster planes mantra creates automatically when rendering.\nThese floating-point planes are named <code>Op_Id</code> and <code>Prim_Id</code>. Houdini\nmaintains a table mapping the data <code>Op_Id</code> plane to information\nabout the instance and geometry in the render. The numbers in the\n<code>Op_Id</code> plane are meaningless otherwise.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/iprquery\">iprquery</a></div></body>",
    "isclosed": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/isclosed\">isclosed</a></h1><p class=\"summary\">Returns 1 if a primitive is closed.</p><div class=\"usage\"> <code>isclosed(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>)</code></div><p>This is the same as <a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapu\">iswrapu</a>, and\nworks on polygonal, NURBS, and Bezier curves and surfaces.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapu\">iswrapu</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapv\">iswrapv</a></div></body>",
    "iscollided": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/iscollided\">iscollided</a></h1><p class=\"summary\">Returns 1 if a specified point has collided with something.</p><div class=\"usage\"> <code>iscollided(<code class=\"var\">surface_node</code>, <code class=\"var\">pointnumber</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">iscollided(\"../particle1\", $PT)</code></div></body>",
    "ishvariable": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ishvariable\">ishvariable</a></h1><p class=\"summary\">Returns 1 if a specified Houdini environment variable exists.</p><div class=\"usage\"> <code>ishvariable(<code class=\"var\">variable_name</code>)</code></div><p>Checks only houdini variables to see if <code>variable_name</code> exists.\nSystem variables are not checked.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/isvariable\">isvariable</a></div></body>",
    "isspline": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/isspline\">isspline</a></h1><p class=\"summary\">Returns 1 if a specified primitive is a NURBs or Bezier curve or surface.</p><div class=\"usage\"> <code>isspline(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>)</code></div></body>",
    "isstuck": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/isstuck\">isstuck</a></h1><p class=\"summary\">Returns 1 if a specified point is a stuck particle.</p><div class=\"usage\"> <code>isstuck(<code class=\"var\">surface_node</code>, <code class=\"var\">pointnumber</code>)</code></div><p>Warning: this function can be slow.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">isstuck(\"../particle1\", $PT)</code></div></body>",
    "isvariable": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/isvariable\">isvariable</a></h1><p class=\"summary\">Returns 1 if a specified Houdini or system environment variable exists.</p><div class=\"usage\"> <code>isvariable(<code class=\"var\">variable_name</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ishvariable\">ishvariable</a></div></body>",
    "iswrapu": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapu\">iswrapu</a></h1><p class=\"summary\">Returns 1 if a specified primitive is wrapped in U.</p><div class=\"usage\"> <code>iswrapu(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>)</code></div><p>Returns 1 if the primitive is wrapped in the u direction. For curves,\nthis is the same as <a href=\"https://www.sidefx.com/docs/houdini/expressions/isclosed\">isclosed</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/isclosed\">isclosed</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapv\">iswrapv</a></div></body>",
    "iswrapv": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapv\">iswrapv</a></h1><p class=\"summary\">Returns 1 if a specified primitive is wrapped in V.</p><div class=\"usage\"> <code>iswrapv(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>)</code></div><p>Curves, circles, etc, are always considered to be unwrapped in V\nsince they are only exist in U.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/isclosed\">isclosed</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/iswrapu\">iswrapu</a></div></body>",
    "length": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/length\">length</a></h1><p class=\"summary\">Returns the length of a vector.</p><div class=\"usage\"> <code>length(<code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>)</code></div><p>A.K.A <code>sqrt(x*x + y*y + z*z)</code>.</p></body>",
    "linear": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/linear\">linear</a></h1><p class=\"summary\">Channel segment function: linear interpolation.</p><div class=\"usage\"> <code>linear()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/constant\">constant</a></div></body>",
    "listbyval": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/listbyval\">listbyval</a></h1><p class=\"summary\">Returns a list of elements with a given value for an integer attribute.</p><div class=\"usage\"> <code>listbyval(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>, <code class=\"var\">id</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>,<code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">listbyval(\"/obj/geo1/facet1\", D_PRIMITIVE, \"piece\", 1)</code></div><p>Returns a list of primitives with a value of 1 for the <code>piece</code> attribute\n    in the facet1 surface node in geo1.</p></body>",
    "listbyvals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/listbyvals\">listbyvals</a></h1><p class=\"summary\">Returns a list of elements with a given value for a string attribute.</p><div class=\"usage\"> <code>listbyvals(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>, <code class=\"var\">id</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>, <code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">listbyvals(\"/obj/geo1/facet1\", D_PRIMITIVE, \"name\", \"piece1\")</code></div><p>Returns a list of primitives with a value of <code>piece1</code> for the <code>name</code>\n    attribute in the facet1 surface node in geo1.</p></body>",
    "lock": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/lock\">lock</a></h1><p class=\"summary\">Returns a value that cannot be changed.</p><div class=\"usage\"> <code>lock(<code class=\"var\">float</code>)</code></div><p>This function simply returns the value of its argument. However, it is\nspecial in that if an expression is enclosed in a lock function, then\nits values cannot be changed, until the lock expression is removed.</p></body>",
    "log": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/log\">log</a></h1><p class=\"summary\">Returns the natural logarithm of the argument.</p><div class=\"usage\"> <code>log(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">log (2.718281828)= 1</code></div></body>",
    "log10": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/log10\">log10</a></h1><p class=\"summary\">Returns the base 10 logarithm of the argument.</p><div class=\"usage\"> <code>log10(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">log10(10) = 1</code></div><div class=\"codeblock\"><code class=\"codeline\">log10(100) = 2</code></div></body>",
    "lopinputprim": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/lopinputprim\">lopinputprim</a></h1><p class=\"summary\">Returns the path of the USD primitive last modified by an input to a LOP node.</p><div class=\"usage\"> <code>lopinputprim(<code class=\"var\">lop_path</code>, <code class=\"var\">input_index</code>)</code></div><div class=\"argument\"><code>This function is a shortcut, equivalent to the following expression</code></div><div class=\"codeblock\"><code class=\"codeline\">loplastmodifiedprim(opinput(&lt;&lt;lop_path&gt;&gt;, &lt;&lt;input_index&gt;&gt;))</code></div><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprim\">loplastmodifiedprim</a> for more information about the last modified\nprimitive value.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprim\">loplastmodifiedprim</a></div></body>",
    "lopinputprims": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/lopinputprims\">lopinputprims</a></h1><p class=\"summary\">Returns the paths of the USD primitives last modified by an input to a LOP node.</p><div class=\"usage\"> <code>lopinputprims(<code class=\"var\">lop_path</code>, <code class=\"var\">input_index</code>)</code></div><div class=\"argument\"><code>This function is a shortcut, equivalent to the following expression</code></div><div class=\"codeblock\"><code class=\"codeline\">loplastmodifiedprims(opinput(&lt;&lt;lop_path&gt;&gt;, &lt;&lt;input_index&gt;&gt;))</code></div><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprims\">loplastmodifiedprims</a> for more information about the last modified\nprimitives value.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastinputprim\">loplastinputprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprims\">loplastmodifiedprims</a></div></body>",
    "loplastmodifiedprim": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprim\">loplastmodifiedprim</a></h1><p class=\"summary\">Returns the path of the USD primitive last modified by a LOP node.</p><div class=\"usage\"> <code>loplastmodifiedprim(<code class=\"var\">lop_path</code>)</code></div><p>LOP nodes may set the path to the USD primitive most recently modified by\nthe node. For example a LOP node that creates a USD primitive would set\nthis value to the newly created USD primitive. A LOP node which edits a\nUSD primitive may set it to the path of the modified primitive. This\nexpression function returns this stored USD primitive path for the node\nspecified by the <code class=\"var\">lop_path</code> parameter.</p><p>Using this expression function it is easy to create and edit scene graph\nhierarchies without using complex channel referencing expressions.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/lopinputprim\">lopinputprim</a></div></body>",
    "loplastmodifiedprims": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprims\">loplastmodifiedprims</a></h1><p class=\"summary\">Returns the paths of the USD primitives last modified by a LOP node.</p><div class=\"usage\"> <code>loplastmodifiedprims(<code class=\"var\">lop_path</code>)</code></div><p>LOP nodes may set the paths to the USD primitives most recently modified by\nthe node. For example a LOP node that creates a USD primitive would set\nthis value to the newly created USD primitive. A LOP node which edits several\nUSD primitives may set it to the paths of all the modified primitives. This\nexpression function returns these stored USD primitive paths for the node\nspecified by the <code class=\"var\">lop_path</code> parameter.</p><p>If more than one primitive was modified by the LOP node, the paths are\nreturned in a single string separated by spaces.</p><p>Using this expression function it is easy to create and edit scene graph\nhierarchies without using complex channel referencing expressions.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/lopinputprims\">lopinputprims</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprim\">loplastmodifiedprim</a></div></body>",
    "lopparentprims": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/lopparentprims\">lopparentprims</a></h1><p class=\"summary\">Returns the paths of the parents of the supplied list of USD primitives.</p><div class=\"usage\"> <code>lopparentprims(<code class=\"var\">lop_paths</code>)</code></div><p>This function takes a space separated list of primitive paths as an argument,\nand returns a space separated list of the paths to the parents of the\nprimitives. Requesting the parent of the root primitive return an empty string.\nAny input paths that are not absolute paths are ignored.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loprelativeprims\">loprelativeprims</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprims\">loplastmodifiedprims</a></div></body>",
    "loprelativeprims": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/loprelativeprims\">loprelativeprims</a></h1><p class=\"summary\">Returns the paths at a particular location relative to the supplied list of USD primitives.</p><div class=\"usage\"> <code>loprelativeprims(<code class=\"var\">lop_paths</code>, <code class=\"var\">relative_path</code>)</code></div><p>This function takes a space separated list of primitive paths as an argument,\nand returns a space separated list of the paths generated by appending the\nrelative path argument to each input path. Any input paths that are not\nabsolute paths are ignored.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/lopparentprims\">lopparentprims</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/loplastmodifiedprims\">loplastmodifiedprims</a></div></body>",
    "match": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/match\">match</a></h1><p class=\"summary\">Channel segment function: matches the incoming and outgoing slopes.</p><div class=\"usage\"> <code>match()</code></div><p>The curve will move smoothly from the in coming value to\nthe out going value.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatch\">vmatch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchin\">matchin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchout\">matchout</a></div></body>",
    "matchin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchin\">matchin</a></h1><p class=\"summary\">Channel segment function: matches the incoming slope.</p><div class=\"usage\"> <code>matchin()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchin\">vmatchin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/match\">match</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchout\">matchout</a></div></body>",
    "matchout": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchout\">matchout</a></h1><p class=\"summary\">Channel segment function: matches the outgoing slope.</p><div class=\"usage\"> <code>matchout()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchout\">vmatchout</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/match\">match</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchin\">matchin</a></div></body>",
    "matrix": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/matrix\">matrix</a></h1><p class=\"summary\">Converts a string specification into a matrix.</p><div class=\"usage\"> <code>matrix(<code class=\"var\">pattern</code>)</code></div><p>The string should start with a square bracket,\nfollowed by a series of rows (specified as vector\npatterns - see the <a href=\"https://www.sidefx.com/docs/houdini/expressions/vector\">vector</a> function), followed by a trailing square\nbracket.</p><p>To access a row out of the matrix, use the square bracket operator.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">matrix m = matrix(\"[[1,2,3][2,3,5][-3,2,-3]]\");</code><code class=\"codeline\">    vector v = m[0];    # v is [1,2,3]</code><code class=\"codeline\">    float  f = m[0][2]; # f is 3</code></div></body>",
    "matrixtoquat": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/matrixtoquat\">matrixtoquat</a></h1><p class=\"summary\">Converts a rotation matrix to a quaternion.</p><div class=\"usage\"> <code>matrixtoquat(<code class=\"var\">m</code>)</code></div><p>Computes a quaternion which represents the rotation specified by the\nmatrix.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/quattomatrix\">quattomatrix</a></div></body>",
    "max": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/max\">max</a></h1><p class=\"summary\">Returns the larger of two values.</p><div class=\"usage\"> <code>max(<code class=\"var\">value1</code>, <code class=\"var\">value2</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">max (5,3) = 5</code></div></body>",
    "mcols": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mcols\">mcols</a></h1><p class=\"summary\">Returns the number of columns in a matrix.</p><div class=\"usage\"> <code>mcols(<code class=\"var\">mat</code>)</code></div></body>",
    "metaweight": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/metaweight\">metaweight</a></h1><p class=\"summary\">Returns the weight of a metaball at a specific location.</p><div class=\"usage\"> <code>metaweight(<code class=\"var\">surface_node</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">metaweight(\"/obj/geo1/metaball\", $TX, $TX, $TZ)</code></div></body>",
    "min": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/min\">min</a></h1><p class=\"summary\">Returns the smaller of two values.</p><div class=\"usage\"> <code>min(<code class=\"var\">value1</code>, <code class=\"var\">value2</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">min (5,3) = 3</code></div></body>",
    "mindist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mindist\">mindist</a></h1><p class=\"summary\">Finds the smallest distance between a point and a primitive.</p><div class=\"usage\"> `mindist(<code class=\"var\">surface_node</code>, <code class=\"var\">point_num</code>, <code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>,</div><p><code class=\"var\">return_type</code>)`</p><p>This expression is an alias for <a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primdist\">primdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/distance\">distance</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/uvdist\">uvdist</a></div></body>",
    "mlookat": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mlookat\">mlookat</a></h1><p class=\"summary\">Computes the transformation matrix of a lookat from one vector to another.</p><div class=\"usage\"> <code>mlookat(<code class=\"var\">v1</code>, <code class=\"var\">v2</code>)</code></div><p>Computes a transform matrix specifying a lookat from vector <code class=\"var\">v1</code> to\nthe vector <code class=\"var\">v2</code>.</p><p>The vectors are converted to 3 vectors for\nthis computation. The resulting matrix will be a 3\u00d73 matrix.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">explodematrix(mlookat(vtorigin(\"\",\"/obj/from\"),vtorigin(\"\",\"/obj/to\")),\"SRT\",\"XYZ\",\"RX\")</code></div><p>Computes the lookat matrix and returns the rotation value for RX.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/mlookatup\">mlookatup</a></div></body>",
    "mlookatup": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mlookatup\">mlookatup</a></h1><p class=\"summary\">Computes the transformation matrix of a lookat from one vector to another, with an up vector.</p><div class=\"usage\"> <code>mlookatup(<code class=\"var\">v1</code>, <code class=\"var\">v2</code>, <code class=\"var\">upv</code>)</code></div><p>Computes a transform matrix specifying a lookat from vector <code class=\"var\">v1</code> to\nthe vector <code class=\"var\">v2</code>, taking up vector <code class=\"var\">upv</code> into consideration.</p><p>The vectors are converted to 3 vectors for\nthis computation. The resulting matrix will be a 3\u00d73 matrix.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">explodematrix(mlookatup(vtorigin(\"\",\"/obj/from\"),vtorigin(\"\",\"/obj/to\"),vtorigin(\"\",\"/obj/up\")),\"SRT\",\"XYZ\",\"RX\")</code></div><p>Computes the lookat matrix and returns the rotation value for RX.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/mlookat\">mlookat</a></div></body>",
    "mobjlookat": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mobjlookat\">mobjlookat</a></h1><p class=\"summary\">Computes the transformation matrix\nof a lookat from one object to another.</p><div class=\"usage\"> <code>mobjlookat(<code class=\"var\">base_node</code>, <code class=\"var\">target_node</code>, <code class=\"var\">upv</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">mobjlookat(\"/obj/null1\", \"/obj/null2\", vector3(0,1,0))</code></div><p>Returns the transformation matrix to get null1 to look at null2</p></body>",
    "modblend": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/modblend\">modblend</a></h1><p class=\"summary\">Blends the two modular values.</p><div class=\"usage\"> <code>modblend(<code class=\"var\">val1</code>, <code class=\"var\">val2</code>, <code class=\"var\">length</code>, <code class=\"var\">weight</code>)</code></div><p>This function can be used to correctly\nblend two angles or other cyclic values.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">modblend(355, 5, 360, 0.5)</code></div><p>Returns 0. Simple linearly blending of the two values would result\n    in an incorrect value of 180.</p></body>",
    "morient": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/morient\">morient</a></h1><p class=\"summary\">Computes the transformation matrix to orient along specific Z and Y axes.</p><div class=\"usage\"> <code>morient(<code class=\"var\">zaxis</code>, <code class=\"var\">yaxis</code>)</code></div><p>Computes the transform matrix to rotate the x,y,z axes such that the\nspecified zaxis is the new zaxis and yaxis the new yaxis. The resulting\nmatrix is a 3\u00d73 matrix.</p></body>",
    "mousepane": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mousepane\">mousepane</a></h1><p class=\"summary\">Returns the full name of the pane currently under the mouse pointer.</p><div class=\"usage\"> <code>mousepane()</code></div><p>If this function is executed when the mouse pointer is not over any pane\n(such as when it is outside the Houdini window) an empty string is\nreturned. An empty string is also returned when this function is\nexecuted within non-graphical Houdini applications such as hscript.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/mousepath\">mousepath</a></div></body>",
    "mousepath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mousepath\">mousepath</a></h1><p class=\"summary\">Returns the node path of the pane currently under the mouse pointer.</p><div class=\"usage\"> <code>mousepath()</code></div><p>If this function is executed when the mouse\npointer is not over any pane (such as when it is outside the Houdini\nwindow) an empty string is returned. An empty string is also returned\nwhen this function is executed within non-graphical Houdini applications\nsuch as hscript.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/mousepane\">mousepane</a></div></body>",
    "mrows": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mrows\">mrows</a></h1><p class=\"summary\">Returns the number of rows in a matrix.</p><div class=\"usage\"> <code>mrows(<code class=\"var\">mat</code>)</code></div></body>",
    "mzero": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/mzero\">mzero</a></h1><p class=\"summary\">Returns a matrix with all values set to 0.</p><div class=\"usage\"> <code>mzero(<code class=\"var\">mat</code>)</code></div></body>",
    "nearpoint": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/nearpoint\">nearpoint</a></h1><p class=\"summary\">Finds the point in a geometry nearest to specific 3D coordinates.</p><div class=\"usage\"> <code>nearpoint(<code class=\"var\">surface_node</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>)</code></div><p>Finds the nearest point in the surface node\u2019s geometry to the given point \n(<code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>).\nThe return value is the point number of the nearest point.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">nearpoint(\"/obj/geo1/grid1\", 1, 2, 3)</code></div><p>Returns the point in the grid closest to (1, 2, 3).</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/xyzdist\">xyzdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primdist\">primdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></div></body>",
    "noise": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/noise\">noise</a></h1><p class=\"summary\">Generates 3D noise.</p><div class=\"usage\"> <code>noise(<code class=\"var\">X</code>, <code class=\"var\">Y</code>, <code class=\"var\">Z</code>)</code></div><p>The noise is calculated on a unit-spaced lattice and then internal\npoints are interpolated from lattice points.  This means the\nnoise will be independent between points one unit distance apart.  You\ncan scale the inputs to achieve different frequencies.</p><p>This function can be used to apply noise to geometry. For example to\nmake a bumpy grid you could append a point surface node and use the following\nin the pos Z field:</p><p><code>noise($TX, $TY, $TZ)</code></p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/snoise\">snoise</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/turb\">turb</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/sturb\">sturb</a></div></body>",
    "normal": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></h1><p class=\"summary\">Returns the components of the surface normal specific UV coordinates.</p><div class=\"usage\"> <code>normal(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">u</code>, <code class=\"var\">v</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">u</code> and <code class=\"var\">v</code> are unit values, defined in the <code>[0,1]</code> interval.\nIf the primitive is a mesh, u and v are defined in terms its number\nof rows and columns.</p><p><code class=\"var\">index</code> specifies which component to return, where <code>0</code> means X, <code>1</code> means Y,\nand <code>2</code> means Z.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primuv\">primuv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primduv\">primduv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></div></body>",
    "normalize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/normalize\">normalize</a></h1><p class=\"summary\">Normalizes a vector.</p><div class=\"usage\"> <code>normalize(<code class=\"var\">v</code>)</code></div></body>",
    "npoints": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/npoints\">npoints</a></h1><p class=\"summary\">Returns the number of points in a geometry.</p><div class=\"usage\"> <code>npoints(<code class=\"var\">surface_node</code>)</code></div><p>Returns -1 if the surface node cannot be cooked.</p></body>",
    "npointsgroup": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/npointsgroup\">npointsgroup</a></h1><p class=\"summary\">Returns the number of points in the specified group.</p><div class=\"usage\"> <code>npointsgroup(<code class=\"var\">surface_node</code>, <code class=\"var\">group_name</code>)</code></div><p>Returns -1 if the surface node cannot be cooked\nor 0 if the group does not exist.</p></body>",
    "nprims": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/nprims\">nprims</a></h1><p class=\"summary\">Returns the number of primitives in a surface node.</p><div class=\"usage\"> <code>nprims(<code class=\"var\">name</code>)</code></div><p>Returns -1 if the surface node cannot be cooked.</p></body>",
    "nprimsgroup": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/nprimsgroup\">nprimsgroup</a></h1><p class=\"summary\">Returns the number of primitives in the specified group.</p><div class=\"usage\"> <code>nprimsgroup(<code class=\"var\">surface_node</code>, <code class=\"var\">group_name</code>)</code></div><p>Returns -1 if the surface node cannot be cooked\nor 0 if the group does not exist.</p></body>",
    "nuniquevals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/nuniquevals\">nuniquevals</a></h1><p class=\"summary\">Returns the number of unique values for an integer or string attribute in a surface node.</p><div class=\"usage\"> <code>nuniquevals(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>, <code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">nuniquevals(\"/obj/geo1/facet1\", D_PRIMITIVE, \"name\")</code></div><p>Returns the number of unique values for the primitive attribute <code>name</code> in\n    the facet1 surface node in geo1.</p></body>",
    "objkinoverride": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/objkinoverride\">objkinoverride</a></h1><p class=\"summary\">Returns the current global kinematic override setting for bone objects.</p><div class=\"usage\"> <code>objkinoverride()</code></div><p>This is equivalent to running the <a href=\"https://www.sidefx.com/docs/houdini/commands/objkinoverride\">objkinoverride</a>\ncommand without any arguments.</p><p>Return values are: <code>none</code> (no overrides, <code>rest</code> (bones cook using the rest\ntransform), or <code>capture</code> (bones cook using the capture pose transform).</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">objkinoverride()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/objkinoverride\">objkinoverride</a></div></body>",
    "objlightmask": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/objlightmask\">objlightmask</a></h1><p class=\"summary\">Returns a list of lights matching an object\u2019s light mask.</p><div class=\"usage\"> <code>objlightmask(<code class=\"var\">geometry</code>, <code class=\"var\">options</code>)</code></div><p>This is a slightly more general form of the <a href=\"https://www.sidefx.com/docs/houdini/expressions/oplightmask\">oplightmask</a> function.</p><p>Returns a string containing a space separated list of path names.</p><p>The options allow some control over how the light names are generated.\nCurrently, options include:</p><div class=\"argument\"><code><code>f</code></code></div><p>Generate full path names for the lights. If this option is excluded,\n    the path names will be generated relative to /obj</p><div class=\"argument\"><code><code>a</code></code></div><p>Ignore ambient lights.</p><div class=\"argument\"><code><code>A</code></code></div><p>Only include ambient lights.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">objlightmask(\"/obj/geo1\", \"fa\")</code></div><p>Returns all the lights in /obj/geo1's light-mask. Any ambient lights\n    will be excluded from the expanded string, and the paths generated\n    will be the full path name of the light. The string might look\n    something like \"/obj/light1 /obj/light2 /obj/subnet1/light1\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oplightmask\">oplightmask</a></div></body>",
    "objlookat": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/objlookat\">objlookat</a></h1><p class=\"summary\">Computes the rotation vector\nof a lookat from one object to another.</p><div class=\"usage\"> <code>objlookat(<code class=\"var\">base_node</code>, <code class=\"var\">target_node</code>, <code class=\"var\">upv</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">objlookat(\"/obj/null1\",\"/obj/null2\",vector3(0,1,0))[0]</code></div><p>Returns the rotation parameter for Rx to get null1 to look at null2</p></body>",
    "objpretransform": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/objpretransform\">objpretransform</a></h1><p class=\"summary\">Returns an object\u2019s pre-transform matrix.</p><div class=\"usage\"> <code>objpretransform(<code class=\"var\">object_name</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">objpretransform(\"/obj/bone1\")</code></div><p>Returns the pretransform matrix for /obj/bone1.</p></body>",
    "oc": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></h1><p class=\"summary\">Returns the value of a CHOP\u2019s output at a specific sample index.</p><div class=\"usage\"> <code>oc(<code class=\"var\">output_channel_index</code>, <code class=\"var\">index</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">oc(0, 10)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ics\">ics</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ic\">ic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ice\">ice</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icr\">icr</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icn\">icn</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmin\">icmin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icmax\">icmax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/icl\">icl</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oc\">oc</a></div></body>",
    "ocldeviceinfo": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/ocldeviceinfo\">ocldeviceinfo</a></h1><p class=\"summary\">Queries the current OpenCL device with the provided flag</p><div class=\"usage\"> <code>ocldeviceinfo(<code class=\"var\">flag</code>)</code></div><p><code class=\"var\">flag</code> is a string containing the name of the device flag.</p><p>This function queries the current OpenCL device and returns the numeric value\nof the specified flag.  Internally this function calls the OpenCL <code>clGetDeviceInfo</code>\nfunction; the available flags are described in\n<a href=\"https://www.sidefx.com/docs/houdinihttps://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_API.html#clGetDeviceInfo\">the OpenCL documentation</a>.</p><p>Some useful flags include:</p><div class=\"related\"><code>CL_DEVICE_TYPE</code> which returns 2 for a CPU device and 4 for a GPU device.</div><div class=\"related\"><code>CL_DEVICE_GLOBAL_MEM_SIZE</code> and <code>CL_DEVICE_MAX_MEM_ALLOC_SIZE</code> which return\nthe total memory and largest single allocation that can be made on a device, respectively.</div><div class=\"related\"><code>CL_DEVICE_DEVICE_ENQUEUE_SUPPORT</code> which indicates the device supports\n<a href=\"https://www.sidefx.com/docs/houdinihttps://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_C.html#enqueuing-kernels\">device-side enqueuing</a>\nof kernels.</div><p>The full list of flags supported is as follows:</p><div class=\"codeblock\"><code class=\"codeline\">CL_DEVICE_TYPE</code><code class=\"codeline\">CL_DEVICE_VENDOR_ID</code><code class=\"codeline\">CL_DEVICE_MAX_COMPUTE_UNITS</code><code class=\"codeline\">CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS</code><code class=\"codeline\">CL_DEVICE_MAX_WORK_GROUP_SIZE</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE</code><code class=\"codeline\">CL_DEVICE_MAX_CLOCK_FREQUENCY</code><code class=\"codeline\">CL_DEVICE_ADDRESS_BITS</code><code class=\"codeline\">CL_DEVICE_MAX_READ_IMAGE_ARGS</code><code class=\"codeline\">CL_DEVICE_MAX_WRITE_IMAGE_ARGS</code><code class=\"codeline\">CL_DEVICE_MAX_MEM_ALLOC_SIZE</code><code class=\"codeline\">CL_DEVICE_IMAGE2D_MAX_WIDTH</code><code class=\"codeline\">CL_DEVICE_IMAGE2D_MAX_HEIGHT</code><code class=\"codeline\">CL_DEVICE_IMAGE3D_MAX_WIDTH</code><code class=\"codeline\">CL_DEVICE_IMAGE3D_MAX_HEIGHT</code><code class=\"codeline\">CL_DEVICE_IMAGE3D_MAX_DEPTH</code><code class=\"codeline\">CL_DEVICE_IMAGE_SUPPORT</code><code class=\"codeline\">CL_DEVICE_MAX_PARAMETER_SIZE</code><code class=\"codeline\">CL_DEVICE_MAX_SAMPLERS</code><code class=\"codeline\">CL_DEVICE_MEM_BASE_ADDR_ALIGN</code><code class=\"codeline\">CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE</code><code class=\"codeline\">CL_DEVICE_SINGLE_FP_CONFIG</code><code class=\"codeline\">CL_DEVICE_GLOBAL_MEM_CACHE_TYPE</code><code class=\"codeline\">CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE</code><code class=\"codeline\">CL_DEVICE_GLOBAL_MEM_CACHE_SIZE</code><code class=\"codeline\">CL_DEVICE_GLOBAL_MEM_SIZE</code><code class=\"codeline\">CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE</code><code class=\"codeline\">CL_DEVICE_MAX_CONSTANT_ARGS</code><code class=\"codeline\">CL_DEVICE_LOCAL_MEM_TYPE</code><code class=\"codeline\">CL_DEVICE_LOCAL_MEM_SIZE</code><code class=\"codeline\">CL_DEVICE_ERROR_CORRECTION_SUPPORT</code><code class=\"codeline\">CL_DEVICE_PROFILING_TIMER_RESOLUTION</code><code class=\"codeline\">CL_DEVICE_ENDIAN_LITTLE</code><code class=\"codeline\">CL_DEVICE_AVAILABLE</code><code class=\"codeline\">CL_DEVICE_COMPILER_AVAILABLE</code><code class=\"codeline\">CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_INT</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE</code><code class=\"codeline\">CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF</code><code class=\"codeline\">CL_DEVICE_HOST_UNIFIED_MEMORY</code><code class=\"codeline\">CL_DEVICE_LINKER_AVAILABLE</code><code class=\"codeline\">CL_DEVICE_IMAGE_MAX_BUFFER_SIZE</code><code class=\"codeline\">CL_DEVICE_IMAGE_MAX_ARRAY_SIZE</code><code class=\"codeline\">CL_DEVICE_PARTITION_MAX_SUB_DEVICES</code><code class=\"codeline\">CL_DEVICE_REFERENCE_COUNT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_INTEROP_USER_SYNC</code><code class=\"codeline\">CL_DEVICE_PRINTF_BUFFER_SIZE</code><code class=\"codeline\">CL_DEVICE_IMAGE_PITCH_ALIGNMENT</code><code class=\"codeline\">CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT</code><code class=\"codeline\">CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS</code><code class=\"codeline\">CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE</code><code class=\"codeline\">CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE</code><code class=\"codeline\">CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE</code><code class=\"codeline\">CL_DEVICE_MAX_ON_DEVICE_QUEUES</code><code class=\"codeline\">CL_DEVICE_MAX_ON_DEVICE_EVENTS</code><code class=\"codeline\">CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE</code><code class=\"codeline\">CL_DEVICE_MAX_PIPE_ARGS</code><code class=\"codeline\">CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS</code><code class=\"codeline\">CL_DEVICE_PIPE_MAX_PACKET_SIZE</code><code class=\"codeline\">CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT</code><code class=\"codeline\">CL_DEVICE_NUMERIC_VERSION</code><code class=\"codeline\">CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT</code><code class=\"codeline\">CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE</code><code class=\"codeline\">CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT</code><code class=\"codeline\">CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT</code><code class=\"codeline\">CL_DEVICE_DEVICE_ENQUEUE_SUPPORT</code><code class=\"codeline\">CL_DEVICE_PIPE_SUPPORT</code></div></body>",
    "oldrand": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oldrand\">oldrand</a></h1><p class=\"summary\">Returns a pseudo-random number between 0 and 1.</p><div class=\"usage\"> <code>oldrand(<code class=\"var\">value</code>)</code></div><p>Using the same <code class=\"var\">value</code> will give the same result each time. A\ndifferent number is returned if fractional values are different.</p><h2>Note</h2><p>It is a good idea to use non-integer values as the argument to\n    oldrand(). This function is similar to rand() but uses a different\n    algorithm for generating the random numbers.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">oldrand(12.1) gives a different result than oldrand(12.2)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rand\">rand</a></div></body>",
    "opblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opblist\">opblist</a></h1><p class=\"summary\">Returns the full paths of all operators in a bundle.</p><div class=\"usage\"> <code>opblist(<code class=\"var\">bundle_name</code>)</code></div><p>Returns a string containing a space separated list of paths.</p></body>",
    "opcreator": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opcreator\">opcreator</a></h1><p class=\"summary\">Returns the creator of this node.</p><div class=\"usage\"> <code>opcreator(<code class=\"var\">name</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">opcreator(\"/obj/geo1/line1\")</code></div><p>Returns <code>/obj/geo1</code>, indicating that object <code>geo1</code> is the creator network for <code>line1</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/optypeinfo\">optypeinfo</a></div></body>",
    "opdigits": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opdigits\">opdigits</a></h1><p class=\"summary\">Returns the numeric suffix of a node name.</p><div class=\"usage\"> <code>opdigits(<code class=\"var\">name</code>)</code></div><p>This function will return the numeric value of the last set of\nconsecutive digits in a node\u2019s name.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">opdigits(\"/obj/geo1\") = 1</code></div><div class=\"codeblock\"><code class=\"codeline\">opdigits(\".\") = 1</code></div></body>",
    "opexist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opexist\">opexist</a></h1><p class=\"summary\">Returns 1 if the specified node, group, or bundle exists.</p><div class=\"usage\"> <code>opexist(<code class=\"var\">op_name</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `opexist(\"../box1\")`</code></div><div class=\"codeblock\"><code class=\"codeline\">echo `opexist(\"/obj/@mygroup\")`</code></div><div class=\"codeblock\"><code class=\"codeline\">echo `opexist(\"@mybundle\")`</code></div></body>",
    "opflag": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opflag\">opflag</a></h1><p class=\"summary\">Returns a list nodes with a particular flag set.</p><div class=\"usage\"> <code>opflag(<code class=\"var\">network</code>, <code class=\"var\">flag</code>)</code></div><p>The <code class=\"var\">flag</code> argument follows the same convention as the opset\ncommand. Examples are:</p><div class=\"argument\"><code>\"d\"</code></div><p>Display Flag</p><div class=\"argument\"><code>\"r\"</code></div><p>Render Flag</p><div class=\"argument\"><code>\"t\"</code></div><p>Template</p><div class=\"argument\"><code>\"b\"</code></div><p>Bypass</p><div class=\"argument\"><code>\"l\"</code></div><p>Lock.</p><div class=\"argument\"><code>\"e\"</code></div><p>Expose</p><div class=\"argument\"><code>\"h\"</code></div><p>Highlight</p><div class=\"argument\"><code>\"f\"</code></div><p>Footprint</p><div class=\"argument\"><code>\"s\"</code></div><p>This should be the save data in a motion file flag. However, for\n    backwards compatibility it is aliased to the pick flag. Use of \"s\"\n    should be replaced with \"p\"</p><div class=\"argument\"><code>\"u\"</code></div><p>Unload data after cook (surface nodes and CHOPs only).</p><div class=\"argument\"><code>\"c\"</code></div><p>This should be the compress icon flag. However, for backwards\n    compatibility it is aliased to the \"C\" flag. Use of \"c\" should be\n    replaced by \"C\".</p><div class=\"argument\"><code>\"C\"</code></div><p>Current</p><div class=\"argument\"><code>\"p\"</code></div><p>Picked</p><div class=\"argument\"><code>\"P\"</code></div><p>Display descriptive parm.</p><div class=\"argument\"><code>\"O\"</code></div><p>Output For View.</p><p>The following flags are only available for objects:</p><div class=\"argument\"><code>\"S\"</code></div><p>Selectable in viewport</p><div class=\"argument\"><code>\"x\"</code></div><p>Object pivot axes</p><div class=\"argument\"><code>\"y\"</code></div><p>Xray</p><p>The following flags are only available for CHOPs.</p><div class=\"argument\"><code>\"a\"</code></div><p>Audio</p><div class=\"argument\"><code>\"o\"</code></div><p>Export</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">hscript -&gt; echo `opflag(\"/obj\", \"d\")`</code></div><p>Lists all displayed objects</p><div class=\"codeblock\"><code class=\"codeline\">hscript -&gt; echo `opflag(\"/obj/geo1\", \"l\")`</code></div><p>Lists all locked surface nodes in object geo1.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselect\">opselect</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecurse\">opselectrecurse</a></div></body>",
    "opfullpath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpath\">opfullpath</a></h1><p class=\"summary\">Returns the full path of a node.</p><div class=\"usage\"> <code>opfullpath(<code class=\"var\">relpath</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpathfrom\">opfullpathfrom</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oprelativepath\">oprelativepath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opname\">opname</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opsubpath\">opsubpath</a></div></body>",
    "opfullpathfrom": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpathfrom\">opfullpathfrom</a></h1><p class=\"summary\">Returns the path of a node relative to another node.</p><div class=\"usage\"> <code>opfullpathfrom(<code class=\"var\">node</code>, <code class=\"var\">basenode</code>)</code></div><p>This function will return the full path to <code class=\"var\">node</code>,\nrelative to <code class=\"var\">basenode</code>. If <code class=\"var\">basenode</code> is a relative\npath it is relative to the current nodes.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oprelativepath\">oprelativepath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpath\">opfullpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opname\">opname</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opsubpath\">opsubpath</a></div></body>",
    "opid": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opid\">opid</a></h1><p class=\"summary\">Returns the unique ID of a node.</p><div class=\"usage\"> <code>opid(<code class=\"var\">name</code>)</code></div><p>The value of the ID is unique to that operator at any given\nmoment, however it changes each time Houdini is reloaded.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">opid(\"/obj/model\")</code></div><p>Returns a unique ID of the model object.</p></body>",
    "opinput": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></h1><p class=\"summary\">Returns the name of the node connected to a given input.</p><div class=\"usage\"> <code>opinput(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">index</code> is the 0-based number of the input. For example,\nto get the name of the node connected to the first input,\nuse <code>opinput(\".\", 0)</code>, and for the second input, use\n<code>opinput(\".\", 1)</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">point(\"../\" + opinput(\".\", 0), $PT, \"P\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinputpath\">opinputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutputpath\">opoutputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></div></body>",
    "opinputpath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinputpath\">opinputpath</a></h1><p class=\"summary\">Returns the full path of the node connected to a given input.</p><div class=\"usage\"> <code>opinputpath(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">index</code> is the 0-based number of the input. For example,\nto get the path of the node connected to the first input,\nuse <code>opinputpath(\".\", 0)</code>, and for the second input, use\n<code>opinputpath(\".\", 1)</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">point(opinputpath(\".\", 0), $PT, \"P\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutputpath\">opoutputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></div></body>",
    "opinputstring": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinputstring\">opinputstring</a></h1><p class=\"summary\">Returns the value associated with a key string on node connection.</p><div class=\"usage\"> <code>opinputstring(<code class=\"var\">name</code>, <code class=\"var\">index</code>, <code class=\"var\">key</code>)</code></div><p><code class=\"var\">index</code> is the 0-based number of the input. For example,\nto get the path of the node connected to the first input,\nuse <code>opinputstring(\".\", 0, \"refprimpath\")</code>, and for the second input, use\n<code>opinputstring(\".\", 1, \"refprimpath\")</code>. <code class=\"var\">key</code> is the key string associated\nwith the value that should be returned.</p><p>If the specified input is not connected, or there is no value for the\nprovided key on the input, this function returns an empty string.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">opinputstring(\".\", 1, \"refprimpath\")</code></div></body>",
    "opisloading": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opisloading\">opisloading</a></h1><p class=\"summary\">Returns 1 if Houdini is currently loading a scene file.</p><div class=\"usage\"> <code>opisloading()</code></div></body>",
    "opisquitting": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opisquitting\">opisquitting</a></h1><p class=\"summary\">Returns 1 if Houdini is currently shutting down.</p><div class=\"usage\"> <code>opisquitting()</code></div><p>This information is particularly useful in node deletion scripts to\ndetermine if the node is being deleted because Houdini is quitting\nrather than because the user chose to delete it.</p></body>",
    "oplightmask": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oplightmask\">oplightmask</a></h1><p class=\"summary\">Returns a list of lights matching an object\u2019s light mask.</p><div class=\"usage\"> <code>oplightmask(<code class=\"var\">geometry</code>)</code></div><p>Returns a string containing a space separated list of path names.</p><p>This function is equivalent to <code>objlightmask(geometry, \"f\")</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">oplightmask(\"/obj/geo1\")</code></div><p>Might return the string\n    <code>\"/obj/ambient1 /obj/light1 /obj/subnet1/light1\"</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/objlightmask\">objlightmask</a></div></body>",
    "oplistsort": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oplistsort\">oplistsort</a></h1><p class=\"summary\">Sorts a list of node paths based on node input/outputs order.</p><div class=\"usage\"> <code>oplistsort(\"path\")</code></div><div class=\"codeblock\"><code class=\"codeline\">oplistsort( \"/obj/null1 /obj/null2 /obj/null3\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsoplist\">chsoplist</a></div></body>",
    "opname": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opname\">opname</a></h1><p class=\"summary\">Returns the name of a node given its path.</p><div class=\"usage\"> <code>opname(<code class=\"var\">name</code>)</code></div><p>This is useful to find out the name of the network containing the node,\ne.g. <code>opname(\"..\")</code> will return the name of the network containing the\ncurrent node.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpath\">opfullpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opsubpath\">opsubpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oprelativepath\">oprelativepath</a></div></body>",
    "opnchildren": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnchildren\">opnchildren</a></h1><p class=\"summary\">Returns the number of nodes inside a container node.</p><div class=\"usage\"> <code>opnchildren(<code class=\"var\">name</code>)</code></div><p>This will return the number of nodes in a subnetwork or the number of surface\nnodes in an Geometry container object.</p><p>The count is non-recursive: it only counts the direct contents of the node,\nnot of the sub-nodes as well.</p></body>",
    "opninputs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></h1><p class=\"summary\">Returns the maximum number of connected inputs.</p><div class=\"usage\"> <code>opninputs(<code class=\"var\">name</code>)</code></div><p>Returns the number of the highest connected input. This is <em>not</em> the number of\nconnected inputs. If a node has four inputs and the fourth input is connected,\n<code>opninputs</code> will return <code>4</code>. If the first and third inputs are connected,\n<code>opninputs</code> will return <code>3</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></div></body>",
    "opnodigits": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnodigits\">opnodigits</a></h1><p class=\"summary\">Returns the alphanumeric prefix of a node name eliminating trailing digits.</p><div class=\"usage\"> <code>opnodigits(<code class=\"var\">name</code>)</code></div><p>This function will return the numeric value of the last set of\nconsecutive digits in a node\u2019s name.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">opnodigits(\"/obj/geo1\") = /obj/geo</code></div><div class=\"codeblock\"><code class=\"codeline\">opdigits(\".\") = /obj/geo</code></div></body>",
    "opnoutputs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></h1><p class=\"summary\">Returns the number of nodes connected to a node\u2019s output.</p><div class=\"usage\"> <code>opnoutputs(<code class=\"var\">name</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></div></body>",
    "opoutput": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></h1><p class=\"summary\">Returns the name of a node connected a given node\u2019s output.</p><div class=\"usage\"> <code>opoutput(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p>Multiple operators may be connected to a node\u2019s output\nand the index ordering is arbitrary.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinputpath\">opinputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutputpath\">opoutputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></div></body>",
    "opoutputpath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutputpath\">opoutputpath</a></h1><p class=\"summary\">Returns the full path of a node connected a given node\u2019s output.</p><div class=\"usage\"> <code>opoutputpath(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p>Multiple operators may be connected to a node\u2019s output\nand the index ordering is arbitrary.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opinputpath\">opinputpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opninputs\">opninputs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opoutput\">opoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opnoutputs\">opnoutputs</a></div></body>",
    "oppinput": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oppinput\">oppinput</a></h1><p class=\"summary\">Deprecated: replaced by opinput.</p><div class=\"usage\"> <code>oppinput(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p>Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/opinput\">opinput</a> instead.</p></body>",
    "oppwd": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oppwd\">oppwd</a></h1><p class=\"summary\">Returns the path of the current network.</p><div class=\"usage\"> <code>oppwd()</code></div><p>This is a shortcut for <code>execute(\"oppwf\")</code>.</p></body>",
    "oppwf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oppwf\">oppwf</a></h1><p class=\"summary\">Prints the path of the current network.</p><div class=\"usage\"> <code>oppwf()</code></div><p>This is a short form for execute(\"oppwf\").</p></body>",
    "oprelativepath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/oprelativepath\">oprelativepath</a></h1><p class=\"summary\">Returns the relative path from one node to another.</p><div class=\"usage\"> <code>oprelativepath(<code class=\"var\">srcpath</code>, <code class=\"var\">destpath</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpathfrom\">opfullpathfrom</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpath\">opfullpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opname\">opname</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opsubpath\">opsubpath</a></div></body>",
    "opselect": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselect\">opselect</a></h1><p class=\"summary\">Returns a list of the selected nodes.</p><div class=\"usage\"> <code>opselect(<code class=\"var\">network</code>)</code></div><p>Returns a string with a space separated list of the selected nodes\nin the given network.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `opselect(\"/obj\")`</code></div><p>Returns \"geo1 geo2\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectpath\">opselectpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecurse\">opselectrecurse</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecursepath\">opselectrecursepath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opflag\">opflag</a></div></body>",
    "opselectpath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectpath\">opselectpath</a></h1><p class=\"summary\">Returns a list of the full paths of selected nodes.</p><div class=\"usage\"> <code>opselectpath(<code class=\"var\">network</code>)</code></div><p>Returns a string with a space separated list of the full paths of selected\nnodes in the given network.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `opselectpath(\"/obj\")`</code></div><p>Returns \"/obj/geo1 /obj/geo2\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselect\">opselect</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecurse\">opselectrecurse</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecursepath\">opselectrecursepath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opflag\">opflag</a></div></body>",
    "opselectrecurse": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecurse\">opselectrecurse</a></h1><p class=\"summary\">Returns a recursive list of the selected nodes.</p><div class=\"usage\"> <code>opselectrecurse(<code class=\"var\">network</code>, <code class=\"var\">flag</code>)</code></div><p>Returns a string with a space separated list of the selected nodes\nin the given network, including selected children according to the context.</p><div class=\"related\"><code class=\"var\">flag</code> = 0: Do not keep the context. Every selected node will be\n  returned.</div><div class=\"related\"><code class=\"var\">flag</code> = 1: Keep the context. It will return only selected nodes\n  belonging to the same context as the \"network\" argument.</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `opselectrecurse(\"/obj/model\",1)`</code></div><p>Returns \"edgecusp1 subnet1 subnet1/sphere2\"</p><div class=\"codeblock\"><code class=\"codeline\">echo `opselectrecurse(\"/obj/model\",0)`</code></div><p>Returns \"edgecusp1 shopnet1 subnet1 subnet1/sphere2\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselect\">opselect</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectpath\">opselectpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecursepath\">opselectrecursepath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opflag\">opflag</a></div></body>",
    "opselectrecursepath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecursepath\">opselectrecursepath</a></h1><p class=\"summary\">Returns a recursive list of the full paths of selected nodes.</p><div class=\"usage\"> <code>opselectrecursepath(<code class=\"var\">network</code>, <code class=\"var\">flag</code>)</code></div><p>Returns a string with a space separated list of the full paths of selected\nnodes in the given network, including selected children according to the\ncontext.</p><div class=\"related\"><code class=\"var\">flag</code> = 0: Do not keep the context. Every selected node will be\n  returned.</div><div class=\"related\"><code class=\"var\">flag</code> = 1: Keep the context. It will return only selected nodes\n  belonging to the same context as the \"network\" argument.</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `opselectrecursepath(\"/obj/model\",1)`</code></div><p>Returns \"/obj/model/edgecusp1 /obj/model/subnet1 /obj/model/subnet1/sphere2\"</p><div class=\"codeblock\"><code class=\"codeline\">echo `opselectrecursepath(\"/obj/model\",0)`</code></div><p>Returns \"/obj/model/edgecusp1 /obj/model/shopnet1 /obj/model/subnet1 /obj/model/subnet1/sphere2\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselect\">opselect</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectpath\">opselectpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opselectrecurse\">opselectrecurse</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opflag\">opflag</a></div></body>",
    "opstreamname": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opstreamname\">opstreamname</a></h1><p class=\"summary\">Computes the active stream of a node.</p><p>In POPs there is the idea of an active stream.  This is the set of particles a micro solver should work on by virtue of its inputs.  The <code>opstreamname</code> expression computes the ad hoc point group for the nodes active stream.</p><p>If the node has only a single solid input that leads to a generator, this will evaluate to the <code>streamname</code> parameter of that generator. But, in the presence of merge nodes, it may produce a list of groups that form the active stream.</p><div class=\"usage\"> <code>string opstreamname(<code class=\"var\">nodepath</code>)</code></div></body>",
    "opsubpath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/opsubpath\">opsubpath</a></h1><p class=\"summary\">Returns the full path of a node including any containing subnets.</p><div class=\"usage\"> <code>opsubpath(<code class=\"var\">node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opfullpath\">opfullpath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/oprelativepath\">oprelativepath</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/opname\">opname</a></div></body>",
    "optransform": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/optransform\">optransform</a></h1><p class=\"summary\">Returns the transformation matrix of an object at the current time.</p><div class=\"usage\"> <code>optransform(<code class=\"var\">object_name</code>)</code></div><p>This function will return the transformation matrix of object_name.</p><p>If object_name is the empty string (\"\"), then the identity matrix is\n    returned.</p></body>",
    "optype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/optype\">optype</a></h1><p class=\"summary\">Returns the type of a node.</p><div class=\"usage\"> <code>optype(<code class=\"var\">name</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">optype(\"/obj/geo1\")</code></div><p>Returns \"geo\", indicating that object geo1 is a Geometry container object.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/optypeinfo\">optypeinfo</a></div></body>",
    "optypeinfo": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/optypeinfo\">optypeinfo</a></h1><p class=\"summary\">Returns type information about a node.</p><div class=\"usage\"> <code>optypeinfo(<code class=\"var\">name</code>, <code class=\"var\">pattern</code>)</code></div><p>Unlike <a href=\"https://www.sidefx.com/docs/houdini/expressions/optype\">optype</a> which just returns a node\u2019s type, this allows\nyou to specify a string of parameters which will cause different things\nto be output.</p><p>The pattern string may contain the following characters.</p><div class=\"argument\"><code>N</code></div><p>The name of the node. For <code>/obj/geo1</code>, this would be <code>geo1</code>.</p><div class=\"argument\"><code>r</code></div><p>The type of the node, same as in <a href=\"https://www.sidefx.com/docs/houdini/expressions/optype\">optype</a>. For\n    <code>/obj/geo1</code>, this would be <code>geo</code>.</p><div class=\"argument\"><code>e</code></div><p>The type\u2019s label. For <code>/obj/geo1</code>, this would be <code>Geometry</code>.</p><div class=\"argument\"><code>n</code></div><p>The network type of the operator. For <code>/obj/geo1</code>, this would be\n    <code>OBJ</code>.</p><div class=\"argument\"><code>s</code></div><p>The script path of the operator. For <code>/obj/geo1</code>, this would be\n    <code>obj</code>.</p><div class=\"argument\"><code>i</code></div><p>The operator\u2019s index. This number corresponds to the network type.</p><div class=\"argument\"><code>T</code></div><p>The table name of the operator. For <code>/obj/geo1</code>, this would be\n    <code>Object</code>.</p><div class=\"argument\"><code>t</code></div><p>The operator type. For <code>/obj/model</code>, this would be <code>geo</code>.</p><div class=\"argument\"><code>o</code></div><p>The full operator type name, consisting of the table name and operator name,\n    separated by a <code>/</code>, while also taking into account any namespace \n    or version operator type name components. For <code>/obj/model</code>, this would be\n    <code>Object/geo</code>, or for namespaced HDA it may be <code>ns::Object/myhda::1.0</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">optypeinfo(\"/obj/geo1\", \"NtT\")</code><code class=\"codeline\">    </code><code class=\"codeline\">    \"geo1 geo Object\"</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/optype\">optype</a></div></body>",
    "origin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/origin\">origin</a></h1><p class=\"summary\">Returns components of an object\u2019s transforms.</p><div class=\"usage\"> <code>origin(<code class=\"var\">obj1</code>, <code class=\"var\">obj2</code>, <code class=\"var\">constant_type</code>)</code></div><p>This function will return one of TX, TY, TZ, RX, RY, RZ, SX, SY, SZ\nvalue necessary to transform obj1 to obj2, depending on the type\nargument (\"TX\", \"TY\", \"TZ\", \"RX\", \"RY\", \"RZ\", \"SX\", \"SY\" or \"SZ\" ).</p><p>This can also be thought of as the position of obj2 relative to obj1.\nIt will compute the position of obj1 relative to obj2 and returns one of\nTX, TY, TZ, RX, RY, RZ, SX, SY, SZ based on the type argument.</p><p>If the empty string (\"\") is specified for either obj1 or obj2, then the\nidentity transform will be used instead.  For example, if obj1 is the\nempty string, then the world space position of obj2 is returned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vorigin\">vorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vtorigin\">vtorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vrorigin\">vrorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/originoffset\">originoffset</a></div></body>",
    "originoffset": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/originoffset\">originoffset</a></h1><p class=\"summary\">Returns components of an object\u2019s offset transforms.</p><div class=\"usage\"> `originoffset(<code class=\"var\">obj1</code>, <code class=\"var\">pos1</code>, <code class=\"var\">obj2</code>, <code class=\"var\">pos2</code>,</div><p><code class=\"var\">constant_type</code>)`</p><p>This function will return one of TX, TY, TZ, RX, RY, RZ value necessary\nto transform the point pos1 in the space of object obj1 to point pos2 in\nthe space of object obj2, depending on the type argument (\"TX\", \"TY\",\n\"TZ\", \"RX\", \"RY\" or \"RZ\").</p><p>This can also be thought of as the position of pos2 in obj2 relative to\npos1 in obj1.</p><p>If the empty string (\"\") is specified for either obj1 or obj2, then the\nidentity transform will be used instead.  For example, if obj1 is the\nempty string, then the world space position of obj2 is returned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/origin\">origin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vorigin\">vorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vtorigin\">vtorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vrorigin\">vrorigin</a></div></body>",
    "padzero": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/padzero\">padzero</a></h1><p class=\"summary\">Returns a string padding a number to a given length with zeros.</p><div class=\"usage\"> <code>padzero(<code class=\"var\">size</code>, <code class=\"var\">value</code>)</code></div><p>Returns a string containing <code class=\"var\">value</code> preceded by enough zeros to make up\n<code class=\"var\">size</code> digits.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">padzero(5, 126) = 00126</code></div><div class=\"codeblock\"><code class=\"codeline\">padzero(5, 23) = 00023</code></div><div class=\"codeblock\"><code class=\"codeline\">padzero(1, 23) = 23</code></div></body>",
    "param": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/param\">param</a></h1><p class=\"summary\">Deprecated: use stamp instead.</p><div class=\"usage\"> <code>param(<code class=\"var\">token</code>, <code class=\"var\">value</code>)</code></div><p>This function is now obsolete, please use <a href=\"https://www.sidefx.com/docs/houdini/expressions/stamp\">stamp</a> instead. A\nwarning will be generated if used.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/stamp\">stamp</a></div></body>",
    "parmisstring": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/parmisstring\">parmisstring</a></h1><p class=\"summary\">Returns 1 if a specified parameter is a string.</p><div class=\"usage\"> <code>parmisstring(<code class=\"var\">parameter_name</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `parmisstring(\"/obj/model/lookatpath\")`</code></div></body>",
    "pdgattrib": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></h1><p class=\"summary\">Returns the value of a PDG work item attrib</p><div class=\"usage\"> <code>pdgattrib(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">name</code> is the name of the attribute</p><p><code class=\"var\">index</code> is the component index of the attribute</p><h2>Note</h2><p>This function is equivalent to doing <code>@<code class=\"var\">name</code>.<code class=\"var\">index</code></code>, but makes it\n    easier to programtically select the attribute name or index.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgattrib(\"pdg_frame\", 0)</code></div><p>Returns the frame value of the current work item - equivalent to <code>@pdg_frame</code></p><div class=\"codeblock\"><code class=\"codeline\">pdgattrib(\"color\", 2)</code></div><p>Returns the second component of the \"color\" attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribs\">pdgattribs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribvals\">pdgattribvals</a></div></body>",
    "pdgattriblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattriblist\">pdgattriblist</a></h1><p class=\"summary\">Returns a space-separated list of attribute names on the active PDG work item.</p><div class=\"usage\"> <code>pdgattriblist()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribs\">pdgattribs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribsize\">pdgattribsize</a></div></body>",
    "pdgattribs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribs\">pdgattribs</a></h1><p class=\"summary\">Returns the string value of a PDG work item attribute</p><div class=\"usage\"> <code>pdgattribs(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">name</code> is the name of the attribute</p><p><code class=\"var\">index</code> is the component index of the attribute</p><h2>Note</h2><p>This function is equivalent to doing <code>@<code class=\"var\">name</code>.<code class=\"var\">index</code></code>, but makes it\n    easier to programtically select the attribute name or index.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgattribs(\"pdg_input\", 0)</code></div><p>Returns the first input file on the active work item. This is equivalent to using\n<code>@pdg_input</code>.</p><div class=\"codeblock\"><code class=\"codeline\">pdgattribs(\"filenames\", 2)</code></div><p>Returns the second component of the \"filenames\" attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribvals\">pdgattribvals</a></div></body>",
    "pdgattribsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribsize\">pdgattribsize</a></h1><p class=\"summary\">Returns the number of components in a PDG work item attribute.</p><div class=\"usage\"> <code>pdgattribsize(<code class=\"var\">attribute</code>)</code></div><p>If there is no active work item or the attribute is not found on the work item, returns 0</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgattribsize( \"position\" )</code></div><p>Returns the size of the \"position\" attribute on the active work item</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribtype\">pdgattribtype</a></div></body>",
    "pdgattribtype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribtype\">pdgattribtype</a></h1><p class=\"summary\">Returns the type of a PDG work item attribute.</p><div class=\"usage\"> <code>pdgattribtype(<code class=\"var\">attribute</code>)</code></div><p>If there is no active work item or the attribute does not exist, returns -1.</p><div class=\"argument\"><code>Types are</code></div><div class=\"related\">-1 - Unknown/Invalid</div><div class=\"related\">0 - Integer Array</div><div class=\"related\">1 - Float Array</div><div class=\"related\">2 - String Array</div><div class=\"related\">3 - File Array</div><div class=\"related\">4 - Python Object</div><div class=\"related\">5 - Geometry Data</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgattribtype( \"wedgeindex\" )</code></div><p>Returns 0, which indicates that the attribute is an integer.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribsize\">pdgattribsize</a></div></body>",
    "pdgattribute": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribute\">pdgattribute</a></h1><p class=\"summary\">Deprecated: replaced by pdgattrib.</p><div class=\"usage\"> <code>pdgattribute(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p>Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a> instead.</p></body>",
    "pdgattributes": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattributes\">pdgattributes</a></h1><p class=\"summary\">Deprecated: replaced by pdgattribs.</p><div class=\"usage\"> <code>pdgattributes(<code class=\"var\">name</code>, <code class=\"var\">index</code>)</code></div><p>Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribs\">pdgattribs</a> instead.</p></body>",
    "pdgattribvals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribvals\">pdgattribvals</a></h1><p class=\"summary\">Returns the space separated list of values for a PDG work item attribute</p><div class=\"usage\"> <code>pdgattribvals(<code class=\"var\">name</code>)</code></div><p><code class=\"var\">name</code> is the name of the attribute</p><h2>Note</h2><p>This function works for any type of attribute. Integer and float values will be converted to string. If any of the attribute values are strings with spaces in them, the string values will be wrapped in quotes automatically.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgattribvals(\"image_files\")</code></div><p>Returns the space separated list of values in the <code>image_files</code> attribute. For example: <code>image1.png image2.png \"image with space.png\"</code>.</p><div class=\"codeblock\"><code class=\"codeline\">pdgattribvals(\"wedgevalues\")</code></div><p>Example evaluation: <code>0.5 10 20</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattrib\">pdgattrib</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgattribs\">pdgattribs</a></div></body>",
    "pdginput": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginput\">pdginput</a></h1><p class=\"summary\">Returns a work item input file for the specified file index and tag</p><div class=\"usage\"> <code>pdginput(<code class=\"var\">index</code>, <code class=\"var\">tag</code>, <code class=\"var\">localize</code>)</code></div><p><code class=\"var\">index</code> the input file number, from the list of files on the active work item</p><p><code class=\"var\">tag</code> the tag, which can be set to empty string if unspecified</p><p><code class=\"var\">localize</code> set to 1 to indicate that the input file path should have PDG\n    directory tokens resolved.</p><p>This function looks up an input file from the active work item. The file tag can be used to filter input files, for example by passing in \"file/geo\" to eliminate files that aren\u2019t geometry. The index parameter determines which file path to return if there are multiple valid input files, starting from 0. When a tag is specified the index is applied after filtering the files by the tag.</p><h2>Note</h2><p>This function is a more generalized version of the <code>@pdg_input</code> attribute.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdginput(1, \"file/image\", 0)</code></div><p>Returns the input image file with index 1, from the list of input files on the active work item.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutput\">pdgoutput</a></div></body>",
    "pdginputsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginputsize\">pdginputsize</a></h1><p class=\"summary\">Returns the number of input files on the active PDG work item</p><div class=\"usage\"> <code>pdginputsize(<code class=\"var\">tag</code>)</code></div><p><code class=\"var\">tag</code> the tag, which can be set to empty string if unspecified</p><p>This function returns the number of input files to the active work item, with the specified file tag.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdginputsize(\"file/geo\")</code></div><p>Returns the number of input geometry files.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginput\">pdginput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutput\">pdgoutput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutputsize\">pdgoutputsize</a></div></body>",
    "pdginputvals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginputvals\">pdginputvals</a></h1><p class=\"summary\">Returns a space separated string of all work item input files for the specified tag</p><div class=\"usage\"> <code>pdginputvals(<code class=\"var\">tag</code>, <code class=\"var\">localize</code>)</code></div><p><code class=\"var\">tag</code> the tag, which can be set to empty string if unspecified</p><p><code class=\"var\">localize</code> set to 1 to indicate that the input file path should have PDG\n    directory tokens resolved.</p><p>This function looks up all input files from the active work item with the specified file tag. If any of the file paths have spaces in them, they are put in quotes automatically in the output string.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdginputvals(\"file/image\", 0)</code></div><p>Returns all input image file paths. For example: <code>image1.png image2.png \"image with space\".png</code></p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginput\">pdginput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutput\">pdgoutput</a></div></body>",
    "pdgoutput": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutput\">pdgoutput</a></h1><p class=\"summary\">Returns a work item output file for the specified file index and tag</p><div class=\"usage\"> <code>pdgoutput(<code class=\"var\">index</code>, <code class=\"var\">tag</code>, <code class=\"var\">localize</code>)</code></div><p><code class=\"var\">index</code> the output file index</p><p><code class=\"var\">tag</code> the tag, which can be set to empty string if unspecified</p><p><code class=\"var\">localize</code> set to 1 to indicate that the input file path should have PDG\n    directory tokens resolved.</p><h2>Note</h2><p>This function is a more generalized version of the <code>@pdg_output</code> attribute.</p><p>This function looks up an output file from the active work item. The file tag can be used to filter output files, for example by passing in \"file/geo\" to eliminate files that aren\u2019t geometry. The index parameter determines which file path to return if there are multiple valid files, starting from 0. When a tag is specified the index is applied after filtering the files by the tag.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgoutput(1, \"\", 0)</code></div><p>Returns the second output file from the active work item, equivalent to <code>@pdg_output.1</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginput\">pdginput</a></div></body>",
    "pdgoutputsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutputsize\">pdgoutputsize</a></h1><p class=\"summary\">Returns the number of output files on the active PDG work item</p><div class=\"usage\"> <code>pdgoutputsize(<code class=\"var\">tag</code>)</code></div><p><code class=\"var\">tag</code> the tag, which can be set to empty string if unspecified</p><p>This function returns the number of output files from the active work item, with the specified file tag.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgoutputsize(\"file/image\")</code></div><p>Returns the number of output image files.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginput\">pdginput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginputsize\">pdginputsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutput\">pdgoutput</a></div></body>",
    "pdgoutputvals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutputvals\">pdgoutputvals</a></h1><p class=\"summary\">Returns a space separated string of all work item output files for the specified tag</p><div class=\"usage\"> <code>pdgoutputvals(<code class=\"var\">tag</code>, <code class=\"var\">localize</code>)</code></div><p><code class=\"var\">tag</code> the tag, which can be set to empty string if unspecified</p><p><code class=\"var\">localize</code> set to 1 to indicate that the input file path should have PDG\n    directory tokens resolved.</p><p>This function looks up all output files from the active work item with the specified file tag. If any of the file paths have spaces in them, they are put in quotes automatically in the output string.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pdgoutputvals(\"file/geo\", 0)</code></div><p>Returns all output geometry file paths. For example: <code>ropfetch1.01.bgeo.sc ropfetch2.02.bgeo.sc</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdginput\">pdginput</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pdgoutput\">pdgoutput</a></div></body>",
    "pic": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pic\">pic</a></h1><p class=\"summary\">Returns the color of a pixel in a compositing node.</p><div class=\"usage\"> <code>pic(<code class=\"var\">copname</code>, <code class=\"var\">U</code>, <code class=\"var\">V</code>, <code class=\"var\">color_type</code>)</code></div><p>The color_type parameter can be one of the\nfollowing: D_CR, D_CG, D_CB, D_CA, D_CHUE, D_CSAT, D_CVAL, D_CLUM for\nthe red, green, blue, alpha, hue, saturation, value, or luminance of the\npixel.</p><p>The color returned will be interpolated smoothly between adjacent\npixels. For the non-interpolated color, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/picni\">picni</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pic(\"/img/img1/color1\", .5, .5, D_CLUM)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/picni\">picni</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/tex\">tex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/texni\">texni</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/res\">res</a></div></body>",
    "picni": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/picni\">picni</a></h1><p class=\"summary\">Returns the non-interpolated color of a pixel in a compositing node.</p><div class=\"usage\"> <code>picni(<code class=\"var\">copname</code>, <code class=\"var\">U</code>, <code class=\"var\">V</code>, <code class=\"var\">color_type</code>)</code></div><p>The color_type parameter can be one of the\nfollowing: D_CR, D_CG, D_CB, D_CA, D_CHUE, D_CSAT, D_CVAL, D_CLUM for\nthe red, green, blue, alpha, hue, saturation, value, or luminance of the\npixel.</p><p>The color returned will not be interpolated. That is, it will be\nthe exact color of the pixel.\nFor the interpolated color, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/pic\">pic</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">picni(\"/img/img1/color1\", .5, .5, D_CLUM)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pic\">pic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/tex\">tex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/texni\">texni</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/res\">res</a></div></body>",
    "pluralize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pluralize\">pluralize</a></h1><p class=\"summary\">Converts an English noun to its plural.</p><div class=\"usage\"> <code>pluralize(<code class=\"var\">s</code>)</code></div></body>",
    "point": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/point\">point</a></h1><p class=\"summary\">Returns the value of a point attribute.</p><div class=\"usage\"><code>point(<code class=\"var\">surface_node</code>, <code class=\"var\">point_number</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p><code class=\"var\">surface_node</code> is a path to a surface node, for example <code>\"/obj/geo1/grid1\"</code>.</p><p><code class=\"var\">point_number</code> is the point number to read the attribute from.\n    When instancing, you can use <a href=\"https://www.sidefx.com/docs/houdini/expressions/instancepoint\">instancepoint</a> to get the number of the\n    point currently being instanced.</p><p><code class=\"var\">attribute</code> is the name of the attribute (for example, <code>Cd</code> for diffuse\n    color). Two special attributes exist: <code>P</code> and <code>Pw</code> which represent the\n    position of the point in space (<code>Pw</code> allows you to access the W\n    component of the position).</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for\n    example <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\n    attribute <code>param</code>.</p><p><p><code class=\"var\">index</code> specifies the component position in multi-component attributes such as vectors, colors, and arrays. For example, if the attribute is a color, an <code>index</code> value of <code>0</code> returns the red component, <code>1</code> returns the green component, and <code>2</code> returns the blue component.</p></p><h2>Note</h2><p>This function will interpolate between point values if the point\n    number is fractional, such as 3.35.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">point(\"/obj/geo1/facet1\", 3, \"P\", 0)</code></div><p>Returns the X component of point 3 of the <code>facet1</code> surface node in <code>geo1</code>.</p><div class=\"codeblock\"><code class=\"codeline\">point(\"/obj/geo1/facet1\", 3, \"N\", 2)</code></div><p>Returns the Z component of the normal attribute of point 3 in the <code>facet1</code> surface node of object <code>geo1</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointavg\">pointavg</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertex\">vertex</a></div></body>",
    "pointattriblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattriblist\">pointattriblist</a></h1><p class=\"summary\">Returns a space-separated list of point attribute names.</p><div class=\"usage\"> <code>pointattriblist(<code class=\"var\">surface_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattriblist\">vertexattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattriblist\">primattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattriblist\">detailattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/attriblist\">attriblist</a></div></body>",
    "pointattribsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribsize\">pointattribsize</a></h1><p class=\"summary\">Returns the number of components in a point attribute.</p><div class=\"usage\"> <code>pointattribsize(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute is not found, returns 0.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointattribsize( \"/obj/model/grid1\", \"P\" )</code></div><p>Returns 3, the number of components in a \"P\"\n    (position) attribute (X, Y, and Z).</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/point\">point</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribsize\">vertexattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribsize\">primattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribsize\">detailattribsize</a></div></body>",
    "pointattribtype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribtype\">pointattribtype</a></h1><p class=\"summary\">Returns the type of a point attribute.</p><div class=\"usage\"> <code>pointattribtype(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute are not found, returns -1.</p><div class=\"argument\"><code>Types are</code></div><div class=\"related\">-1 - Unknown/Invalid</div><div class=\"related\">0 - Integer</div><div class=\"related\">1 - Float</div><div class=\"related\">2 - String</div><div class=\"related\">3 - Array of integers</div><div class=\"related\">4 - Array of floats</div><div class=\"related\">5 - Array of strings</div><div class=\"related\">6 - Dictionary</div><div class=\"related\">7 - Array of dictionaries</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointattribsize( \"/obj/model/box\", \"Cd\" )</code></div><p>Returns 1 to denote a float attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/point\">point</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribtype\">primattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribtype\">vertexattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribtype\">detailattribtype</a></div></body>",
    "pointavg": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointavg\">pointavg</a></h1><p class=\"summary\">Returns the average of an attribute across all points in a geometry.</p><div class=\"usage\"> <code>pointavg(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>This function works much like the <a href=\"https://www.sidefx.com/docs/houdini/expressions/point\">point</a> function, except that it\nreturns the average value of the attribute for all points in the\nspecified surface node.</p><p><p><code class=\"var\">index</code> specifies the component position in multi-component attributes such as vectors, colors, and arrays. For example, if the attribute is a color, an <code>index</code> value of <code>0</code> returns the red component, <code>1</code> returns the green component, and <code>2</code> returns the blue component.</p></p></body>",
    "pointdist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></h1><p class=\"summary\">Returns the distance between a point and a primitive.</p><div class=\"usage\"> `pointdist(<code class=\"var\">surface_node</code>, <code class=\"var\">point_num</code>, <code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>,</div><p><code class=\"var\">return_type</code>)`</p><p>Given a point and a primitive, this function finds the distance between\nthe point and the closest spot on the primitive. If prim_num is minus\none, the closest distance to any primitive is found.</p><div class=\"related\">return_type = 0 returns the minimum distance.</div><div class=\"related\">return_type = 1 returns the u parametric value at the point of minimum\n  distance.</div><div class=\"related\">return_type = 2 returns the v parametric value at the point of minimum\n  distance.</div><div class=\"related\">return_type = 3 returns the primitive number that was closest. Enter\n  -1 as the <code class=\"var\">prim_num</code>.</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointdist(\"/obj/geo1/add1\", 0, \"/obj/geo1/grid1\", 0, 0)</code></div><p>Returns the distance between point 0 of add1 and the closest spot\nfrom the surface of grid1 primitive number 0. If the return_type\nwere 1, the u parametric value that is closest to the point would be\nreturned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primdist\">primdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/xyzdist\">xyzdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/nearpoint\">nearpoint</a></div></body>",
    "pointgrouplist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></h1><p class=\"summary\">Returns the list of point groups in a surface node.</p><div class=\"usage\"> <code>pointgrouplist(<code class=\"var\">surface_node</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To get a list of groups whose names match a pattern, use\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgroupmask\">pointgroupmask</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegrouplist\">edgegrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgrouplist\">vertexgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgroupmask\">pointgroupmask</a></div></body>",
    "pointgroupmask": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgroupmask\">pointgroupmask</a></h1><p class=\"summary\">Returns the list of point groups matching a pattern in a surface node.</p><div class=\"usage\"> <code>pointgroupmask(<code class=\"var\">surface_node</code>, <code class=\"var\">pattern</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To simply get a list of all point groups (no pattern),\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointgroupmask(\"/obj/model\", \"group*\")</code></div><p>Returns the names of all point groups in the specified surface node which\n    start with \"group\". So this may be something like \"group1 group2\n    group_smoke\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgroupmask\">primgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegroupmask\">edgegroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgroupmask\">vertexgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></div></body>",
    "pointlist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></h1><p class=\"summary\">Returns a list of all points in a point group.</p><div class=\"usage\"> <code>pointlist(<code class=\"var\">surface_node</code>, <code class=\"var\">group_name</code>)</code></div><p>The returned string is a space separated list of point numbers.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointpattern\">pointpattern</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></div></body>",
    "pointneighbours": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointneighbours\">pointneighbours</a></h1><p class=\"summary\">Lists points that share a minimum number of primitives with\na specified point.</p><div class=\"usage\"> <code>pointneighbours(<code class=\"var\">surface_node</code>, <code class=\"var\">point_num</code>, <code class=\"var\">num_shared_prims</code>)</code></div><p>This function lists all the points that share at\nleast <code class=\"var\">num_shared_prims</code> primitives with the point specified by\n<code class=\"var\">point_num</code>.</p><p>The returned string is a space separated list of point numbers.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointneighbours(\"/obj/geo1/sphere1\", 88, 2)</code></div><p>Returns a list of numbers that identify the points in sphere1 that\n    share at least 2 primitives (typically along an edge) with sphere1\n    point number 88.</p><div class=\"codeblock\"><code class=\"codeline\">pointneighbours(\"/obj/geo1/sphere1\", 88, 1)</code></div><p>Returns a list of numbers that identify the points in sphere1 that\n    share at least 1 primitive with sphere1 point number 88.</p><div class=\"codeblock\"><code class=\"codeline\">pointneighbours(\"/obj/geo1/sphere1\", 88, 0)</code></div><p>Returns a list of all the points in sphere1 except point number 88.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primneighbours\">primneighbours</a></div></body>",
    "pointpattern": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointpattern\">pointpattern</a></h1><p class=\"summary\">Returns a list of points that match a specified pattern.</p><div class=\"usage\"> <code>pointpattern(<code class=\"var\">surface_node</code>, <code class=\"var\">pattern</code>)</code></div><p>The pattern is a space separated list of point numbers, point number ranges,\nor point group names.</p><p>The returned string is a space separated list of point numbers.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointpattern(\"/obj/model/sphere1\", \"2-5 10-12\")</code></div><p>Returns \"2 3 4 5 10 11 12\", assuming the specified surface node exists and\n    has that many points.</p><div class=\"codeblock\"><code class=\"codeline\">pointpattern(\"/obj/model/group1\", \"10 group1 20\")</code></div><p>Returns a list of all points in the group named \"group\", as well as\n    10 and 20. The order of the returned points is not guaranteed.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div></body>",
    "points": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/points\">points</a></h1><p class=\"summary\">Returns the string value of a point attribute.</p><div class=\"usage\"> <code>points(<code class=\"var\">surface_node</code>, <code class=\"var\">point_number</code>, <code class=\"var\">attribute</code>)</code></div><p>Components of dictionary attributes can be resolved using <code>.</code>, for\nexample <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\nattribute <code>param</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">points(\"/obj/geo1/facet1\", 3, \"instance\")</code></div><p>Returns the string associated with the string attribute <code>instance</code> for point 3 in the <code>facet1</code> surface node in <code>geo1</code>.</p></body>",
    "pointsmap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointsmap\">pointsmap</a></h1><p class=\"summary\">Returns a string from a list of strings in a point attribute.</p><div class=\"usage\"> <code>pointsmap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>This function will return the <code class=\"var\">index</code>th unique string bound to the given\npoint attribute. Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/pointsnummap\">pointsnummap</a> to find the total number of unique\nstrings. Note that the exact order of the strings is should not be\nrelied upon. The indexes start with 0 and go to pointsnummap()-1.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointsmap(\"/obj/geo1/attribcreate1\", \"foo\", 0)</code></div><p>Returns the first unique string on the given surface node.</p></body>",
    "pointsnummap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointsnummap\">pointsnummap</a></h1><p class=\"summary\">Returns the number of unique strings bound to a point attribute.</p><div class=\"usage\"> <code>pointsnummap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pointsnummap(\"/obj/geo1/attribcreate1\", \"foo\")</code></div><p>Returns number of unique strings in the foo attribute.</p></body>",
    "pow": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pow\">pow</a></h1><p class=\"summary\">Raises a number to an exponent.</p><div class=\"usage\"> <code>pow(<code class=\"var\">base</code>, <code class=\"var\">exponent</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pow(2, 3) = 8</code></div></body>",
    "prim": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/prim\">prim</a></h1><p class=\"summary\">Returns the value of a primitive attribute.</p><div class=\"usage\"> <code>prim(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">attrib_name</code>, <code class=\"var\">attrib_index</code>)</code></div><p>When given the <code>P</code> or <code>Pw</code> attribute, returns the centroid of the primitive.</p><p>This can also be used to read the value of a primitive intrinsic by specifying\n<code>\"intrinsic:name_of_intrinsic\"</code> instead of an attribute name.</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for\nexample <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\nattribute <code>param</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">prim(\"/obj/geo1/facet1\", 3, \"P\", 0)</code></div><p>Evaluates the X component of the centroid of primitive 3 in the\n    specified surface node.</p><div class=\"codeblock\"><code class=\"codeline\">prim(\"/obj/geo1/facet1\", 3, \"Cd\", 1)</code></div><p>Evaluate the green color of the <code>Cd</code> attribute of primitive 3.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primuv\">primuv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/point\">point</a></div></body>",
    "primattriblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattriblist\">primattriblist</a></h1><p class=\"summary\">Returns a space-separated list of primitive attribute names.</p><div class=\"usage\"> <code>primattriblist(<code class=\"var\">surface_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattriblist\">pointattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattriblist\">vertexattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattriblist\">detailattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/attriblist\">attriblist</a></div></body>",
    "primattribsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribsize\">primattribsize</a></h1><p class=\"summary\">Returns the number of components in a primitive attribute.</p><div class=\"usage\"> <code>primattribsize(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute are not found, returns 0.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primattribsize( \"/obj/model/box\", \"Cd\" )</code></div><p>Returns the number of elements of a diffuse color attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/prim\">prim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribsize\">pointattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribsize\">vertexattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribsize\">detailattribsize</a></div></body>",
    "primattribtype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribtype\">primattribtype</a></h1><p class=\"summary\">Returns the type of a primitive attribute.</p><div class=\"usage\"> <code>primattribtype(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute are not found, returns -1.</p><div class=\"argument\"><code>Types are</code></div><div class=\"related\">-1 - Unknown/Invalid</div><div class=\"related\">0 - Integer</div><div class=\"related\">1 - Float</div><div class=\"related\">2 - String</div><div class=\"related\">3 - Array of integers</div><div class=\"related\">4 - Array of floats</div><div class=\"related\">5 - Array of strings</div><div class=\"related\">6 - Dictionary</div><div class=\"related\">7 - Array of dictionaries</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primattribsize( \"/obj/model/box\", \"Cd\" )</code></div><p>Returns 1 to denote a float attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/prim\">prim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribtype\">pointattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribtype\">vertexattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribtype\">detailattribtype</a></div></body>",
    "primdist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primdist\">primdist</a></h1><p class=\"summary\">Returns the minimum distance and closest points between two primitives.</p><div class=\"usage\"> `primdist(<code class=\"var\">surface_node</code>, <code class=\"var\">prim1_num</code>, <code class=\"var\">surface_node</code>, <code class=\"var\">prim2_num</code>,</div><p><code class=\"var\">return_type</code>)`</p><div class=\"related\"><code class=\"var\">return_type</code> = 0: minimum distance</div><div class=\"related\"><code class=\"var\">return_type</code> = 1: U value of closest point on primitive 1</div><div class=\"related\"><code class=\"var\">return_type</code> = 2: V value of closest point on primitive 1</div><div class=\"related\"><code class=\"var\">return_type</code> = 3: U value of closest point on primitive 2</div><div class=\"related\"><code class=\"var\">return_type</code> = 4: V value of closest point on primitive 2</div><p>Only works for faces, curves, and spline surfaces. Other types of\nprimitives will always return 0.</p><h2>Note</h2><p>Minimum works in two groups. You can either use minimum between curves and polygons or between meshes, nurbs surfaces, and bezier surfaces. However, it will not work between the two groups. For example, a NURBS curve + NURBS surface will not work. </p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primdist(\"/obj/geo1/sphere1\", 0, \"/obj/geo1/grid1\", 0, 0)</code></div><p>Returns the distance between the first primitives in both sphere1\n    and grid1.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/xyzdist\">xyzdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/nearpoint\">nearpoint</a></div></body>",
    "primduv": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primduv\">primduv</a></h1><p class=\"summary\">Returns the partial derivatives of a primitive attribute.</p><div class=\"usage\"> `primduv(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">attrib_name</code>, <code class=\"var\">attrib_index</code>,</div><p><code class=\"var\">u</code>, <code class=\"var\">v</code>, <code class=\"var\">du</code>, <code class=\"var\">dv</code>)`</p><p>Evaluates the (partial) derivatives of a face or hull attribute at a\nparametric (u,v) position. u and v are unit values, defined in the\n<code>[0,1]</code> interval. When given the \"P\" or \"Pw\" attribute, the positional\nderivative of (u,v)'s image on the primitive will be returned. If the\nprimitive is a face type, v and dv are ignored. If both du and dv are 0,\nprimduv becomes equivalent to primuv.</p><h2>Note</h2><p>if the primitive is a polygon or a mesh, u and v are defined in\n    terms of the number of vertices, or rows or columns respectively.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primduv(\"/obj/geo1/tube1\", 12, \"P\", 2, 0.4, 0.5, 1, 0)</code></div><p>Evaluates the Z component of the first-order partial derivative of\n    primitive 12 with respect to u, at the parametric location\n    (0.4,0.5).</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primuv\">primuv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "primgrouplist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></h1><p class=\"summary\">Returns the list of primitive groups in a surface node.</p><div class=\"usage\"> <code>primgrouplist(<code class=\"var\">surface_node</code>)</code></div><p>The returned string is a space separated list of group names.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegrouplist\">edgegrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgrouplist\">vertexgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgroupmask\">primgroupmask</a></div></body>",
    "primgroupmask": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgroupmask\">primgroupmask</a></h1><p class=\"summary\">Returns the list of groups matching a pattern in a surface node.</p><div class=\"usage\"> <code>primgroupmask(<code class=\"var\">surface_node</code>, <code class=\"var\">pattern</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To simply get a list of all primitive groups (no pattern),\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primgroupmask(\"/obj/model\", \"group*\")</code></div><p>Returns the names of all primitive groups in the specified surface node \n    which start with \"group\". So this may be something like \"group1 group2\n    group_leftleg\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgroupmask\">pointgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegroupmask\">edgegroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgroupmask\">vertexgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></div></body>",
    "primlist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primlist\">primlist</a></h1><p class=\"summary\">Returns a list of all primitives in a surface node.</p><div class=\"usage\"> <code>primlist(<code class=\"var\">surface_node</code>, <code class=\"var\">group_name</code>)</code></div><p>The return string is a space separated list of primitive numbers.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/haspoint\">haspoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/hasprim\">hasprim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></div></body>",
    "primneighbours": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primneighbours\">primneighbours</a></h1><p class=\"summary\">Lists primitives that share a minimum number of points with a\nspecified primitive.</p><div class=\"usage\"> <code>primneighbours(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">num_shared_pts</code>)</code></div><p>This function lists all the primitives that share\nat least the given number of points with the primitive specified. </p><p>The returned string is a space separated list of primitive numbers.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primneighbours(\"/obj/geo1/sphere1\", 88, 2)</code></div><p>Returns a list of numbers that identify the primitives in sphere1\n    that share at least 2 points (typically along an edge) with sphere1\n    primitive number 88.</p><div class=\"codeblock\"><code class=\"codeline\">primneighbours(\"/obj/geo1/sphere1\", 88, 1)</code></div><p>Returns a list of numbers that identify the primitives in sphere1\n    that share at least 1 point with sphere1 primitive number 88.</p><div class=\"codeblock\"><code class=\"codeline\">primneighbours(\"/obj/geo1/sphere1\", 88, 0)</code></div><p>Returns a list of all the primitives in sphere1 except primitive\n    number 88.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointneighbours\">pointneighbours</a></div></body>",
    "prims": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/prims\">prims</a></h1><p class=\"summary\">Returns the string value of a primitive attribute.</p><div class=\"usage\"> <code>prims(<code class=\"var\">surface_node</code>, <code class=\"var\">primitive_number</code>, <code class=\"var\">attribute</code>)</code></div><p>This can also be used to read the value of a primitive intrinsic by specifying\n<code>\"intrinsic:name_of_intrinsic\"</code> instead of an attribute name.</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for\nexample <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\nattribute <code>param</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">prims(\"/obj/geo1/facet1\", 3, \"texturemap\")</code></div><p>Returns the string associated with the string attribute <code>texturemap</code>\n    for primitive 3 in the <code>facet1</code> surface node in <code>geo1</code>.</p></body>",
    "primsmap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primsmap\">primsmap</a></h1><p class=\"summary\">Returns a string from a list of strings in a primitive attribute.</p><div class=\"usage\"> <code>primsmap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>This function will return the <code class=\"var\">index</code>th unique string bound to the given\nprim attribute. Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/primsnummap\">primsnummap</a> to find the total number of unique\nstrings. Note that the exact order of the strings is should not be\nrelied upon. The indexes start with 0 and go to primsnummap()-1.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primsmap(\"/obj/geo1/attribcreate1\", \"foo\", 0)</code></div><p>Returns the first unique string in the foo attribute.</p></body>",
    "primsnummap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primsnummap\">primsnummap</a></h1><p class=\"summary\">Returns the number of unique strings bound to a primitive attribute.</p><div class=\"usage\"> <code>primsnummap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primsnummap(\"/obj/geo1/attribcreate1\", \"foo\")</code></div><p>Returns number of unique strings tied to the foo attribute.</p></body>",
    "primuv": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/primuv\">primuv</a></h1><p class=\"summary\">Returns the value of a primitive attribute at a certain UV location.</p><div class=\"usage\"> `primuv(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">attrib_name</code>, <code class=\"var\">attrib_index</code>,</div><p><code class=\"var\">u</code>, <code class=\"var\">v</code>)`</p><p>Evaluates the specified attribute at a parametric (u,v) position on the\nprimitive. u and v are unit values, defined in the <code>[0,1]</code> interval. When\ngiven the \"P\" or \"Pw\" attribute, the x, y, or z image of the (u,v)\ndomain point will be returned. If the primitive is a face type or a\ncircle, v is ignored.</p><h2>Note</h2><p>if the primitive is a polygon or a mesh, u and v are defined in\n    terms of the number of vertices, or rows or columns respectively.\n    Currently, only the position attribute of quadric primitives can\n    be evaluated.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">primuv(\"/obj/geo1/tube1\", 0, \"Cd\", 1, 0.7, 0.3)</code></div><p>Evaluates the Green component of the diffuse color attribute at a\n    location on primitive 0 given by the parametric coordinates\n    (0.7,0.3).</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primduv\">primduv</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "print": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/print\">print</a></h1><p class=\"summary\">Prints a message to the console.</p><div class=\"usage\"> <code>print(<code class=\"var\">label</code>, <code class=\"var\">expression</code>)</code></div><p>This is useful diagnose parameters in nodes or channels.</p><p>Returns the value of <code class=\"var\">expression</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">print(\"wheel:\", sin($T))</code></div></body>",
    "property": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/property\">property</a></h1><p class=\"summary\">Similar to <code>ch()</code>, but for render properties, with a default if the property doesn\u2019t exist.</p><div class=\"usage\"> <code>property(\"<code class=\"var\">path</code>\", <code class=\"var\">default</code>)</code></div><div class=\"usage\"> <code>propertyf(\"<code class=\"var\">path</code>\", <code class=\"var\">frame</code>, <code class=\"var\">default</code>)</code></div><div class=\"usage\"> <code>propertyt(\"<code class=\"var\">path</code>\", <code class=\"var\">time</code>, <code class=\"var\">default</code>)</code></div><div class=\"usage\"> <code>propertys(\"<code class=\"var\">path</code>\", \"<code class=\"var\">default</code>\")</code></div><div class=\"usage\"> <code>propertysop(\"<code class=\"var\">path</code>\", \"<code class=\"var\">default</code>\")</code></div><div class=\"usage\"> <code>propertysraw(\"<code class=\"var\">path</code>\", \"<code class=\"var\">default</code>\")</code></div><p>The <code>property</code>, <code>propertyf</code>, <code>propertyt</code>, <code>propertys</code>, <code>propertysop</code>, and <code>propertysraw</code>  functions are equivalent to the <a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a>, <a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a>, <a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a>, <a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a>, <a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a>, and <a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a> function but for evaluating <a href=\"https://www.sidefx.com/docs/houdini/props/\">render properties</a>.</p><p>The first argument is a path to a property on a node. Unlike their <code>ch*</code> counterparts, these functions take an extra <code class=\"var\">default</code> argument which the function returns if the property/parameter doesn\u2019t exist on the node.</p><p>For example, for an object where the <code>vm_pointscale</code> attribute exists, but the <code>vm_samplecovingexpansion</code> property doesn\u2019t exist, you can get a default value back using the <code>property()</code> function:</p><div class=\"codeblock\"><code class=\"codeline\">property(\"/obj/geo1/vm_pointscale\", 2.0) == 1</code><code class=\"codeline\">property(\"/obj/geo1/vm_samplecovingexpansion,\", 0.2) == 0.2</code></div><p>If you use the <code>ch()</code> function, it will silently fails and return <code>0</code> if the property doesn\u2019t exist:</p><div class=\"codeblock\"><code class=\"codeline\">ch(\"/obj/geo1/vm_pointscale\") == 1</code><code class=\"codeline\">ch(\"/obj/geo1/vm_samplecovingexpansion,\") == 0</code></div><p>See the equivalent <code>ch</code> function for more information on each variant.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ch\">ch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chf\">chf</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cht\">cht</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chs\">chs</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsop\">chsop</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/chsraw\">chsraw</a></div></body>",
    "propertyf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/propertyf\">propertyf</a></h1><p class=\"summary\">Evaluates a render property at a given frame.</p><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/property\">property</a>.</p></body>",
    "propertys": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/propertys\">propertys</a></h1><p class=\"summary\">Evaluates the string value of a render property at the current time.</p><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/property\">property</a>.</p></body>",
    "propertysop": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/propertysop\">propertysop</a></h1><p class=\"summary\">Evaluates a render property at the current time as a node path string.</p><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/property\">property</a>.</p></body>",
    "propertysraw": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/propertysraw\">propertysraw</a></h1><p class=\"summary\">Evaluates the raw (unexpanded) string value of a render property at the current time.</p><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/property\">property</a>.</p></body>",
    "propertyt": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/propertyt\">propertyt</a></h1><p class=\"summary\">Evaluates a render property at a given time.</p><p>See <a href=\"https://www.sidefx.com/docs/houdini/expressions/property\">property</a>.</p></body>",
    "pulse": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pulse\">pulse</a></h1><p class=\"summary\">Returns 1 when a value is within a certain range.</p><div class=\"usage\"> <code>pulse(<code class=\"var\">value</code>, <code class=\"var\">start</code>, <code class=\"var\">end</code>)</code></div><p>If the value is less than start or greater than end,\npulse returns a 0. Otherwise, it returns 1.</p><p>Frequently, start and end are frame numbers and val is based on\nthe current frame, <code>$F</code>. Using the modulus operator (<code>%</code>) you can\nset up a pulse that turns on and off repeatedly as the frame\nchanges. For example, to blink on for 5 frames and then off for\nfive frames repeated (i.e. return 1 for frames 0 to 4, then 0 for\nframes 5 to 9, then 1 for frames 10 to 14, etc.), use:</p><div class=\"codeblock\"><code class=\"codeline\">pulse($F % 10, 0, 4)</code></div></body>",
    "pythonexprf": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pythonexprf\">pythonexprf</a></h1><p class=\"summary\">Evaluates a Python expression, returning a float result.</p><div class=\"usage\"> <code>pythonexprf(<code class=\"var\">expression</code>)</code></div><p>If the expression evaluates to something other than a string,\nor if it raises an exception, this function returns 0.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pythonexprf(\"hou.frame()\")</code></div><p>Returns the current frame number.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/python\">python</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pythonexprs\">pythonexprs</a></div></body>",
    "pythonexprs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/pythonexprs\">pythonexprs</a></h1><p class=\"summary\">Evaluates a Python expression, returning a string result.</p><div class=\"usage\"> <code>pythonexprs(<code class=\"var\">expression</code>)</code></div><p>If the expression evaluates to something other than a string, this function \nreturns its string representation (i.e. the output from Python\u2019s <code>str()</code>\nfunction).</p><h2>Note</h2><p>If the expression generates an exception, this function\n    returns the string representation of the exception.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">pythonexprs(\"hou.node('/obj').children()\")</code></div><p>Returns the string representation of a tuple containing the <code>hou.ObjectNode</code>\n    objects in <code>/obj</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/commands/python\">python</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pythonexprf\">pythonexprf</a></div></body>",
    "qlinear": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/qlinear\">qlinear</a></h1><p class=\"summary\">Channel segment function: uses quaternions to interpolate.</p><div class=\"usage\"> <code>qlinear()</code></div><p>A channel expression function which uses quaternions to interpolate\nbetween the keyframed values. This function requires that it has two\nneighboring channels named appropriately. This means they should end\nwith x, y, and z, or be three consecutive numbers starting from 0 (such\nas 0, 1, 2, or 6, 7, 8).</p><p>Because the interpolation is done in quaternion space, the orientations\nwill blend smoothly with no gimbal lock or unexpected spins. However,\nthe rotation values may appear to jump suddenly. This is because\ndifferent rotation values can represent the same orientation.</p><p>Note in the graph editor a segment using this expression will show as a\ndashed straight line. This does not represent the actual intermediate\nchannel values, but does give an accurate visual feel for the behavior\nof the interpolation.</p></body>",
    "quattomatrix": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/quattomatrix\">quattomatrix</a></h1><p class=\"summary\">Converts quaternion to a 3\u00d73 rotation matrix.</p><div class=\"usage\"> <code>quattomatrix(<code class=\"var\">q</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matrixtoquat\">matrixtoquat</a></div></body>",
    "quintic": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/quintic\">quintic</a></h1><p class=\"summary\">Channel segment function: smoothly interpolates slopes and accelerations.</p><div class=\"usage\"> <code>quintic()</code></div></body>",
    "rad": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rad\">rad</a></h1><p class=\"summary\">Converts from degrees to radians.</p><div class=\"usage\"> <code>rad(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">rad (180)=3.1415926</code></div></body>",
    "rand": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rand\">rand</a></h1><p class=\"summary\">Returns a pseudo-random number from 0 to 1.</p><div class=\"usage\"> <code>rand(<code class=\"var\">value</code>)</code></div><p>Using the same <code class=\"var\">value</code> always gives the same result. To vary the\nresult, base the <code class=\"var\">value</code> on a changing number (usually the current\nframe <code>$F</code>).</p><div class=\"codeblock\"><code class=\"codeline\">rand($F)</code></div><p>When you're randomizing component values (such as X, Y, and Z),\nchange the <code class=\"var\">value</code> for each component so they don\u2019t all get the\nsame number:</p><div class=\"argument\"><code>X</code></div><p><code>rand($F)</code></p><div class=\"argument\"><code>Y</code></div><p><code>rand($F * 0.1)</code></p><div class=\"argument\"><code>Z</code></div><p><code>rand($F * 0.01)</code></p><h2>Note</h2><p>It is a good idea to use non-integer values as the argument to\n    rand().</p></body>",
    "raw": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/raw\">raw</a></h1><p class=\"summary\">Channel segment function.</p><div class=\"usage\"> <code>raw()</code></div></body>",
    "realuv": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/realuv\">realuv</a></h1><p class=\"summary\">Converts unit UV to real UV.</p><div class=\"usage\"> <code>realuv(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">uv_unit</code>, <code class=\"var\">D_U|D_V</code>)</code></div><p>The unit value is defined in the <code>[0,1]</code> interval. The\nreal value is defined in the valid interval of the primitive\u2019s domain if\nthe primitive is a spline type. If the primitive is a polygon or a mesh,\nthe size of its domain is given by the number of vertices, or rows or\ncolumns respectively. If the primitive is a polygon or a curve, D_U and\nD_V are irrelevant.</p><h2>Note</h2><p>the result is undefined if the primitive is neither a face nor a\n    hull.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "relpath": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/relpath\">relpath</a></h1><p class=\"summary\">Returns the relative path of a file.</p><p>Returns the supplied path converted to a relative path, expressed as\nrelative to Houdini\u2019s current working directory. The file does not need to\nexist.</p><div class=\"usage\"> <code>relpath(<code class=\"var\">abspath</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/abspath\">abspath</a></div></body>",
    "repeat": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/repeat\">repeat</a></h1><p class=\"summary\">Channel segment function: repeats animation from previous frames.</p><div class=\"usage\"> <code>repeat(<code class=\"var\">f1</code>, <code class=\"var\">f2</code>)</code></div><p>Repeats the animation from frames <code class=\"var\">f1</code> to <code class=\"var\">f2</code>.</p><p>If you wish to repeat the animation cumulatively,\nuse the <a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a> function instead.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/repeatt\">repeatt</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a></div></body>",
    "repeatt": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/repeatt\">repeatt</a></h1><p class=\"summary\">Channel segment function: repeats animation from previous frames.</p><div class=\"usage\"> <code>repeatt(<code class=\"var\">t1</code>, <code class=\"var\">t2</code>)</code></div><p>Repeats the animation from <code class=\"var\">t1</code> seconds to <code class=\"var\">t2</code> seconds.</p><p>If you wish to repeat the animation cumulatively, use\nthe <a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a> function instead.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/repeat\">repeat</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cycle\">cycle</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cyclet\">cyclet</a></div></body>",
    "res": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/res\">res</a></h1><p class=\"summary\">Returns the natural resolution of the image in a compositing node.</p><div class=\"usage\"> <code>res(<code class=\"var\">compositing_node</code>, <code class=\"var\">res_type</code>)</code></div><p><code class=\"var\">res_type</code> is either D_XRES or D_YRES.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">res(\"/img/img1/color1\", D_XRES)</code></div></body>",
    "rgb": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rgb\">rgb</a></h1><p class=\"summary\">Converts HSV values to RGB components.</p><div class=\"usage\"> <code>rgb(<code class=\"var\">hue</code>, <code class=\"var\">saturation</code>, <code class=\"var\">value</code>, <code class=\"var\">component</code>)</code></div><p>The <code class=\"var\">component</code> should be one of <code>\"r\"</code>, <code>\"g\"</code> or <code>\"b\"</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">rgb(270, .5, 1, \"b\")</code></div></body>",
    "rindex": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rindex\">rindex</a></h1><p class=\"summary\">Finds the last occurrence of a pattern in a string.</p><div class=\"usage\"> <code>rindex(<code class=\"var\">source</code>, <code class=\"var\">pattern</code>)</code></div><p>Returns the number of characters before <code class=\"var\">pattern</code> occurs in\n<code class=\"var\">source</code>. Returns -1 if the pattern is not found.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `rindex(\"Testing rindex\", \"sting\")`</code></div><p>Returns 2.</p><div class=\"codeblock\"><code class=\"codeline\">echo `rindex(\"Testing rindex\", \"i\")`</code></div><p>Returns 8.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/index\">index</a></div></body>",
    "rint": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rint\">rint</a></h1><p class=\"summary\">Rounds to the nearest integer.</p><div class=\"usage\"> <code>rint()</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></div></body>",
    "rotate": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotate\">rotate</a></h1><p class=\"summary\">Returns a 4\u00d74 rotation matrix from an axis and angle.</p><div class=\"usage\"> <code>rotate(<code class=\"var\">angle</code>, <code class=\"var\">axis</code>)</code></div><p><code class=\"var\">angle</code> is in degrees.</p><p><code class=\"var\">axis</code> is one of <code>\"x\"</code>, <code>\"y\"</code>, or <code>\"z\"</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotaxis\">rotaxis</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/scale\">scale</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/translate\">translate</a></div></body>",
    "rotaxis": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotaxis\">rotaxis</a></h1><p class=\"summary\">Returns a 4\u00d74 rotation matrix from an angle and a vector.</p><div class=\"usage\"> <code>rotaxis(<code class=\"var\">angle</code>, <code class=\"var\">axisv</code>)</code></div><p><code class=\"var\">angle</code> is in degrees.</p><p>The rotation is taken from the angle around the axis specified by\nthe vector <code class=\"var\">axisv</code>.\nThe vector is converted to a 3 vector for the purposes of this computation.</p><p>Houdini\u2019s expression language uses row vectors. Rotation matrices\nshould appear on the right-hand side of vector-matrix multiplications.</p><p>For example, to rotate the vector <code>[1, 2, 3]</code> by 10 degrees around the\nY axis:</p><div class=\"codeblock\"><code class=\"codeline\">vector(\"[1, 2, 3]\") * rotaxis(10, \"[0, 1, 0]\")</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotate\">rotate</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/scale\">scale</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/translate\">translate</a></div></body>",
    "round": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></h1><p class=\"summary\">Rounds a number to the nearest integer.</p><div class=\"usage\"> <code>round()</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">round(2.501)=3</code></div><div class=\"codeblock\"><code class=\"codeline\">round(-2.501)=-3</code></div><div class=\"codeblock\"><code class=\"codeline\">round(0.2)=0</code></div><div class=\"codeblock\"><code class=\"codeline\">round(-.2)=0</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/trunc\">trunc</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/int\">int</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ceil\">ceil</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/floor\">floor</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/frac\">frac</a></div></body>",
    "run": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/run\">run</a></h1><p class=\"summary\">Runs a string as an HScript command and returns the command\u2019s output.</p><div class=\"usage\"> <code>run(<code class=\"var\">command</code>)</code></div><p>This is a short form for the <a href=\"https://www.sidefx.com/docs/houdini/expressions/execute\">execute</a> function.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/execute\">execute</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rune\">rune</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/runb\">runb</a></div></body>",
    "runb": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/runb\">runb</a></h1><p class=\"summary\">Runs a string as an HScript command and returns the\ncommand and error output.</p><div class=\"usage\"> <code>runb(<code class=\"var\">command</code>)</code></div><p>This is a short form for the <a href=\"https://www.sidefx.com/docs/houdini/expressions/executeb\">executeb</a> function.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/executeb\">executeb</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/run\">run</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rune\">rune</a></div></body>",
    "rune": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/rune\">rune</a></h1><p class=\"summary\">Runs a string as an HScript command and returns any error output.</p><div class=\"usage\"> <code>rune(<code class=\"var\">command</code>)</code></div><p>This is a short form for the <a href=\"https://www.sidefx.com/docs/houdini/expressions/executee\">executee</a> function.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/executee\">executee</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/run\">run</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/runb\">runb</a></div></body>",
    "scale": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/scale\">scale</a></h1><p class=\"summary\">Takes three scaling values and returns a scale matrix.</p><div class=\"usage\"> <code>scale(<code class=\"var\">sx</code>, <code class=\"var\">sy</code>, <code class=\"var\">sz</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotate\">rotate</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotaxis\">rotaxis</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/translate\">translate</a></div></body>",
    "scalefrommks": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/scalefrommks\">scalefrommks</a></h1><p class=\"summary\">Returns the scale factor converting from MKS units to the Houdini units.</p><p><code>scalefrommks</code> will return the conversion factor to convert from\nmeter/kilogram/second units into the current Houdini units.  The provided\nstring provides the dimension of the units to convert as token/exponent pairs.\nValid tokens are <code>m</code> for length, <code>kg</code> for mass, and <code>s</code> for time.</p><div class=\"usage\"> <code>scalefrommks(<code class=\"var\">dimensions</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">scalefrommks (\"m2\")</code></div></body>",
    "scaletomks": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/scaletomks\">scaletomks</a></h1><p class=\"summary\">Returns the scale factor converting to MKS units from the Houdini units.</p><p><code>scaletomks</code> will return the conversion factor to convert to\nmeter/kilogram/second units from the current Houdini units.  The provided\nstring provides the dimension of the units to convert as token/exponent pairs.\nValid tokens are <code>m</code> for length, <code>kg</code> for mass, and <code>s</code> for time.</p><div class=\"usage\"> <code>scaletomks(<code class=\"var\">dimensions</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">scaletomks (\"m2\")</code></div></body>",
    "seampoints": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/seampoints\">seampoints</a></h1><p class=\"summary\">Lists all seam points in a surface node.</p><div class=\"usage\"> <code>seampoints(<code class=\"var\">surface_node</code>, <code class=\"var\">whichside</code>)</code></div><p>This function returns a string containing an ordered list of all seam\npoints in the specified surface node. Seam points are identified by seam attributes on the points.</p><p>The <code class=\"var\">whichside</code> argument specifies which side of the seams we are\ninterested in. The value can be either zero or one.</p><p>Calling this function once with\na whichside parameter of zero, and once with a whichside parameter of\none, will provide two lists of points where tying each point to the\ncorresponding point in the other list fully describes all seams on the\ngeometry.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointlist\">pointlist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointpattern\">pointpattern</a></div></body>",
    "seqanim": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqanim\">seqanim</a></h1><p class=\"summary\">Returns 1 if a specified compositing node has an animated sequence.</p><div class=\"usage\"> <code>seqanim(<code class=\"var\">compositing_node</code>)</code></div><p>Returns 0 if <code class=\"var\">compositing_node</code> has a single image.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqstart\">seqstart</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqend\">seqend</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqlength\">seqlength</a></div></body>",
    "seqend": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqend\">seqend</a></h1><p class=\"summary\">Returns the end frame of a compositing node\u2019s image sequence.</p><div class=\"usage\"> <code>seqend(<code class=\"var\">compositing_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqanim\">seqanim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqstart\">seqstart</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqlength\">seqlength</a></div></body>",
    "seqlength": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqlength\">seqlength</a></h1><p class=\"summary\">Returns the number of frames in a compositing node\u2019s image sequence.</p><div class=\"usage\"> <code>seqlength(<code class=\"var\">compositing_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqanim\">seqanim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqstart\">seqstart</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqend\">seqend</a></div></body>",
    "seqstart": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqstart\">seqstart</a></h1><p class=\"summary\">Returns the start frame of a compositing node\u2019s image sequence.</p><div class=\"usage\"> <code>seqstart(<code class=\"var\">compositing_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqanim\">seqanim</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqend\">seqend</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/seqlength\">seqlength</a></div></body>",
    "shopstring": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/shopstring\">shopstring</a></h1><p class=\"summary\">Returns the shader string generated by a shader.</p><div class=\"usage\"> <code>shopstring(<code class=\"var\">shop_path</code>, <code class=\"var\">render_type</code>)</code></div><p>The <code class=\"var\">render_type</code> is a string representing the renderer\n(\"RIB\" or \"VMantra\" for example). If this string is empty, then the\ndefault render type for the shader is used.</p></body>",
    "sign": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/sign\">sign</a></h1><p class=\"summary\">Returns -1, 0, or 1 depending on the sign of the argument.</p><div class=\"usage\"> <code>sign(<code class=\"var\">value</code>)</code></div><p>Returns 1 if <code class=\"var\">value</code> is positive, -1 if <code class=\"var\">value</code> is negative,\nand 0 if the <code class=\"var\">value</code> is zero.</p></body>",
    "sin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/sin\">sin</a></h1><p class=\"summary\">Returns the sine of the argument.</p><div class=\"usage\"> <code>sin(<code class=\"var\">degrees</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">sin (60)=0.866025</code></div></body>",
    "sinh": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/sinh\">sinh</a></h1><p class=\"summary\">Returns the hyperbolic sine of the argument.</p><div class=\"usage\"> <code>sinh(<code class=\"var\">number</code>)</code></div></body>",
    "smooth": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/smooth\">smooth</a></h1><p class=\"summary\">Takes a value and range and returns a smooth interpolation\nbetween 0 and 1.</p><div class=\"usage\"> <code>smooth(<code class=\"var\">value</code>, <code class=\"var\">minimum</code>, <code class=\"var\">maximum</code>)</code></div><p>When <code class=\"var\">value</code> is less than <code class=\"var\">minimum</code>, the return value is 0.\nIf <code class=\"var\">value</code> is greater than <code class=\"var\">maximum</code>, the return value is 1.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">smooth ($F, 12, 55)</code></div><p>This example will generate an ease-type curve between values 0 and 1,\n    starting at frame 12 and ending at frame 55. Dig it!</p></body>",
    "snoise": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/snoise\">snoise</a></h1><p class=\"summary\">Generates sparse convolution 3D noise.</p><div class=\"usage\"> <code>snoise(<code class=\"var\">X</code>, <code class=\"var\">Y</code>, <code class=\"var\">Z</code>)</code></div><p>The noise is generated on points scattered in space and interpolated\nbetween the points in the voronoi decomposition.  The output of the\nnoise function is approximately -1.15 to 1.15.</p><div class=\"codeblock\"><code class=\"codeline\">snoise($TX, $TY, $TZ)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/noise\">noise</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/turb\">turb</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/sturb\">sturb</a></div></body>",
    "spknot": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/spknot\">spknot</a></h1><p class=\"summary\">Returns a knot value on a spline curve or surface.</p><div class=\"usage\"> <code>spknot(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">knot_index</code>, D_U|D_V)</code></div><p>This spline-specific function returns the floating-point knot value,\ngiven the knot index in the U or V knot sequence. The first valid knot\nindex is 0. If the primitive is a Bezier curve or surface, the values\nreturned are those of its breakpoints.</p><p>If the primitive is a curve, the fourth argument (<code>D_U</code> or <code>D_V</code>)\nis irrelevant.</p></body>",
    "spline": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/spline\">spline</a></h1><p class=\"summary\">Channel segment function: fits a curve to the keyframes.</p><div class=\"usage\"> <code>spline()</code></div><p>A channel expression function which runs a spline through the timemarks\nof the consecutive channel segments that use that function. That is,\nthis spline interpolates the channel values at the keyframes of the\nsegments.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/bezier\">bezier</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/cubic\">cubic</a></div></body>",
    "sqrt": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/sqrt\">sqrt</a></h1><p class=\"summary\">Returns the square root of the argument.</p><div class=\"usage\"> <code>sqrt(<code class=\"var\">number</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">sqrt (144)=12</code></div></body>",
    "stamp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/stamp\">stamp</a></h1><p class=\"summary\">Returns a copy stamping floating point value.</p><div class=\"usage\"> <code>stamp(<code class=\"var\">scope</code>, <code class=\"var\">token</code>, <code class=\"var\">value</code>)</code></div><p>Retrieves a stamping variable, usually from a downstream\n<a href=\"https://www.sidefx.com/docs/houdini/nodes/sop/copy\">Copy node</a>. See <a href=\"https://www.sidefx.com/docs/houdini/copy/stamping\">copy stamping</a>.</p><p>This function retrieves floating-point number values. For string\nvalues, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/stamps\">stamps</a>.</p><div class=\"related\"><code class=\"var\">scope</code>: the path of the node to get the value from.</div><div class=\"related\"><code class=\"var\">token</code>: the name of the variable to retrieve.</div><div class=\"related\"><code class=\"var\">value</code>: the default value to use if <code class=\"var\">token</code> does not exist.</div><p>Examples of stamping operators\ninclude: Cache, Copy, and LSystem surface nodes, and the\nCopy channel node.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">stamp(\"../copy1\", \"sides\", 5)</code></div><div class=\"codeblock\"><code class=\"codeline\">stamp(\"..\", \"fuzzy\", 0.5)</code></div></body>",
    "stamps": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/stamps\">stamps</a></h1><p class=\"summary\">Returns a copy stamping string value.</p><div class=\"usage\"> <code>stamps(<code class=\"var\">stamp_op_path</code>, <code class=\"var\">token</code>, <code class=\"var\">value</code>)</code></div><p>Retrieves a stamping variable. See <a href=\"https://www.sidefx.com/docs/houdini/copy/stamping\">copy stamping</a>.</p><h2>Note</h2><p>This expression does not work with the Copy SOP.</p><p>This function retrieves string values. For floating-point number\nvalues, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/stamp\">stamp</a>.</p><div class=\"related\"><code class=\"var\">scope</code>: the path of the node to get the value from.</div><div class=\"related\"><code class=\"var\">token</code>: the name of the variable to retrieve.</div><div class=\"related\"><code class=\"var\">value</code>: the default string to use if <code class=\"var\">token</code> does not exist.</div><p>Returns the string value associated with the parameter named 'token'\nset in 'scope'. 'scope' is an operator path where the value is to be\nlooked up from. If the token has not been set, then 'value' is returned.\nStamping operators set these named tokens parameters recursively on\nthemselves and all ancestor parents.</p><p>Examples of string stamping operators include the Apply Relationship\nDOP, and the Copy Data DOP.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">stamps(\"../copydata1\", \"name\", \"defaultname\")</code></div></body>",
    "strcasecmp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasecmp\">strcasecmp</a></h1><p class=\"summary\">Compares two strings, ignoring case.</p><div class=\"usage\"> <code>strcasecmp(<code class=\"var\">s1</code>, <code class=\"var\">s2</code>)</code></div><div class=\"related\">Returns <code>-1</code> if <code class=\"var\">s1</code> comes before <code class=\"var\">s2</code> according to ASCII.</div><div class=\"related\">Returns <code>1</code> if <code class=\"var\">s1</code> comes after <code class=\"var\">s2</code> according to ASCII.</div><div class=\"related\">Returns <code>0</code> if <code class=\"var\">s1</code> is equal to <code class=\"var\">s2</code>.</div><p>This function is case-insensitive. For case-sensitive comparison,\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/strcmp\">strcmp</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcmp\">strcmp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strmatch\">strmatch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasematch\">strcasematch</a></div></body>",
    "strcasematch": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasematch\">strcasematch</a></h1><p class=\"summary\">Returns 1 if a string matches a pattern, ignoring case.</p><div class=\"usage\"> <code>strcasematch(<code class=\"var\">pattern</code>, <code class=\"var\">s</code>)</code></div><p>This function is case-insensitive. For case-sensitive matches,\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/strmatch\">strmatch</a>.</p><p></p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"FOO*\", \"foobar\")</code></div><p>Returns 1.</p><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"?baR\", \"fred\")</code></div><p>Returns 0.</p><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"FoO*,bAr*, \"bar\")</code></div><p>Returns 1.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcmp\">strcmp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasecmp\">strcasecmp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasematch\">strcasematch</a></div></body>",
    "strcat": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcat\">strcat</a></h1><p class=\"summary\">Returns the concatenation of two strings.</p><div class=\"usage\"> <code>strcat(<code class=\"var\">s1</code>, <code class=\"var\">s2</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">strcat(\"Current motion file is \", $MOTNAME)</code></div><p>Returns \"Current motion file is job1.bmot\"</p></body>",
    "strcmp": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcmp\">strcmp</a></h1><p class=\"summary\">Compares two strings.</p><div class=\"usage\"> <code>strcmp(<code class=\"var\">s1</code>, <code class=\"var\">s2</code>)</code></div><div class=\"related\">Returns <code>-1</code> if <code class=\"var\">s1</code> comes before <code class=\"var\">s2</code> according to ASCII.</div><div class=\"related\">Returns <code>1</code> if <code class=\"var\">s1</code> comes after <code class=\"var\">s2</code> according to ASCII.</div><div class=\"related\">Returns <code>0</code> if <code class=\"var\">s1</code> is equal to <code class=\"var\">s2</code>.</div><p>This function is case-sensitive. For case-insensitive comparison,\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasecmp\">strcasecmp</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">strcmp(\"abc\", \"xyz\") = -1</code></div><div class=\"codeblock\"><code class=\"codeline\">strcmp(\"A\", \"a\") = -1</code></div><div class=\"codeblock\"><code class=\"codeline\">strcmp(\"xyz, \"abc\") = 1</code></div><div class=\"codeblock\"><code class=\"codeline\">strcmp(\"abc\", \"abc\") = 0</code></div></body>",
    "strdup": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strdup\">strdup</a></h1><p class=\"summary\">Duplicates a string.</p><div class=\"usage\"> <code>strdup(<code class=\"var\">count</code>, <code class=\"var\">s2</code>)</code></div><p>Returns <code class=\"var\">s2</code> repeated <code class=\"var\">count</code> times.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">strdup(3, \"abc\") = \"abcabcabc\"</code></div><div class=\"codeblock\"><code class=\"codeline\">strdup(0, \"Foobar\") = \"\"</code></div><div class=\"codeblock\"><code class=\"codeline\">strdup(3, \"/(120)[B]\") = \"/(120)[B]/(120)[B]/(120)[B]\"</code></div></body>",
    "stripmatrix": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/stripmatrix\">stripmatrix</a></h1><p class=\"summary\">Strips non-essential characters from the string representation of\na matrix or vector.</p><div class=\"usage\"> <code>stripmatrix(<code class=\"var\">mat</code>)</code></div><p>This is useful when you\nwant to interpret the values of the matrix (i.e. to pass to a VEX\nfunction).</p><p>Returns a string containing the floating point numbers (and only the\nnumbers) which make up the matrix.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">stripmatrix(identity(3)) = \"1 0 0 0 1 0 0 0 1\"</code></div><div class=\"codeblock\"><code class=\"codeline\">stripmatrix(vector3(1,2,3)) = \"1 2 3\"</code></div></body>",
    "strlen": "<body><p class=\"summary\">Returns the number of characters in a string.</p><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strlen\">strlen</a></h1><div class=\"usage\"> <code>strlen()</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">strlen(\"abcde\")=5</code></div></body>",
    "strmatch": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strmatch\">strmatch</a></h1><p class=\"summary\">Returns 1 if a string matches a pattern, including case.</p><div class=\"usage\"> <code>strmatch(<code class=\"var\">pattern</code>, <code class=\"var\">s</code>)</code></div><p>This function is case-sensitive. For case-insensitive matches,\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasematch\">strcasematch</a>.</p><h2>Notes</h2><div class=\"related\">Returns 1 if any patterns in the <code class=\"var\">pattern</code> string matches string <code class=\"var\">s</code>,\n  or 0 if no patterns match.</div><div class=\"related\">In order to match, a pattern must match the <code class=\"var\">s</code> string\n  <em>from beginning to end</em>. Use wildcards (<code>*</code>) to match substrings,\n  e.g.</div><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"bar\", \"foobarbaz\") = 0</code><code class=\"codeline\">  strmatch(\"*bar*\", \"foobarbaz\") = 1</code></div><div class=\"related\"><code class=\"var\">pattern</code> is a space-separated list of one or more patterns.\n  <strong>This can cause unintuitive behavior of this function</strong>.\n  For example:</div><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"foo bar\", \"foo bar\")</code></div><p>\u2026<strong>will return 0</strong>, because the first argument consists of <em>two</em>\n  patterns, <code>foo</code> and <code>bar</code>, and neither of those patterns match\n  <code>foo bar</code> (since the pattern must match from beginning to end).</p><p>Similarly,</p><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"foo bar\", \"foo\")</code></div><p>\u2026will return 1, because the string matches the first of the\n  two arguments in the pattern (<code>foo</code> and <code>bar</code>).</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"foo*\", \"foobar\") = 1</code></div><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"?bar\", \"fred\") = 0</code></div><div class=\"codeblock\"><code class=\"codeline\">strmatch(\"foo*,bar*\", \"bar\") = 1</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcmp\">strcmp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasecmp\">strcasecmp</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/strcasematch\">strcasematch</a></div></body>",
    "strreplace": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/strreplace\">strreplace</a></h1><p class=\"summary\">Replaces substrings with a new string.</p><div class=\"usage\"> <code>strreplace(<code class=\"var\">s</code>, <code class=\"var\">old</code>, <code class=\"var\">new</code>)</code></div><p>Returns a copy of <code class=\"var\">s</code> with any occurances of the\n<code class=\"var\">old</code> string replaces with the <code class=\"var\">new</code> string.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `strreplace(\"/project/project.hip\", \"project\", \"char01\")`</code></div><p>Returns <code>/char01/char01.hip</code>.</p></body>",
    "sturb": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/sturb\">sturb</a></h1><p class=\"summary\">Generates spatially coherent 3D noise based on sparse convolution.</p><div class=\"usage\"> <code>sturb(<code class=\"var\">X</code>, <code class=\"var\">Y</code>, <code class=\"var\">Z</code>, <code class=\"var\">depth</code>)</code></div><p>Spatially coherent noise gives random numbers which are close\nto each other when the X, Y, Z inputs are close to each other.</p><p><code class=\"var\">depth</code> is the amount of fractalization of the noise.</p><p>This is very similar to <a href=\"https://www.sidefx.com/docs/houdini/expressions/turb\">turb</a>, except instead of finding noise values\non a fixed lattice and interpolating, this function finds noise\nvalues on points scattered in space and interpolated according\nto the Voronoi decomposition.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/turb\">turb</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/noise\">noise</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/snoise\">snoise</a></div></body>",
    "substr": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/substr\">substr</a></h1><p class=\"summary\">Returns a substring of a string.</p><div class=\"usage\"> <code>substr(<code class=\"var\">s</code>, <code class=\"var\">start</code>, <code class=\"var\">length</code>)</code></div><p>Returns the characters of <code class=\"var\">s</code> between the <code class=\"var\">start</code>\nposition and the <code class=\"var\">start</code> + <code class=\"var\">length</code> position.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">echo `substr(\"STRING\", 3, 1)`</code></div><p>Returns <code>I</code>.</p><div class=\"codeblock\"><code class=\"codeline\">echo `substr(\"STRING\", 0, 3)`</code></div><p>Returns <code>STR</code>.</p><div class=\"codeblock\"><code class=\"codeline\">echo `substr(\"STRING\", 3, 2)`</code></div><p>Returns <code>IN</code>.</p></body>",
    "surflen": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/surflen\">surflen</a></h1><p class=\"summary\">Returns the length of the 3D curve between two points on a surface.</p><div class=\"usage\"> `surflen(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">ustart</code>, <code class=\"var\">vstart</code>, <code class=\"var\">ustop</code>,</div><p><code class=\"var\">vstop</code>)`</p><p>Given a surface and two parametric points in its domain (\n<code>[ustart,vstart]</code> and <code>[ustop,vstop]</code> ), surflen computes the length of the\n3D curve that stretches between the two points. This curve is the 3D\nimage of the line in the surface domain, whose end-points are\n<code>[ustart,vstart]</code> and <code>[ustop,vstop]</code>. If either u or v is kept constant,\nthe 3D curve coincides with an isoparm.</p><p>All four uv numbers are unit values, defined in the <code>[0,1]</code> interval.</p><h2>Note</h2><p>the primitive must be either a NURBS surface or a Bezier surface. A\n    polygonal mesh can be simulated by a bi-linear Bezier surface (u and\n    v order 2).</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">surflen(\"/obj/geo1/grid1\", 12, 0, 1, 0.2, 0.8)</code></div><p>Computes the length of the curve on surface #12, defined\n    parametrically by the surface domain points <code>[0,1]</code> and <code>[0.2, 0.8]</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/arclen\">arclen</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/normal\">normal</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/curvature\">curvature</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "system": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/system\">system</a></h1><p class=\"summary\">Runs a system command line and returns the output.</p><p>This will transform all linefeeds and carriage returns into spaces.\nTo get the raw output, use systemRAW.</p><div class=\"usage\"> <code>system(<code class=\"var\">command_string</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">system(\"finger\")</code></div></body>",
    "systemES": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/systemES\">systemES</a></h1><p class=\"summary\">Runs a system command line and returns the exit status.</p><div class=\"usage\"> <code>systemES(<code class=\"var\">command_string</code>)</code></div><p>This function returns the <em>exit code</em> of the command. To get\nthe <em>output</em> of the command instead, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/system\">system</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">systemES(\"test -r $HOME/houdini/123.cmd\") = 0</code></div></body>",
    "systemRAW": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/systemRAW\">systemRAW</a></h1><p class=\"summary\">Runs a system command line and returns the output with no processing.</p><p>Unlike the system command, this does not transform linefeeds or\ncarriage returns into spaces.</p><div class=\"usage\"> <code>systemRAW(<code class=\"var\">command_string</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">systemRAW(\"cat myfile.txt\")</code></div></body>",
    "tan": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/tan\">tan</a></h1><p class=\"summary\">Returns the tangent of the argument.</p><div class=\"usage\"> <code>tan(<code class=\"var\">degrees</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">tan (60)=1.73205</code></div></body>",
    "tanh": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/tanh\">tanh</a></h1><p class=\"summary\">Returns the hyperbolic tangent of the argument.</p><div class=\"usage\"> <code>tanh(<code class=\"var\">number</code>)</code></div></body>",
    "tex": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/tex\">tex</a></h1><p class=\"summary\">Returns the interpolated color of a point on an on-disk texture map.</p><div class=\"usage\"> <code>tex(<code class=\"var\">filename</code>, <code class=\"var\">U</code>, <code class=\"var\">V</code>, <code class=\"var\">color_type</code>)</code></div><p>Textures can be 1, 3 or 4 channel images containing 8-bit, 16-bit or\nfloating point data.</p><p><code class=\"var\">color_type</code> can be one of:</p><div class=\"related\">r, R, or D_CR = Red channel</div><div class=\"related\">g, G, or D_CG = Green channel</div><div class=\"related\">b, B, or D_CB = Blue channel</div><div class=\"related\">a, A, or D_CA = Alpha channel</div><div class=\"related\">h, H, or D_CHUE = Color hue</div><div class=\"related\">s, S, or D_CSAT = Color saturation</div><div class=\"related\">v, V, or D_CVAL = Color value</div><div class=\"related\">l, L, or D_CLUM = Color luminance</div><p>This function will interpolate colors smoothly between pixels.\nFor the non-interpolated version, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/texni\">texni</a>.</p><p>When the color component asked for doesn\u2019t match\nthe format of the image, some default behaviour will be taken.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">tex(\"Mandril.pic\", $BBX, $BBY, r).</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/texni\">texni</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pic\">pic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/picni\">picni</a></div></body>",
    "texni": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/texni\">texni</a></h1><p class=\"summary\">Returns the non-interpolated color of a point on an on-disk texture map.</p><div class=\"usage\"> <code>texni(<code class=\"var\">diskfile</code>, <code class=\"var\">U</code>, <code class=\"var\">V</code>, <code class=\"var\">color_type</code>)</code></div><p>Textures can be 1, 3 or 4 channel images containing 8-bit, 16-bit or\nfloating point data.</p><p><code class=\"var\">color_type</code> can be one of:</p><div class=\"related\">r, R, or D_CR = Red channel</div><div class=\"related\">g, G, or D_CG = Green channel</div><div class=\"related\">b, B, or D_CB = Blue channel</div><div class=\"related\">a, A, or D_CA = Alpha channel</div><div class=\"related\">h, H, or D_CHUE = Color hue</div><div class=\"related\">s, S, or D_CSAT = Color saturation</div><div class=\"related\">v, V, or D_CVAL = Color value</div><div class=\"related\">l, L, or D_CLUM = Color luminance</div><p>This function will <em>not</em> interpolate colors between pixels.\nFor the interpolated version, use <a href=\"https://www.sidefx.com/docs/houdini/expressions/tex\">tex</a>.</p><p>When the color component asked for doesn\u2019t match\nthe format of the image, some default behaviour will be taken.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">texni(\"Mandril.pic\", $BBX, $BBY, r).</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/tex\">tex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pic\">pic</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/picni\">picni</a></div></body>",
    "tolower": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/tolower\">tolower</a></h1><p class=\"summary\">Returns the all-lowercase version of a string.</p><div class=\"usage\"> <code>tolower(<code class=\"var\">s</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/toupper\">toupper</a></div></body>",
    "toupper": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/toupper\">toupper</a></h1><p class=\"summary\">Returns the all-uppercase version of a string.</p><div class=\"usage\"> <code>toupper(<code class=\"var\">s</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/tolower\">tolower</a></div></body>",
    "translate": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/translate\">translate</a></h1><p class=\"summary\">Takes X, Y, and Z translation values and returns a translation matrix.</p><div class=\"usage\"> <code>translate(<code class=\"var\">tx</code>, <code class=\"var\">ty</code>, <code class=\"var\">tz</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotate\">rotate</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/rotaxis\">rotaxis</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/scale\">scale</a></div></body>",
    "transpose": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/transpose\">transpose</a></h1><p class=\"summary\">Transposes a matrix.</p><div class=\"usage\"> <code>transpose(<code class=\"var\">mat</code>)</code></div></body>",
    "trunc": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/trunc\">trunc</a></h1><p class=\"summary\">Converts a number to an integer by truncating any fractional part, rounding towards 0.</p><div class=\"usage\"> <code>trunc(<code class=\"var\">number</code>)</code></div><p>The number is rounded toward 0. That is, for positive numbers,\nthe largest integer less than the number will be returned.\nFor negative numbers, the smallest integer greater than the number\nwill be returned.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">trunc(2.6)=2</code></div><div class=\"codeblock\"><code class=\"codeline\">trunc(-2.6)=-2</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/int\">int</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/floor\">floor</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/ceil\">ceil</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/round\">round</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/frac\">frac</a></div></body>",
    "turb": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/turb\">turb</a></h1><p class=\"summary\">Generates spatially coherent 3D noise.</p><div class=\"usage\"> <code>turb(<code class=\"var\">X</code>, <code class=\"var\">Y</code>, <code class=\"var\">Z</code>, <code class=\"var\">depth</code>)</code></div><p>Spatially coherent noise gives random numbers which are close\nto each other when the X, Y, Z inputs are close to each other.</p><p><code class=\"var\">depth</code> is the amount of fractalization done to the noise.</p><p>The noise is calculated on a unit-spaced lattice.  This means the\nnoise will be independent between points one unit distance apart.  You\ncan scale the inputs to achieve different frequencies.</p><p>The range is usually within -1 to 1, but can exceed it depending on\nthe depth.  The maximum range is -2 to 2 for high depths.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/sturb\">sturb</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/noise\">noise</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/snoise\">snoise</a></div></body>",
    "uniqueval": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/uniqueval\">uniqueval</a></h1><p class=\"summary\">Returns a unique value of an integer attribute.</p><div class=\"usage\"> <code>uniqueval(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>, <code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">uniqueval(\"/obj/geo1/facet1\", D_PRIMITIVE, \"piece\", 0)</code></div><p>Returns the first unique integer value associated with the primitive\n    attribute <code>piece</code> in the facet1 surface node in geo1.</p></body>",
    "uniquevals": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/uniquevals\">uniquevals</a></h1><p class=\"summary\">Returns a unique value of a string attribute.</p><div class=\"usage\"> <code>uniquevals(<code class=\"var\">surface_node</code>, <code class=\"var\">class</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>The <code class=\"var\">class</code> can be one of <code>D_VERTEX</code>, <code>D_POINT</code>, <code>D_PRIMITIVE</code>, or <code>D_DETAIL</code> for the corresponding attribute class.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">uniquevals(\"/obj/geo1/facet1\", D_PRIMITIVE, \"name\", 0)</code></div><p>Returns the first unique string value associated with the primitive\n    attribute \"name\" in the facet1 surface node in geo1.</p></body>",
    "unituv": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></h1><p class=\"summary\">Converts real UV to unit UV.</p><div class=\"usage\"> <code>unituv(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>, <code class=\"var\">uv_real</code>, <code class=\"var\">D_U|D_V</code>)</code></div><p>The unit value is defined in the <code>[0,1]</code> interval. The\nreal value is defined in the valid interval of the primitive\u2019s domain if\nthe primitive is a spline type. If the primitive is a polygon or a mesh,\nthe size of its domain is given by the number of vertices, or rows or\ncolumns respectively. If the primitive is a polygon or a curve, D_U and\nD_V are irrelevant.</p><h2>Note</h2><p>the result is undefined if the primitive is neither a face nor a\n    hull.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/realuv\">realuv</a></div></body>",
    "uvdist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/uvdist\">uvdist</a></h1><p class=\"summary\">Returns the distance between parameteric locations on two primitives.</p><div class=\"usage\"> `uvdist(<code class=\"var\">surface_node</code>, <code class=\"var\">prim1_num</code>, <code class=\"var\">u1</code>, <code class=\"var\">v1</code>, <code class=\"var\">surface_node</code>,</div><p><code class=\"var\">prim2_num</code>, <code class=\"var\">u2</code>, <code class=\"var\">v2</code>)`</p><p>Valid u and v values are between 0 and 1.</p><p>Any primitive type is allowed.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">uvdist(\"/obj/geo1/sphere1\", 0, 0.1, 0.8, \"/obj/geo1/grid1\", 2, 1, 0.5)</code></div><p>Returns the distance between point (0.1, 0.8) on the first primitive\n    in sphere1 and point (1, 0.5) on the third primitive in grid1.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/distance\">distance</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primdist\">primdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/unituv\">unituv</a></div></body>",
    "vangle": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vangle\">vangle</a></h1><p class=\"summary\">Returns the angle between two vectors.</p><div class=\"usage\"> <code>vangle(<code class=\"var\">v0</code>, <code class=\"var\">v1</code>)</code></div><p><code>vangle(a, b)</code> will return the same result as <code>acos ( dot (normalize(a), normalize(b)) )</code>. It will not produce a negative result because the dot product is symmetric, and does not take the order of a and b into consideration.</p><p>You can define a turning order with the left hand rule or something similar. </p><h2>Tip</h2><p>Try the following expression to get a signed result: <code>sign(dot(cross(cross(a,b),b),a)) * vangle(a,b)</code></p></body>",
    "vector": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vector\">vector</a></h1><p class=\"summary\">Converts a string specification into a vector.</p><div class=\"usage\"> <code>vector(<code class=\"var\">pattern</code>)</code></div><p>The pattern should\nconsist of a leading square bracket followed by a comma-separated list\nof values and a closing square bracket.</p><p>To access a value out of the vector, use the square bracket operator.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vector v = vector(\"[1,2,3,4,5]\");</code><code class=\"codeline\">    float  f = v[0]; # f is 1</code></div></body>",
    "vector3": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vector3\">vector3</a></h1><p class=\"summary\">Converts three values into a 3-component vector.</p><div class=\"usage\"> <code>vector3(<code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>)</code></div><p>The pattern should\nconsist of a leading square bracket followed by a comma-separated list\nof values and a closing square bracket.</p><p>To access a value out of the vector, use the square bracket operator.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vector v = vector3(3,2,1);</code><code class=\"codeline\">    float  f = v[0]; # f is 3</code></div></body>",
    "vector4": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vector4\">vector4</a></h1><p class=\"summary\">Converts four values into a 4-component vector.</p><div class=\"usage\"> <code>vector4(<code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>, <code class=\"var\">w</code>)</code></div><p>To access a value out of the vector, use the square bracket operator.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vector v = vector4(3,2,1,0);</code><code class=\"codeline\">    float  f = v[0]; # f is 3</code></div></body>",
    "vertex": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertex\">vertex</a></h1><p class=\"summary\">Returns the value of a vertex attribute.</p><div class=\"usage\"> `vertex(<code class=\"var\">surface_node</code>, <code class=\"var\">primitive_number</code>, <code class=\"var\">vertex_number</code>,</div><p><code class=\"var\">attribute</code>, <code class=\"var\">index</code>)`</p><p><code class=\"var\">attribute</code> is the name of the attribute (eg. <code>Cd</code> for diffuse color). Two special attributes exist <code>P</code> and <code>Pw</code> which represent the position of the point in space. (<code>Pw</code> allows you to access\nthe W component of the position).</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for example <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary attribute <code>param</code>.</p><h2>Note</h2><p>This function will interpolate between point values if the vertex\n    number is fractional, such as 3.35.</p><p><p><code class=\"var\">index</code> specifies the component position in multi-component attributes such as vectors, colors, and arrays. For example, if the attribute is a color, an <code>index</code> value of <code>0</code> returns the red component, <code>1</code> returns the green component, and <code>2</code> returns the blue component.</p></p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertex(\"/obj/geo1/facet1\", 2, 3, \"P\", 0)</code></div><p>Return the X component of vertex 3 of primitive2 in the <code>facet1</code>\n    surface node of <code>geo1</code>.</p><div class=\"codeblock\"><code class=\"codeline\">point(\"/obj/geo1/facet1\", 2, 3, \"Cd\", 2)</code></div><p>Returns the Z component of the color attribute of vertex 3 of\n    primitive 2 in the <code>facet1</code> surface node of object <code>geo1</code>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/point\">point</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointavg\">pointavg</a></div></body>",
    "vertexattriblist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattriblist\">vertexattriblist</a></h1><p class=\"summary\">Returns a space-separated list of vertex attribute names.</p><div class=\"usage\"> <code>vertexattriblist(<code class=\"var\">surface_node</code>)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattriblist\">pointattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattriblist\">primattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattriblist\">detailattriblist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/attriblist\">attriblist</a></div></body>",
    "vertexattribsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribsize\">vertexattribsize</a></h1><p class=\"summary\">Returns the number of components in a vertex attribute.</p><div class=\"usage\"> <code>vertexattribsize(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute are not found, returns 0.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertexattribsize( \"/obj/model/sphere\", \"uv\" )</code></div><p>Returns the number of elements of a texture attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertex\">vertex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribsize\">pointattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribsize\">primattribsize</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribsize\">detailattribsize</a></div></body>",
    "vertexattribtype": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexattribtype\">vertexattribtype</a></h1><p class=\"summary\">Returns the type of a vertex attribute.</p><div class=\"usage\"> <code>vertexattribtype(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><p>If the surface node or attribute are not found, returns -1.</p><div class=\"argument\"><code>Types are</code></div><div class=\"related\">-1 - Unknown/Invalid</div><div class=\"related\">0 - Integer</div><div class=\"related\">1 - Float</div><div class=\"related\">2 - String</div><div class=\"related\">3 - Array of integers</div><div class=\"related\">4 - Array of floats</div><div class=\"related\">5 - Array of strings</div><div class=\"related\">6 - Dictionary</div><div class=\"related\">7 - Array of dictionaries</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertexattribsize( \"/obj/model/box\", \"Cd\" )</code></div><p>Returns 1 to denote a float attribute.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertex\">vertex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointattribtype\">pointattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primattribtype\">primattribtype</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/detailattribtype\">detailattribtype</a></div></body>",
    "vertexgrouplist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgrouplist\">vertexgrouplist</a></h1><p class=\"summary\">Returns the list of vertex groups in a surface node.</p><div class=\"usage\"> <code>vertexgrouplist(<code class=\"var\">surface_node</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To get a list of groups whose names match a pattern, use\n<a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgroupmask\">vertexgroupmask</a>.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgrouplist\">primgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgrouplist\">pointgrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegrouplist\">edgegrouplist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgroupmask\">vertexgroupmask</a></div></body>",
    "vertexgroupmask": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgroupmask\">vertexgroupmask</a></h1><p class=\"summary\">Returns the list of vertex groups matching a pattern in a surface node.</p><div class=\"usage\"> <code>vertexgroupmask(<code class=\"var\">surface_node</code>, <code class=\"var\">pattern</code>)</code></div><p>The returned string is a space separated list of group names.</p><p>To simply get a list of all vertex groups (no pattern),\nuse <a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgrouplist\">vertexgrouplist</a>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertexgroupmask(\"/obj/model\", \"group*\")</code></div><p>Returns the names of all vertex groups in the specified surface node which\n    start with \"group\". So this may be something like \"group1 group2\n    group_smoke\".</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primgroupmask\">primgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointgroupmask\">pointgroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/edgegroupmask\">edgegroupmask</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexgrouplist\">vertexgrouplist</a></div></body>",
    "vertexs": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexs\">vertexs</a></h1><p class=\"summary\">Returns the string value of a vertex attribute.</p><div class=\"usage\"> `vertexs(<code class=\"var\">surface_node</code>, <code class=\"var\">primitive_number</code>, <code class=\"var\">vertex_number</code>,</div><p><code class=\"var\">attribute</code>)`</p><p>Components of dictionary attributes can be resolved using <code>.</code>, for\nexample <code>\"param.key\"</code> will return the value of <code>key</code> in the dictionary\nattribute <code>param</code>.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertexs(\"/obj/geo1/facet1\", 1, 3, \"instance\")</code></div><p>Returns the string associated with the string attribute <code>instance</code>\n    for vertex 3 of primitive 0 in the <code>facet1</code> surface node in <code>geo1</code>.</p></body>",
    "vertexsmap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexsmap\">vertexsmap</a></h1><p class=\"summary\">Returns a string from a list of strings in a vertex attribute.</p><div class=\"usage\"> <code>vertexsmap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>, <code class=\"var\">index</code>)</code></div><p>This function will return the <code class=\"var\">index</code>th unique string bound to the given\npoint attribute. Use <a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexsnummap\">vertexsnummap</a> to find the total number of unique\nstrings. Note that the exact order of the strings is should not be\nrelied upon. The indexes start with 0 and go to vertexsnummap()-1.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertexsmap(\"/obj/geo1/attribcreate1\", \"foo\", 0)</code></div><p>Returns the first unique string in the foo attribute.</p></body>",
    "vertexsnummap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vertexsnummap\">vertexsnummap</a></h1><p class=\"summary\">Returns the number of unique strings bound to a point attribute.</p><div class=\"usage\"> <code>vertexsnummap(<code class=\"var\">surface_node</code>, <code class=\"var\">attribute</code>)</code></div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">vertexsnummap(\"/obj/geo1/attribcreate1\", \"foo\")</code></div><p>Returns number of unique strings for the foo attribute.</p></body>",
    "vlength": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vlength\">vlength</a></h1><p class=\"summary\">Returns the length of a vector.</p><div class=\"usage\"> <code>vlength(<code class=\"var\">vec</code>)</code></div><p>A.K.A. <code>sqrt(dot(<code class=\"var\">vec</code>, <code class=\"var\">vec</code>))</code>.</p></body>",
    "vlength2": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vlength2\">vlength2</a></h1><div class=\"usage\"> <code>vlength2(<code class=\"var\">vec</code>)</code></div><p>Compute the square of the length of the vector specified. This is\nequivalent to: dot(vec, vec).</p></body>",
    "vmatch": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatch\">vmatch</a></h1><p class=\"summary\">Channel segment function: matches the incoming and outgoing slopes.</p><div class=\"usage\"> <code>vmatch()</code></div><p>The values at each end of the segment will\nbe determined by the values specified at the segment ends.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/match\">match</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchin\">vmatchin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchout\">vmatchout</a></div></body>",
    "vmatchin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchin\">vmatchin</a></h1><p class=\"summary\">Channel segment function: matches the incoming slope.</p><div class=\"usage\"> <code>vmatchin()</code></div><p>The segment will be a straight line matching the slope of the\nprevious segment, but using the starting value specified a the beginning\nof this segment.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchin\">matchin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatch\">vmatch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchout\">vmatchout</a></div></body>",
    "vmatchout": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchout\">vmatchout</a></h1><p class=\"summary\">Channel segment function: matches the outgoing slope.</p><div class=\"usage\"> <code>vmatchout()</code></div><p>Compute a straight\nline which has the same slope as the in coming slope of the next\nsegment. The straight line will end at the value specified.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/matchout\">matchout</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatch\">vmatch</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vmatchin\">vmatchin</a></div></body>",
    "volumeaverage": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeaverage\">volumeaverage</a></h1><p class=\"summary\">Returns the average value of all the voxels in a volume.</p><div class=\"usage\"> <code>volumeaverage(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>)</code></div><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified, or the given primitive is not a\nvolume or VDB.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumeaverage(\"/obj/geo1/isooffset1\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumegradient": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumegradient\">volumegradient</a></h1><p class=\"summary\">Returns the gradient of a volume primitive at a specified location.</p><div class=\"usage\"> `volumegradient(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>,</div><p><code class=\"var\">axis</code>)`</p><p>The gradient of a volume primitive is a three dimensional vector\npointing in the direction of increasing value in the volume primitive.\nIt is returned in surface space (as opposed to the volume\u2019s local space or\nworld space).</p><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p><code class=\"var\">axis</code> controls which component of the gradient is returned:</p><div class=\"related\"><code class=\"var\">axis</code> = 0: X-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 1: Y-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 2: Z-axis</div><p>Returns 0 if out of bound values are specified, or the given primitive\nis not a volume.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumegradient(\"/obj/geo1/isooffset1\", 0, $TX, $TX, $TZ, 1)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumeindex": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeindex\">volumeindex</a></h1><p class=\"summary\">Returns the value of a volume primitive at a specified voxel.</p><div class=\"usage\"> <code>volumeindex(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>, <code class=\"var\">ix</code>, <code class=\"var\">iy</code>, <code class=\"var\">iz</code>)</code></div><p>The coordinates are in terms of the voxel grid, not world\ncoordinates.  0, 0, 0 means the first voxel.</p><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified,\nor the given primitive is not a volume.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumeindex(\"/obj/geo1/isooffset1\", 0, 3, 4, 5)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumeindextopos": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeindextopos\">volumeindextopos</a></h1><p class=\"summary\">Converts volume voxel coordinates to world-space coordinates.</p><div class=\"usage\"> <code>volumeindextopos(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>, <code class=\"var\">ix</code>, <code class=\"var\">iy</code>, <code class=\"var\">iz</code>, <code class=\"var\">axis</code>)</code></div><p>Returns the world-space coordinates of the center of\nthe given voxel.</p><p><code class=\"var\">surface_node</code> is the full path of the surface node.\nThe <code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p><code class=\"var\">axis</code> controls which component of the voxel index is returned:</p><div class=\"related\"><code class=\"var\">axis</code> = 0: X-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 1: Y-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 2: Z-axis</div><p>Returns 0 if out of bound values are specified, or the given primitive\nis not a volume.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumeindextopos(\"/obj/geo1/isooffset1\", 0, $TX, $TY, $TZ, 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumepostoindex\">volumepostoindex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumemax": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumemax\">volumemax</a></h1><p class=\"summary\">Returns the maximum value of all voxels in a volume.</p><div class=\"usage\"> <code>volumemax(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>)</code></div><p><code class=\"var\">surface_node</code> is the full path of the surface node.</p><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified, or the given primitive\nis not a volume or VDB.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumemax(\"/obj/geo1/isooffset1\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumemin\">volumemin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumemin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumemin\">volumemin</a></h1><p class=\"summary\">Returns the minimum value of all voxels in a volume.</p><div class=\"usage\"> <code>volumemin(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>)</code></div><p><code class=\"var\">surface_node</code> is the full path of the surface node.</p><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified, or the given primitive\nis not a volume or VDB.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumemin(\"/obj/geo1/isooffset1\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumemax\">volumemax</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumepostoindex": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumepostoindex\">volumepostoindex</a></h1><p class=\"summary\">Converts world space coordinates to volume voxel coordinates.</p><div class=\"usage\"> <code>volumepostoindex(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>, <code class=\"var\">axis</code>)</code></div><p>This function will return the voxel closest to the given worldspace\ncoordinated.  The axis selects which coordinate is returned.</p><p><code class=\"var\">surface_node</code> is the full path of the surface node.\nThe <code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified, or the given primitive\nis not a volume.</p><p><code class=\"var\">axis</code> controls which component of the world space position is returned:</p><div class=\"related\"><code class=\"var\">axis</code> = 0: X-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 1: Y-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 2: Z-axis</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumepostoindex(\"/obj/geo1/isooffset1\", 0, 3, 4, 5, 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeindextopos\">volumeindextopos</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumeres": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeres\">volumeres</a></h1><p class=\"summary\">Returns the resolution of a volume.</p><div class=\"usage\"> <code>volumeres(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>, <code class=\"var\">axis</code>)</code></div><p><code class=\"var\">surface_node</code> is the full path of the surface node.\nThe <code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p><code class=\"var\">axis</code> controls which component of the resolution is returned:</p><div class=\"related\"><code class=\"var\">axis</code> = 0: X-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 1: Y-axis</div><div class=\"related\"><code class=\"var\">axis</code> = 2: Z-axis</div><p>Returns 0 if out of bound values are specified, or the given primitive\nis not a volume.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumeres(\"/obj/geo1/isooffset1\", 0, 1)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "volumesample": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></h1><p class=\"summary\">Returns the value of a volume at a specified position.</p><div class=\"usage\"> <code>volumesample(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>, <code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>)</code></div><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified,\nor the given primitive is not a volume or VDB.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumesample(\"/obj/geo1/isooffset1\", 0, $TX, $TX, $TZ)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeindex\">volumeindex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumegradient\">volumegradient</a></div></body>",
    "volumevoxeldiameter": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumevoxeldiameter\">volumevoxeldiameter</a></h1><p class=\"summary\">Returns the approximage diameter of a volume voxel in world space.</p><div class=\"usage\"> <code>volumevoxeldiameter(<code class=\"var\">surface_node</code>, <code class=\"var\">prim_id</code>)</code></div><p><code class=\"var\">surface_node</code> is the full path of the surface node.\n<code class=\"var\">prim_id</code> is the primitive number of the volume primitive\nwithin the surface node.</p><p>Returns 0 if out of bound values are specified,\nor the given primitive is not a volume.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">volumevoxeldiameter(\"/obj/geo1/isooffset1\", 0)</code></div><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumeindex\">volumeindex</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/volumesample\">volumesample</a></div></body>",
    "vorigin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vorigin\">vorigin</a></h1><p class=\"summary\">Returns a vector of an objects' transforms.</p><div class=\"usage\"> <code>vorigin(<code class=\"var\">obj1</code>, <code class=\"var\">obj2</code>)</code></div><p>This function will return a vector with 6 values in it. The values are\nset to <code>[TX, TY, TZ, RX, RY, RZ]</code> for the position of obj1 relative to\nobj2.</p><p>This can also be thought of as the position of obj2 relative to obj1.</p><p>If the empty string (\"\") is specified for either obj1 or obj2, then the\nidentity transform will be used instead.  For example, if obj1 is the\nempty string, then the world space position of obj2 is returned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/origin\">origin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vtorigin\">vtorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vrorigin\">vrorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/originoffset\">originoffset</a></div></body>",
    "vpname": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vpname\">vpname</a></h1><p class=\"summary\">Takes a viewer name and a viewport number\nand returns the viewport\u2019s name.</p><div class=\"usage\"> <code>vpname(<code class=\"var\">viewer</code>, <code class=\"var\">viewport_quadrant_number</code>)</code></div></body>",
    "vrorigin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vrorigin\">vrorigin</a></h1><p class=\"summary\">Returns a vector of an object\u2019s rotations.</p><div class=\"usage\"> <code>vrorigin(<code class=\"var\">obj1</code>, <code class=\"var\">obj2</code>)</code></div><p>This function will return a vector containing the rotates required to\ntransform obj1 to the space of obj2.</p><p>This can also be thought of as the orientation of obj2 relative to\nobj1.</p><p>If the empty string (\"\") is specified for either obj1 or obj2, then the\nidentity transform will be used instead.  For example, if obj1 is the\nempty string, then the world space rotation of obj2 is returned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/origin\">origin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vorigin\">vorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vtorigin\">vtorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/originoffset\">originoffset</a></div></body>",
    "vscale": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vscale\">vscale</a></h1><p class=\"summary\">Multiplies a vector by a scaling factor.</p><div class=\"usage\"> <code>vscale(<code class=\"var\">vec</code>, <code class=\"var\">scale</code>)</code></div><p>A.K.A <code><code class=\"var\">vex</code> * <code class=\"var\">scale</code></code>.    </p></body>",
    "vset": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vset\">vset</a></h1><p class=\"summary\">Creates a vector with each component set to the same value.</p><div class=\"usage\"> <code>vset(<code class=\"var\">size</code>, <code class=\"var\">value</code>)</code></div><p>Returns a vector of size <code class=\"var\">size</code>, with each component set to <code class=\"var\">value</code>.</p></body>",
    "vsize": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vsize\">vsize</a></h1><p class=\"summary\">Returns the number of elements in a vector.</p><div class=\"usage\"> <code>vsize(<code class=\"var\">vec</code>)</code></div></body>",
    "vtorigin": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/vtorigin\">vtorigin</a></h1><p class=\"summary\">Returns a vector of an object\u2019s translations.</p><div class=\"usage\"> <code>vtorigin(<code class=\"var\">obj1</code>, <code class=\"var\">obj2</code>)</code></div><p>This function will return a vector containing the translates required\nto transform obj1 to the space of obj2.</p><p>This can also be thought of as the position of obj2 relative to obj1.</p><p>If the empty string (\"\") is specified for either obj1 or obj2, then the\nidentity transform will be used instead.  For example, if obj1 is the\nempty string, then the world space position of obj2 is returned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/origin\">origin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vorigin\">vorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/vrorigin\">vrorigin</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/originoffset\">originoffset</a></div></body>",
    "wrap": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/wrap\">wrap</a></h1><p class=\"summary\">Wraps a value between a minimum and maximum.</p><div class=\"usage\"> <code>wrap(<code class=\"var\">value</code>, <code class=\"var\">minimum</code>, <code class=\"var\">maximum</code>)</code></div><p>Similar to the clamp expression in that the resulting value will always\nfall between the specified minimum and maximum value. It will, however,\ncreate a sawtooth wave for continuously increasing or decreasing values\nof the value.</p><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">wrap ($F, 5, 10)</code></div><p>Creates a sawtooth function between 5 and 10.</p></body>",
    "xyzdist": "<body><h1><a href=\"https://www.sidefx.com/docs/houdini/expressions/xyzdist\">xyzdist</a></h1><p class=\"summary\">Returns the distance between a 3D coordinate and a primitive.</p><div class=\"usage\"> `xyzdist(<code class=\"var\">x</code>, <code class=\"var\">y</code>, <code class=\"var\">z</code>, <code class=\"var\">surface_node</code>, <code class=\"var\">prim_num</code>,</div><p><code class=\"var\">return_type</code>)`</p><p>If the <code class=\"var\">prim_num</code> is -1, finds the closest distance to any\nprimitive in the surface node.</p><div class=\"related\">return_type = 0 returns the minimum distance.</div><div class=\"related\">return_type = 1 returns the u parametric value at the point of minimum\n  distance.</div><div class=\"related\">return_type = 2 returns the v parametric value at the point of minimum\n  distance.</div><div class=\"related\">return_type = 3 returns the primitive number that was closest.</div><h2>Examples</h2><div class=\"codeblock\"><code class=\"codeline\">xyzdist(1, 2, 3, \"/obj/geo1/grid1\", 0, 0)</code></div><p>Returns the distance between (1, 2, 3) and the closest spot from the\n    surface of grid1 primitive number 0. If the return_type were 1, the\n    u parametric value that is closest to the point would be returned.</p><h2>Related</h2><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/primdist\">primdist</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/nearpoint\">nearpoint</a></div><div class=\"related\"><a href=\"https://www.sidefx.com/docs/houdini/expressions/pointdist\">pointdist</a></div></body>"
}